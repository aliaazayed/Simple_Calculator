
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e88  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000118  00800060  00002e88  00002efc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001ec0  00000000  00000000  00003014  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000e4c  00000000  00000000  00004ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001c0  00000000  00000000  00005d20  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000020e  00000000  00000000  00005ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000268b  00000000  00000000  000060ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014d1  00000000  00000000  00008779  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012ab  00000000  00000000  00009c4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  0000aef8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002fb  00000000  00000000  0000b0d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a0a  00000000  00000000  0000b3d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000bddd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e8       	ldi	r30, 0x88	; 136
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <main>
      7a:	0c 94 42 17 	jmp	0x2e84	; 0x2e84 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 1d 04 	call	0x83a	; 0x83a <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 0b 17 	jmp	0x2e16	; 0x2e16 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 27 17 	jmp	0x2e4e	; 0x2e4e <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 17 17 	jmp	0x2e2e	; 0x2e2e <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 33 17 	jmp	0x2e66	; 0x2e66 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 17 17 	jmp	0x2e2e	; 0x2e2e <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 7e 05 	call	0xafc	; 0xafc <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 33 17 	jmp	0x2e66	; 0x2e66 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 0b 17 	jmp	0x2e16	; 0x2e16 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 7e 05 	call	0xafc	; 0xafc <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 27 17 	jmp	0x2e4e	; 0x2e4e <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 13 17 	jmp	0x2e26	; 0x2e26 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	60 e6       	ldi	r22, 0x60	; 96
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 7e 05 	call	0xafc	; 0xafc <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 2f 17 	jmp	0x2e5e	; 0x2e5e <__epilogue_restores__+0x10>

0000077a <__eqsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 17 17 	jmp	0x2e2e	; 0x2e2e <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__eqsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__eqsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 cb 06 	call	0xd96	; 0xd96 <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__eqsf2+0x58>
     7d0:	81 e0       	ldi	r24, 0x01	; 1
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 33 17 	jmp	0x2e66	; 0x2e66 <__epilogue_restores__+0x18>

000007da <__gtsf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 17 17 	jmp	0x2e2e	; 0x2e2e <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gtsf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gtsf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 cb 06 	call	0xd96	; 0xd96 <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gtsf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 33 17 	jmp	0x2e66	; 0x2e66 <__epilogue_restores__+0x18>

0000083a <__gesf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 17 17 	jmp	0x2e2e	; 0x2e2e <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 cb 06 	call	0xd96	; 0xd96 <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	8f ef       	ldi	r24, 0xFF	; 255
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 33 17 	jmp	0x2e66	; 0x2e66 <__epilogue_restores__+0x18>

0000089a <__ltsf2>:
     89a:	a8 e1       	ldi	r26, 0x18	; 24
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 17 17 	jmp	0x2e2e	; 0x2e2e <__prologue_saves__+0x18>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	2d 83       	std	Y+5, r18	; 0x05
     8b0:	3e 83       	std	Y+6, r19	; 0x06
     8b2:	4f 83       	std	Y+7, r20	; 0x07
     8b4:	58 87       	std	Y+8, r21	; 0x08
     8b6:	89 e0       	ldi	r24, 0x09	; 9
     8b8:	e8 2e       	mov	r14, r24
     8ba:	f1 2c       	mov	r15, r1
     8bc:	ec 0e       	add	r14, r28
     8be:	fd 1e       	adc	r15, r29
     8c0:	ce 01       	movw	r24, r28
     8c2:	01 96       	adiw	r24, 0x01	; 1
     8c4:	b7 01       	movw	r22, r14
     8c6:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     8ca:	8e 01       	movw	r16, r28
     8cc:	0f 5e       	subi	r16, 0xEF	; 239
     8ce:	1f 4f       	sbci	r17, 0xFF	; 255
     8d0:	ce 01       	movw	r24, r28
     8d2:	05 96       	adiw	r24, 0x05	; 5
     8d4:	b8 01       	movw	r22, r16
     8d6:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     8da:	89 85       	ldd	r24, Y+9	; 0x09
     8dc:	82 30       	cpi	r24, 0x02	; 2
     8de:	40 f0       	brcs	.+16     	; 0x8f0 <__ltsf2+0x56>
     8e0:	89 89       	ldd	r24, Y+17	; 0x11
     8e2:	82 30       	cpi	r24, 0x02	; 2
     8e4:	28 f0       	brcs	.+10     	; 0x8f0 <__ltsf2+0x56>
     8e6:	c7 01       	movw	r24, r14
     8e8:	b8 01       	movw	r22, r16
     8ea:	0e 94 cb 06 	call	0xd96	; 0xd96 <__fpcmp_parts_f>
     8ee:	01 c0       	rjmp	.+2      	; 0x8f2 <__ltsf2+0x58>
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	68 96       	adiw	r28, 0x18	; 24
     8f4:	e6 e0       	ldi	r30, 0x06	; 6
     8f6:	0c 94 33 17 	jmp	0x2e66	; 0x2e66 <__epilogue_restores__+0x18>

000008fa <__floatsisf>:
     8fa:	a8 e0       	ldi	r26, 0x08	; 8
     8fc:	b0 e0       	ldi	r27, 0x00	; 0
     8fe:	e3 e8       	ldi	r30, 0x83	; 131
     900:	f4 e0       	ldi	r31, 0x04	; 4
     902:	0c 94 14 17 	jmp	0x2e28	; 0x2e28 <__prologue_saves__+0x12>
     906:	9b 01       	movw	r18, r22
     908:	ac 01       	movw	r20, r24
     90a:	83 e0       	ldi	r24, 0x03	; 3
     90c:	89 83       	std	Y+1, r24	; 0x01
     90e:	da 01       	movw	r26, r20
     910:	c9 01       	movw	r24, r18
     912:	88 27       	eor	r24, r24
     914:	b7 fd       	sbrc	r27, 7
     916:	83 95       	inc	r24
     918:	99 27       	eor	r25, r25
     91a:	aa 27       	eor	r26, r26
     91c:	bb 27       	eor	r27, r27
     91e:	b8 2e       	mov	r11, r24
     920:	21 15       	cp	r18, r1
     922:	31 05       	cpc	r19, r1
     924:	41 05       	cpc	r20, r1
     926:	51 05       	cpc	r21, r1
     928:	19 f4       	brne	.+6      	; 0x930 <__floatsisf+0x36>
     92a:	82 e0       	ldi	r24, 0x02	; 2
     92c:	89 83       	std	Y+1, r24	; 0x01
     92e:	3a c0       	rjmp	.+116    	; 0x9a4 <__floatsisf+0xaa>
     930:	88 23       	and	r24, r24
     932:	a9 f0       	breq	.+42     	; 0x95e <__floatsisf+0x64>
     934:	20 30       	cpi	r18, 0x00	; 0
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	38 07       	cpc	r19, r24
     93a:	80 e0       	ldi	r24, 0x00	; 0
     93c:	48 07       	cpc	r20, r24
     93e:	80 e8       	ldi	r24, 0x80	; 128
     940:	58 07       	cpc	r21, r24
     942:	29 f4       	brne	.+10     	; 0x94e <__floatsisf+0x54>
     944:	60 e0       	ldi	r22, 0x00	; 0
     946:	70 e0       	ldi	r23, 0x00	; 0
     948:	80 e0       	ldi	r24, 0x00	; 0
     94a:	9f ec       	ldi	r25, 0xCF	; 207
     94c:	30 c0       	rjmp	.+96     	; 0x9ae <__floatsisf+0xb4>
     94e:	ee 24       	eor	r14, r14
     950:	ff 24       	eor	r15, r15
     952:	87 01       	movw	r16, r14
     954:	e2 1a       	sub	r14, r18
     956:	f3 0a       	sbc	r15, r19
     958:	04 0b       	sbc	r16, r20
     95a:	15 0b       	sbc	r17, r21
     95c:	02 c0       	rjmp	.+4      	; 0x962 <__floatsisf+0x68>
     95e:	79 01       	movw	r14, r18
     960:	8a 01       	movw	r16, r20
     962:	8e e1       	ldi	r24, 0x1E	; 30
     964:	c8 2e       	mov	r12, r24
     966:	d1 2c       	mov	r13, r1
     968:	dc 82       	std	Y+4, r13	; 0x04
     96a:	cb 82       	std	Y+3, r12	; 0x03
     96c:	ed 82       	std	Y+5, r14	; 0x05
     96e:	fe 82       	std	Y+6, r15	; 0x06
     970:	0f 83       	std	Y+7, r16	; 0x07
     972:	18 87       	std	Y+8, r17	; 0x08
     974:	c8 01       	movw	r24, r16
     976:	b7 01       	movw	r22, r14
     978:	0e 94 2f 05 	call	0xa5e	; 0xa5e <__clzsi2>
     97c:	01 97       	sbiw	r24, 0x01	; 1
     97e:	18 16       	cp	r1, r24
     980:	19 06       	cpc	r1, r25
     982:	84 f4       	brge	.+32     	; 0x9a4 <__floatsisf+0xaa>
     984:	08 2e       	mov	r0, r24
     986:	04 c0       	rjmp	.+8      	; 0x990 <__floatsisf+0x96>
     988:	ee 0c       	add	r14, r14
     98a:	ff 1c       	adc	r15, r15
     98c:	00 1f       	adc	r16, r16
     98e:	11 1f       	adc	r17, r17
     990:	0a 94       	dec	r0
     992:	d2 f7       	brpl	.-12     	; 0x988 <__floatsisf+0x8e>
     994:	ed 82       	std	Y+5, r14	; 0x05
     996:	fe 82       	std	Y+6, r15	; 0x06
     998:	0f 83       	std	Y+7, r16	; 0x07
     99a:	18 87       	std	Y+8, r17	; 0x08
     99c:	c8 1a       	sub	r12, r24
     99e:	d9 0a       	sbc	r13, r25
     9a0:	dc 82       	std	Y+4, r13	; 0x04
     9a2:	cb 82       	std	Y+3, r12	; 0x03
     9a4:	ba 82       	std	Y+2, r11	; 0x02
     9a6:	ce 01       	movw	r24, r28
     9a8:	01 96       	adiw	r24, 0x01	; 1
     9aa:	0e 94 7e 05 	call	0xafc	; 0xafc <__pack_f>
     9ae:	28 96       	adiw	r28, 0x08	; 8
     9b0:	e9 e0       	ldi	r30, 0x09	; 9
     9b2:	0c 94 30 17 	jmp	0x2e60	; 0x2e60 <__epilogue_restores__+0x12>

000009b6 <__fixsfsi>:
     9b6:	ac e0       	ldi	r26, 0x0C	; 12
     9b8:	b0 e0       	ldi	r27, 0x00	; 0
     9ba:	e1 ee       	ldi	r30, 0xE1	; 225
     9bc:	f4 e0       	ldi	r31, 0x04	; 4
     9be:	0c 94 1b 17 	jmp	0x2e36	; 0x2e36 <__prologue_saves__+0x20>
     9c2:	69 83       	std	Y+1, r22	; 0x01
     9c4:	7a 83       	std	Y+2, r23	; 0x02
     9c6:	8b 83       	std	Y+3, r24	; 0x03
     9c8:	9c 83       	std	Y+4, r25	; 0x04
     9ca:	ce 01       	movw	r24, r28
     9cc:	01 96       	adiw	r24, 0x01	; 1
     9ce:	be 01       	movw	r22, r28
     9d0:	6b 5f       	subi	r22, 0xFB	; 251
     9d2:	7f 4f       	sbci	r23, 0xFF	; 255
     9d4:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     9d8:	8d 81       	ldd	r24, Y+5	; 0x05
     9da:	82 30       	cpi	r24, 0x02	; 2
     9dc:	61 f1       	breq	.+88     	; 0xa36 <__fixsfsi+0x80>
     9de:	82 30       	cpi	r24, 0x02	; 2
     9e0:	50 f1       	brcs	.+84     	; 0xa36 <__fixsfsi+0x80>
     9e2:	84 30       	cpi	r24, 0x04	; 4
     9e4:	21 f4       	brne	.+8      	; 0x9ee <__fixsfsi+0x38>
     9e6:	8e 81       	ldd	r24, Y+6	; 0x06
     9e8:	88 23       	and	r24, r24
     9ea:	51 f1       	breq	.+84     	; 0xa40 <__fixsfsi+0x8a>
     9ec:	2e c0       	rjmp	.+92     	; 0xa4a <__fixsfsi+0x94>
     9ee:	2f 81       	ldd	r18, Y+7	; 0x07
     9f0:	38 85       	ldd	r19, Y+8	; 0x08
     9f2:	37 fd       	sbrc	r19, 7
     9f4:	20 c0       	rjmp	.+64     	; 0xa36 <__fixsfsi+0x80>
     9f6:	6e 81       	ldd	r22, Y+6	; 0x06
     9f8:	2f 31       	cpi	r18, 0x1F	; 31
     9fa:	31 05       	cpc	r19, r1
     9fc:	1c f0       	brlt	.+6      	; 0xa04 <__fixsfsi+0x4e>
     9fe:	66 23       	and	r22, r22
     a00:	f9 f0       	breq	.+62     	; 0xa40 <__fixsfsi+0x8a>
     a02:	23 c0       	rjmp	.+70     	; 0xa4a <__fixsfsi+0x94>
     a04:	8e e1       	ldi	r24, 0x1E	; 30
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	82 1b       	sub	r24, r18
     a0a:	93 0b       	sbc	r25, r19
     a0c:	29 85       	ldd	r18, Y+9	; 0x09
     a0e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a10:	4b 85       	ldd	r20, Y+11	; 0x0b
     a12:	5c 85       	ldd	r21, Y+12	; 0x0c
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__fixsfsi+0x68>
     a16:	56 95       	lsr	r21
     a18:	47 95       	ror	r20
     a1a:	37 95       	ror	r19
     a1c:	27 95       	ror	r18
     a1e:	8a 95       	dec	r24
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__fixsfsi+0x60>
     a22:	66 23       	and	r22, r22
     a24:	b1 f0       	breq	.+44     	; 0xa52 <__fixsfsi+0x9c>
     a26:	50 95       	com	r21
     a28:	40 95       	com	r20
     a2a:	30 95       	com	r19
     a2c:	21 95       	neg	r18
     a2e:	3f 4f       	sbci	r19, 0xFF	; 255
     a30:	4f 4f       	sbci	r20, 0xFF	; 255
     a32:	5f 4f       	sbci	r21, 0xFF	; 255
     a34:	0e c0       	rjmp	.+28     	; 0xa52 <__fixsfsi+0x9c>
     a36:	20 e0       	ldi	r18, 0x00	; 0
     a38:	30 e0       	ldi	r19, 0x00	; 0
     a3a:	40 e0       	ldi	r20, 0x00	; 0
     a3c:	50 e0       	ldi	r21, 0x00	; 0
     a3e:	09 c0       	rjmp	.+18     	; 0xa52 <__fixsfsi+0x9c>
     a40:	2f ef       	ldi	r18, 0xFF	; 255
     a42:	3f ef       	ldi	r19, 0xFF	; 255
     a44:	4f ef       	ldi	r20, 0xFF	; 255
     a46:	5f e7       	ldi	r21, 0x7F	; 127
     a48:	04 c0       	rjmp	.+8      	; 0xa52 <__fixsfsi+0x9c>
     a4a:	20 e0       	ldi	r18, 0x00	; 0
     a4c:	30 e0       	ldi	r19, 0x00	; 0
     a4e:	40 e0       	ldi	r20, 0x00	; 0
     a50:	50 e8       	ldi	r21, 0x80	; 128
     a52:	b9 01       	movw	r22, r18
     a54:	ca 01       	movw	r24, r20
     a56:	2c 96       	adiw	r28, 0x0c	; 12
     a58:	e2 e0       	ldi	r30, 0x02	; 2
     a5a:	0c 94 37 17 	jmp	0x2e6e	; 0x2e6e <__epilogue_restores__+0x20>

00000a5e <__clzsi2>:
     a5e:	ef 92       	push	r14
     a60:	ff 92       	push	r15
     a62:	0f 93       	push	r16
     a64:	1f 93       	push	r17
     a66:	7b 01       	movw	r14, r22
     a68:	8c 01       	movw	r16, r24
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	e8 16       	cp	r14, r24
     a6e:	80 e0       	ldi	r24, 0x00	; 0
     a70:	f8 06       	cpc	r15, r24
     a72:	81 e0       	ldi	r24, 0x01	; 1
     a74:	08 07       	cpc	r16, r24
     a76:	80 e0       	ldi	r24, 0x00	; 0
     a78:	18 07       	cpc	r17, r24
     a7a:	88 f4       	brcc	.+34     	; 0xa9e <__clzsi2+0x40>
     a7c:	8f ef       	ldi	r24, 0xFF	; 255
     a7e:	e8 16       	cp	r14, r24
     a80:	f1 04       	cpc	r15, r1
     a82:	01 05       	cpc	r16, r1
     a84:	11 05       	cpc	r17, r1
     a86:	31 f0       	breq	.+12     	; 0xa94 <__clzsi2+0x36>
     a88:	28 f0       	brcs	.+10     	; 0xa94 <__clzsi2+0x36>
     a8a:	88 e0       	ldi	r24, 0x08	; 8
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	a0 e0       	ldi	r26, 0x00	; 0
     a90:	b0 e0       	ldi	r27, 0x00	; 0
     a92:	17 c0       	rjmp	.+46     	; 0xac2 <__clzsi2+0x64>
     a94:	80 e0       	ldi	r24, 0x00	; 0
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	a0 e0       	ldi	r26, 0x00	; 0
     a9a:	b0 e0       	ldi	r27, 0x00	; 0
     a9c:	12 c0       	rjmp	.+36     	; 0xac2 <__clzsi2+0x64>
     a9e:	80 e0       	ldi	r24, 0x00	; 0
     aa0:	e8 16       	cp	r14, r24
     aa2:	80 e0       	ldi	r24, 0x00	; 0
     aa4:	f8 06       	cpc	r15, r24
     aa6:	80 e0       	ldi	r24, 0x00	; 0
     aa8:	08 07       	cpc	r16, r24
     aaa:	81 e0       	ldi	r24, 0x01	; 1
     aac:	18 07       	cpc	r17, r24
     aae:	28 f0       	brcs	.+10     	; 0xaba <__clzsi2+0x5c>
     ab0:	88 e1       	ldi	r24, 0x18	; 24
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	a0 e0       	ldi	r26, 0x00	; 0
     ab6:	b0 e0       	ldi	r27, 0x00	; 0
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x64>
     aba:	80 e1       	ldi	r24, 0x10	; 16
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	a0 e0       	ldi	r26, 0x00	; 0
     ac0:	b0 e0       	ldi	r27, 0x00	; 0
     ac2:	20 e2       	ldi	r18, 0x20	; 32
     ac4:	30 e0       	ldi	r19, 0x00	; 0
     ac6:	40 e0       	ldi	r20, 0x00	; 0
     ac8:	50 e0       	ldi	r21, 0x00	; 0
     aca:	28 1b       	sub	r18, r24
     acc:	39 0b       	sbc	r19, r25
     ace:	4a 0b       	sbc	r20, r26
     ad0:	5b 0b       	sbc	r21, r27
     ad2:	04 c0       	rjmp	.+8      	; 0xadc <__clzsi2+0x7e>
     ad4:	16 95       	lsr	r17
     ad6:	07 95       	ror	r16
     ad8:	f7 94       	ror	r15
     ada:	e7 94       	ror	r14
     adc:	8a 95       	dec	r24
     ade:	d2 f7       	brpl	.-12     	; 0xad4 <__clzsi2+0x76>
     ae0:	f7 01       	movw	r30, r14
     ae2:	e8 59       	subi	r30, 0x98	; 152
     ae4:	ff 4f       	sbci	r31, 0xFF	; 255
     ae6:	80 81       	ld	r24, Z
     ae8:	28 1b       	sub	r18, r24
     aea:	31 09       	sbc	r19, r1
     aec:	41 09       	sbc	r20, r1
     aee:	51 09       	sbc	r21, r1
     af0:	c9 01       	movw	r24, r18
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	08 95       	ret

00000afc <__pack_f>:
     afc:	df 92       	push	r13
     afe:	ef 92       	push	r14
     b00:	ff 92       	push	r15
     b02:	0f 93       	push	r16
     b04:	1f 93       	push	r17
     b06:	fc 01       	movw	r30, r24
     b08:	e4 80       	ldd	r14, Z+4	; 0x04
     b0a:	f5 80       	ldd	r15, Z+5	; 0x05
     b0c:	06 81       	ldd	r16, Z+6	; 0x06
     b0e:	17 81       	ldd	r17, Z+7	; 0x07
     b10:	d1 80       	ldd	r13, Z+1	; 0x01
     b12:	80 81       	ld	r24, Z
     b14:	82 30       	cpi	r24, 0x02	; 2
     b16:	48 f4       	brcc	.+18     	; 0xb2a <__pack_f+0x2e>
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	a0 e1       	ldi	r26, 0x10	; 16
     b1e:	b0 e0       	ldi	r27, 0x00	; 0
     b20:	e8 2a       	or	r14, r24
     b22:	f9 2a       	or	r15, r25
     b24:	0a 2b       	or	r16, r26
     b26:	1b 2b       	or	r17, r27
     b28:	a5 c0       	rjmp	.+330    	; 0xc74 <__pack_f+0x178>
     b2a:	84 30       	cpi	r24, 0x04	; 4
     b2c:	09 f4       	brne	.+2      	; 0xb30 <__pack_f+0x34>
     b2e:	9f c0       	rjmp	.+318    	; 0xc6e <__pack_f+0x172>
     b30:	82 30       	cpi	r24, 0x02	; 2
     b32:	21 f4       	brne	.+8      	; 0xb3c <__pack_f+0x40>
     b34:	ee 24       	eor	r14, r14
     b36:	ff 24       	eor	r15, r15
     b38:	87 01       	movw	r16, r14
     b3a:	05 c0       	rjmp	.+10     	; 0xb46 <__pack_f+0x4a>
     b3c:	e1 14       	cp	r14, r1
     b3e:	f1 04       	cpc	r15, r1
     b40:	01 05       	cpc	r16, r1
     b42:	11 05       	cpc	r17, r1
     b44:	19 f4       	brne	.+6      	; 0xb4c <__pack_f+0x50>
     b46:	e0 e0       	ldi	r30, 0x00	; 0
     b48:	f0 e0       	ldi	r31, 0x00	; 0
     b4a:	96 c0       	rjmp	.+300    	; 0xc78 <__pack_f+0x17c>
     b4c:	62 81       	ldd	r22, Z+2	; 0x02
     b4e:	73 81       	ldd	r23, Z+3	; 0x03
     b50:	9f ef       	ldi	r25, 0xFF	; 255
     b52:	62 38       	cpi	r22, 0x82	; 130
     b54:	79 07       	cpc	r23, r25
     b56:	0c f0       	brlt	.+2      	; 0xb5a <__pack_f+0x5e>
     b58:	5b c0       	rjmp	.+182    	; 0xc10 <__pack_f+0x114>
     b5a:	22 e8       	ldi	r18, 0x82	; 130
     b5c:	3f ef       	ldi	r19, 0xFF	; 255
     b5e:	26 1b       	sub	r18, r22
     b60:	37 0b       	sbc	r19, r23
     b62:	2a 31       	cpi	r18, 0x1A	; 26
     b64:	31 05       	cpc	r19, r1
     b66:	2c f0       	brlt	.+10     	; 0xb72 <__pack_f+0x76>
     b68:	20 e0       	ldi	r18, 0x00	; 0
     b6a:	30 e0       	ldi	r19, 0x00	; 0
     b6c:	40 e0       	ldi	r20, 0x00	; 0
     b6e:	50 e0       	ldi	r21, 0x00	; 0
     b70:	2a c0       	rjmp	.+84     	; 0xbc6 <__pack_f+0xca>
     b72:	b8 01       	movw	r22, r16
     b74:	a7 01       	movw	r20, r14
     b76:	02 2e       	mov	r0, r18
     b78:	04 c0       	rjmp	.+8      	; 0xb82 <__pack_f+0x86>
     b7a:	76 95       	lsr	r23
     b7c:	67 95       	ror	r22
     b7e:	57 95       	ror	r21
     b80:	47 95       	ror	r20
     b82:	0a 94       	dec	r0
     b84:	d2 f7       	brpl	.-12     	; 0xb7a <__pack_f+0x7e>
     b86:	81 e0       	ldi	r24, 0x01	; 1
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	a0 e0       	ldi	r26, 0x00	; 0
     b8c:	b0 e0       	ldi	r27, 0x00	; 0
     b8e:	04 c0       	rjmp	.+8      	; 0xb98 <__pack_f+0x9c>
     b90:	88 0f       	add	r24, r24
     b92:	99 1f       	adc	r25, r25
     b94:	aa 1f       	adc	r26, r26
     b96:	bb 1f       	adc	r27, r27
     b98:	2a 95       	dec	r18
     b9a:	d2 f7       	brpl	.-12     	; 0xb90 <__pack_f+0x94>
     b9c:	01 97       	sbiw	r24, 0x01	; 1
     b9e:	a1 09       	sbc	r26, r1
     ba0:	b1 09       	sbc	r27, r1
     ba2:	8e 21       	and	r24, r14
     ba4:	9f 21       	and	r25, r15
     ba6:	a0 23       	and	r26, r16
     ba8:	b1 23       	and	r27, r17
     baa:	00 97       	sbiw	r24, 0x00	; 0
     bac:	a1 05       	cpc	r26, r1
     bae:	b1 05       	cpc	r27, r1
     bb0:	21 f0       	breq	.+8      	; 0xbba <__pack_f+0xbe>
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	a0 e0       	ldi	r26, 0x00	; 0
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	9a 01       	movw	r18, r20
     bbc:	ab 01       	movw	r20, r22
     bbe:	28 2b       	or	r18, r24
     bc0:	39 2b       	or	r19, r25
     bc2:	4a 2b       	or	r20, r26
     bc4:	5b 2b       	or	r21, r27
     bc6:	da 01       	movw	r26, r20
     bc8:	c9 01       	movw	r24, r18
     bca:	8f 77       	andi	r24, 0x7F	; 127
     bcc:	90 70       	andi	r25, 0x00	; 0
     bce:	a0 70       	andi	r26, 0x00	; 0
     bd0:	b0 70       	andi	r27, 0x00	; 0
     bd2:	80 34       	cpi	r24, 0x40	; 64
     bd4:	91 05       	cpc	r25, r1
     bd6:	a1 05       	cpc	r26, r1
     bd8:	b1 05       	cpc	r27, r1
     bda:	39 f4       	brne	.+14     	; 0xbea <__pack_f+0xee>
     bdc:	27 ff       	sbrs	r18, 7
     bde:	09 c0       	rjmp	.+18     	; 0xbf2 <__pack_f+0xf6>
     be0:	20 5c       	subi	r18, 0xC0	; 192
     be2:	3f 4f       	sbci	r19, 0xFF	; 255
     be4:	4f 4f       	sbci	r20, 0xFF	; 255
     be6:	5f 4f       	sbci	r21, 0xFF	; 255
     be8:	04 c0       	rjmp	.+8      	; 0xbf2 <__pack_f+0xf6>
     bea:	21 5c       	subi	r18, 0xC1	; 193
     bec:	3f 4f       	sbci	r19, 0xFF	; 255
     bee:	4f 4f       	sbci	r20, 0xFF	; 255
     bf0:	5f 4f       	sbci	r21, 0xFF	; 255
     bf2:	e0 e0       	ldi	r30, 0x00	; 0
     bf4:	f0 e0       	ldi	r31, 0x00	; 0
     bf6:	20 30       	cpi	r18, 0x00	; 0
     bf8:	a0 e0       	ldi	r26, 0x00	; 0
     bfa:	3a 07       	cpc	r19, r26
     bfc:	a0 e0       	ldi	r26, 0x00	; 0
     bfe:	4a 07       	cpc	r20, r26
     c00:	a0 e4       	ldi	r26, 0x40	; 64
     c02:	5a 07       	cpc	r21, r26
     c04:	10 f0       	brcs	.+4      	; 0xc0a <__pack_f+0x10e>
     c06:	e1 e0       	ldi	r30, 0x01	; 1
     c08:	f0 e0       	ldi	r31, 0x00	; 0
     c0a:	79 01       	movw	r14, r18
     c0c:	8a 01       	movw	r16, r20
     c0e:	27 c0       	rjmp	.+78     	; 0xc5e <__pack_f+0x162>
     c10:	60 38       	cpi	r22, 0x80	; 128
     c12:	71 05       	cpc	r23, r1
     c14:	64 f5       	brge	.+88     	; 0xc6e <__pack_f+0x172>
     c16:	fb 01       	movw	r30, r22
     c18:	e1 58       	subi	r30, 0x81	; 129
     c1a:	ff 4f       	sbci	r31, 0xFF	; 255
     c1c:	d8 01       	movw	r26, r16
     c1e:	c7 01       	movw	r24, r14
     c20:	8f 77       	andi	r24, 0x7F	; 127
     c22:	90 70       	andi	r25, 0x00	; 0
     c24:	a0 70       	andi	r26, 0x00	; 0
     c26:	b0 70       	andi	r27, 0x00	; 0
     c28:	80 34       	cpi	r24, 0x40	; 64
     c2a:	91 05       	cpc	r25, r1
     c2c:	a1 05       	cpc	r26, r1
     c2e:	b1 05       	cpc	r27, r1
     c30:	39 f4       	brne	.+14     	; 0xc40 <__pack_f+0x144>
     c32:	e7 fe       	sbrs	r14, 7
     c34:	0d c0       	rjmp	.+26     	; 0xc50 <__pack_f+0x154>
     c36:	80 e4       	ldi	r24, 0x40	; 64
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	a0 e0       	ldi	r26, 0x00	; 0
     c3c:	b0 e0       	ldi	r27, 0x00	; 0
     c3e:	04 c0       	rjmp	.+8      	; 0xc48 <__pack_f+0x14c>
     c40:	8f e3       	ldi	r24, 0x3F	; 63
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	a0 e0       	ldi	r26, 0x00	; 0
     c46:	b0 e0       	ldi	r27, 0x00	; 0
     c48:	e8 0e       	add	r14, r24
     c4a:	f9 1e       	adc	r15, r25
     c4c:	0a 1f       	adc	r16, r26
     c4e:	1b 1f       	adc	r17, r27
     c50:	17 ff       	sbrs	r17, 7
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x162>
     c54:	16 95       	lsr	r17
     c56:	07 95       	ror	r16
     c58:	f7 94       	ror	r15
     c5a:	e7 94       	ror	r14
     c5c:	31 96       	adiw	r30, 0x01	; 1
     c5e:	87 e0       	ldi	r24, 0x07	; 7
     c60:	16 95       	lsr	r17
     c62:	07 95       	ror	r16
     c64:	f7 94       	ror	r15
     c66:	e7 94       	ror	r14
     c68:	8a 95       	dec	r24
     c6a:	d1 f7       	brne	.-12     	; 0xc60 <__pack_f+0x164>
     c6c:	05 c0       	rjmp	.+10     	; 0xc78 <__pack_f+0x17c>
     c6e:	ee 24       	eor	r14, r14
     c70:	ff 24       	eor	r15, r15
     c72:	87 01       	movw	r16, r14
     c74:	ef ef       	ldi	r30, 0xFF	; 255
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	6e 2f       	mov	r22, r30
     c7a:	67 95       	ror	r22
     c7c:	66 27       	eor	r22, r22
     c7e:	67 95       	ror	r22
     c80:	90 2f       	mov	r25, r16
     c82:	9f 77       	andi	r25, 0x7F	; 127
     c84:	d7 94       	ror	r13
     c86:	dd 24       	eor	r13, r13
     c88:	d7 94       	ror	r13
     c8a:	8e 2f       	mov	r24, r30
     c8c:	86 95       	lsr	r24
     c8e:	49 2f       	mov	r20, r25
     c90:	46 2b       	or	r20, r22
     c92:	58 2f       	mov	r21, r24
     c94:	5d 29       	or	r21, r13
     c96:	b7 01       	movw	r22, r14
     c98:	ca 01       	movw	r24, r20
     c9a:	1f 91       	pop	r17
     c9c:	0f 91       	pop	r16
     c9e:	ff 90       	pop	r15
     ca0:	ef 90       	pop	r14
     ca2:	df 90       	pop	r13
     ca4:	08 95       	ret

00000ca6 <__unpack_f>:
     ca6:	fc 01       	movw	r30, r24
     ca8:	db 01       	movw	r26, r22
     caa:	40 81       	ld	r20, Z
     cac:	51 81       	ldd	r21, Z+1	; 0x01
     cae:	22 81       	ldd	r18, Z+2	; 0x02
     cb0:	62 2f       	mov	r22, r18
     cb2:	6f 77       	andi	r22, 0x7F	; 127
     cb4:	70 e0       	ldi	r23, 0x00	; 0
     cb6:	22 1f       	adc	r18, r18
     cb8:	22 27       	eor	r18, r18
     cba:	22 1f       	adc	r18, r18
     cbc:	93 81       	ldd	r25, Z+3	; 0x03
     cbe:	89 2f       	mov	r24, r25
     cc0:	88 0f       	add	r24, r24
     cc2:	82 2b       	or	r24, r18
     cc4:	28 2f       	mov	r18, r24
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	99 1f       	adc	r25, r25
     cca:	99 27       	eor	r25, r25
     ccc:	99 1f       	adc	r25, r25
     cce:	11 96       	adiw	r26, 0x01	; 1
     cd0:	9c 93       	st	X, r25
     cd2:	11 97       	sbiw	r26, 0x01	; 1
     cd4:	21 15       	cp	r18, r1
     cd6:	31 05       	cpc	r19, r1
     cd8:	a9 f5       	brne	.+106    	; 0xd44 <__unpack_f+0x9e>
     cda:	41 15       	cp	r20, r1
     cdc:	51 05       	cpc	r21, r1
     cde:	61 05       	cpc	r22, r1
     ce0:	71 05       	cpc	r23, r1
     ce2:	11 f4       	brne	.+4      	; 0xce8 <__unpack_f+0x42>
     ce4:	82 e0       	ldi	r24, 0x02	; 2
     ce6:	37 c0       	rjmp	.+110    	; 0xd56 <__unpack_f+0xb0>
     ce8:	82 e8       	ldi	r24, 0x82	; 130
     cea:	9f ef       	ldi	r25, 0xFF	; 255
     cec:	13 96       	adiw	r26, 0x03	; 3
     cee:	9c 93       	st	X, r25
     cf0:	8e 93       	st	-X, r24
     cf2:	12 97       	sbiw	r26, 0x02	; 2
     cf4:	9a 01       	movw	r18, r20
     cf6:	ab 01       	movw	r20, r22
     cf8:	67 e0       	ldi	r22, 0x07	; 7
     cfa:	22 0f       	add	r18, r18
     cfc:	33 1f       	adc	r19, r19
     cfe:	44 1f       	adc	r20, r20
     d00:	55 1f       	adc	r21, r21
     d02:	6a 95       	dec	r22
     d04:	d1 f7       	brne	.-12     	; 0xcfa <__unpack_f+0x54>
     d06:	83 e0       	ldi	r24, 0x03	; 3
     d08:	8c 93       	st	X, r24
     d0a:	0d c0       	rjmp	.+26     	; 0xd26 <__unpack_f+0x80>
     d0c:	22 0f       	add	r18, r18
     d0e:	33 1f       	adc	r19, r19
     d10:	44 1f       	adc	r20, r20
     d12:	55 1f       	adc	r21, r21
     d14:	12 96       	adiw	r26, 0x02	; 2
     d16:	8d 91       	ld	r24, X+
     d18:	9c 91       	ld	r25, X
     d1a:	13 97       	sbiw	r26, 0x03	; 3
     d1c:	01 97       	sbiw	r24, 0x01	; 1
     d1e:	13 96       	adiw	r26, 0x03	; 3
     d20:	9c 93       	st	X, r25
     d22:	8e 93       	st	-X, r24
     d24:	12 97       	sbiw	r26, 0x02	; 2
     d26:	20 30       	cpi	r18, 0x00	; 0
     d28:	80 e0       	ldi	r24, 0x00	; 0
     d2a:	38 07       	cpc	r19, r24
     d2c:	80 e0       	ldi	r24, 0x00	; 0
     d2e:	48 07       	cpc	r20, r24
     d30:	80 e4       	ldi	r24, 0x40	; 64
     d32:	58 07       	cpc	r21, r24
     d34:	58 f3       	brcs	.-42     	; 0xd0c <__unpack_f+0x66>
     d36:	14 96       	adiw	r26, 0x04	; 4
     d38:	2d 93       	st	X+, r18
     d3a:	3d 93       	st	X+, r19
     d3c:	4d 93       	st	X+, r20
     d3e:	5c 93       	st	X, r21
     d40:	17 97       	sbiw	r26, 0x07	; 7
     d42:	08 95       	ret
     d44:	2f 3f       	cpi	r18, 0xFF	; 255
     d46:	31 05       	cpc	r19, r1
     d48:	79 f4       	brne	.+30     	; 0xd68 <__unpack_f+0xc2>
     d4a:	41 15       	cp	r20, r1
     d4c:	51 05       	cpc	r21, r1
     d4e:	61 05       	cpc	r22, r1
     d50:	71 05       	cpc	r23, r1
     d52:	19 f4       	brne	.+6      	; 0xd5a <__unpack_f+0xb4>
     d54:	84 e0       	ldi	r24, 0x04	; 4
     d56:	8c 93       	st	X, r24
     d58:	08 95       	ret
     d5a:	64 ff       	sbrs	r22, 4
     d5c:	03 c0       	rjmp	.+6      	; 0xd64 <__unpack_f+0xbe>
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	8c 93       	st	X, r24
     d62:	12 c0       	rjmp	.+36     	; 0xd88 <__unpack_f+0xe2>
     d64:	1c 92       	st	X, r1
     d66:	10 c0       	rjmp	.+32     	; 0xd88 <__unpack_f+0xe2>
     d68:	2f 57       	subi	r18, 0x7F	; 127
     d6a:	30 40       	sbci	r19, 0x00	; 0
     d6c:	13 96       	adiw	r26, 0x03	; 3
     d6e:	3c 93       	st	X, r19
     d70:	2e 93       	st	-X, r18
     d72:	12 97       	sbiw	r26, 0x02	; 2
     d74:	83 e0       	ldi	r24, 0x03	; 3
     d76:	8c 93       	st	X, r24
     d78:	87 e0       	ldi	r24, 0x07	; 7
     d7a:	44 0f       	add	r20, r20
     d7c:	55 1f       	adc	r21, r21
     d7e:	66 1f       	adc	r22, r22
     d80:	77 1f       	adc	r23, r23
     d82:	8a 95       	dec	r24
     d84:	d1 f7       	brne	.-12     	; 0xd7a <__unpack_f+0xd4>
     d86:	70 64       	ori	r23, 0x40	; 64
     d88:	14 96       	adiw	r26, 0x04	; 4
     d8a:	4d 93       	st	X+, r20
     d8c:	5d 93       	st	X+, r21
     d8e:	6d 93       	st	X+, r22
     d90:	7c 93       	st	X, r23
     d92:	17 97       	sbiw	r26, 0x07	; 7
     d94:	08 95       	ret

00000d96 <__fpcmp_parts_f>:
     d96:	1f 93       	push	r17
     d98:	dc 01       	movw	r26, r24
     d9a:	fb 01       	movw	r30, r22
     d9c:	9c 91       	ld	r25, X
     d9e:	92 30       	cpi	r25, 0x02	; 2
     da0:	08 f4       	brcc	.+2      	; 0xda4 <__fpcmp_parts_f+0xe>
     da2:	47 c0       	rjmp	.+142    	; 0xe32 <__fpcmp_parts_f+0x9c>
     da4:	80 81       	ld	r24, Z
     da6:	82 30       	cpi	r24, 0x02	; 2
     da8:	08 f4       	brcc	.+2      	; 0xdac <__fpcmp_parts_f+0x16>
     daa:	43 c0       	rjmp	.+134    	; 0xe32 <__fpcmp_parts_f+0x9c>
     dac:	94 30       	cpi	r25, 0x04	; 4
     dae:	51 f4       	brne	.+20     	; 0xdc4 <__fpcmp_parts_f+0x2e>
     db0:	11 96       	adiw	r26, 0x01	; 1
     db2:	1c 91       	ld	r17, X
     db4:	84 30       	cpi	r24, 0x04	; 4
     db6:	99 f5       	brne	.+102    	; 0xe1e <__fpcmp_parts_f+0x88>
     db8:	81 81       	ldd	r24, Z+1	; 0x01
     dba:	68 2f       	mov	r22, r24
     dbc:	70 e0       	ldi	r23, 0x00	; 0
     dbe:	61 1b       	sub	r22, r17
     dc0:	71 09       	sbc	r23, r1
     dc2:	3f c0       	rjmp	.+126    	; 0xe42 <__fpcmp_parts_f+0xac>
     dc4:	84 30       	cpi	r24, 0x04	; 4
     dc6:	21 f0       	breq	.+8      	; 0xdd0 <__fpcmp_parts_f+0x3a>
     dc8:	92 30       	cpi	r25, 0x02	; 2
     dca:	31 f4       	brne	.+12     	; 0xdd8 <__fpcmp_parts_f+0x42>
     dcc:	82 30       	cpi	r24, 0x02	; 2
     dce:	b9 f1       	breq	.+110    	; 0xe3e <__fpcmp_parts_f+0xa8>
     dd0:	81 81       	ldd	r24, Z+1	; 0x01
     dd2:	88 23       	and	r24, r24
     dd4:	89 f1       	breq	.+98     	; 0xe38 <__fpcmp_parts_f+0xa2>
     dd6:	2d c0       	rjmp	.+90     	; 0xe32 <__fpcmp_parts_f+0x9c>
     dd8:	11 96       	adiw	r26, 0x01	; 1
     dda:	1c 91       	ld	r17, X
     ddc:	11 97       	sbiw	r26, 0x01	; 1
     dde:	82 30       	cpi	r24, 0x02	; 2
     de0:	f1 f0       	breq	.+60     	; 0xe1e <__fpcmp_parts_f+0x88>
     de2:	81 81       	ldd	r24, Z+1	; 0x01
     de4:	18 17       	cp	r17, r24
     de6:	d9 f4       	brne	.+54     	; 0xe1e <__fpcmp_parts_f+0x88>
     de8:	12 96       	adiw	r26, 0x02	; 2
     dea:	2d 91       	ld	r18, X+
     dec:	3c 91       	ld	r19, X
     dee:	13 97       	sbiw	r26, 0x03	; 3
     df0:	82 81       	ldd	r24, Z+2	; 0x02
     df2:	93 81       	ldd	r25, Z+3	; 0x03
     df4:	82 17       	cp	r24, r18
     df6:	93 07       	cpc	r25, r19
     df8:	94 f0       	brlt	.+36     	; 0xe1e <__fpcmp_parts_f+0x88>
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	bc f0       	brlt	.+46     	; 0xe2e <__fpcmp_parts_f+0x98>
     e00:	14 96       	adiw	r26, 0x04	; 4
     e02:	8d 91       	ld	r24, X+
     e04:	9d 91       	ld	r25, X+
     e06:	0d 90       	ld	r0, X+
     e08:	bc 91       	ld	r27, X
     e0a:	a0 2d       	mov	r26, r0
     e0c:	24 81       	ldd	r18, Z+4	; 0x04
     e0e:	35 81       	ldd	r19, Z+5	; 0x05
     e10:	46 81       	ldd	r20, Z+6	; 0x06
     e12:	57 81       	ldd	r21, Z+7	; 0x07
     e14:	28 17       	cp	r18, r24
     e16:	39 07       	cpc	r19, r25
     e18:	4a 07       	cpc	r20, r26
     e1a:	5b 07       	cpc	r21, r27
     e1c:	18 f4       	brcc	.+6      	; 0xe24 <__fpcmp_parts_f+0x8e>
     e1e:	11 23       	and	r17, r17
     e20:	41 f0       	breq	.+16     	; 0xe32 <__fpcmp_parts_f+0x9c>
     e22:	0a c0       	rjmp	.+20     	; 0xe38 <__fpcmp_parts_f+0xa2>
     e24:	82 17       	cp	r24, r18
     e26:	93 07       	cpc	r25, r19
     e28:	a4 07       	cpc	r26, r20
     e2a:	b5 07       	cpc	r27, r21
     e2c:	40 f4       	brcc	.+16     	; 0xe3e <__fpcmp_parts_f+0xa8>
     e2e:	11 23       	and	r17, r17
     e30:	19 f0       	breq	.+6      	; 0xe38 <__fpcmp_parts_f+0xa2>
     e32:	61 e0       	ldi	r22, 0x01	; 1
     e34:	70 e0       	ldi	r23, 0x00	; 0
     e36:	05 c0       	rjmp	.+10     	; 0xe42 <__fpcmp_parts_f+0xac>
     e38:	6f ef       	ldi	r22, 0xFF	; 255
     e3a:	7f ef       	ldi	r23, 0xFF	; 255
     e3c:	02 c0       	rjmp	.+4      	; 0xe42 <__fpcmp_parts_f+0xac>
     e3e:	60 e0       	ldi	r22, 0x00	; 0
     e40:	70 e0       	ldi	r23, 0x00	; 0
     e42:	cb 01       	movw	r24, r22
     e44:	1f 91       	pop	r17
     e46:	08 95       	ret

00000e48 <CLCD_voidInitialization>:


#include <avr/delay.h>

void CLCD_voidInitialization(void)
{
     e48:	df 93       	push	r29
     e4a:	cf 93       	push	r28
     e4c:	cd b7       	in	r28, 0x3d	; 61
     e4e:	de b7       	in	r29, 0x3e	; 62
     e50:	e8 97       	sbiw	r28, 0x38	; 56
     e52:	0f b6       	in	r0, 0x3f	; 63
     e54:	f8 94       	cli
     e56:	de bf       	out	0x3e, r29	; 62
     e58:	0f be       	out	0x3f, r0	; 63
     e5a:	cd bf       	out	0x3d, r28	; 61
	#if CLCD_MODE ==EIGHT_BIT_MODE
	MDIO_voidSetPortDirection( CLCD_DATA_PORT, DIO_PORT_OUTPUT);
     e5c:	80 e0       	ldi	r24, 0x00	; 0
     e5e:	6f ef       	ldi	r22, 0xFF	; 255
     e60:	0e 94 30 12 	call	0x2460	; 0x2460 <MDIO_voidSetPortDirection>
	MDIO_voidSetPinDirection( CLCD_CONTROL_PORT, CLCD_RS_PIN,DIO_PIN_OUTPUT);
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	60 e0       	ldi	r22, 0x00	; 0
     e68:	41 e0       	ldi	r20, 0x01	; 1
     e6a:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection( CLCD_CONTROL_PORT, CLCD_RW_PIN,DIO_PIN_OUTPUT);
     e6e:	81 e0       	ldi	r24, 0x01	; 1
     e70:	61 e0       	ldi	r22, 0x01	; 1
     e72:	41 e0       	ldi	r20, 0x01	; 1
     e74:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection( CLCD_CONTROL_PORT, CLCD_EN_PIN,DIO_PIN_OUTPUT);
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	62 e0       	ldi	r22, 0x02	; 2
     e7c:	41 e0       	ldi	r20, 0x01	; 1
     e7e:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <MDIO_voidSetPinDirection>

	
	CLCD_voidClearScreen();
     e82:	0e 94 4e 0a 	call	0x149c	; 0x149c <CLCD_voidClearScreen>
     e86:	80 e0       	ldi	r24, 0x00	; 0
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	a8 e4       	ldi	r26, 0x48	; 72
     e8c:	b2 e4       	ldi	r27, 0x42	; 66
     e8e:	8d ab       	std	Y+53, r24	; 0x35
     e90:	9e ab       	std	Y+54, r25	; 0x36
     e92:	af ab       	std	Y+55, r26	; 0x37
     e94:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e96:	6d a9       	ldd	r22, Y+53	; 0x35
     e98:	7e a9       	ldd	r23, Y+54	; 0x36
     e9a:	8f a9       	ldd	r24, Y+55	; 0x37
     e9c:	98 ad       	ldd	r25, Y+56	; 0x38
     e9e:	20 e0       	ldi	r18, 0x00	; 0
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	4a ef       	ldi	r20, 0xFA	; 250
     ea4:	54 e4       	ldi	r21, 0x44	; 68
     ea6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     eaa:	dc 01       	movw	r26, r24
     eac:	cb 01       	movw	r24, r22
     eae:	89 ab       	std	Y+49, r24	; 0x31
     eb0:	9a ab       	std	Y+50, r25	; 0x32
     eb2:	ab ab       	std	Y+51, r26	; 0x33
     eb4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     eb6:	69 a9       	ldd	r22, Y+49	; 0x31
     eb8:	7a a9       	ldd	r23, Y+50	; 0x32
     eba:	8b a9       	ldd	r24, Y+51	; 0x33
     ebc:	9c a9       	ldd	r25, Y+52	; 0x34
     ebe:	20 e0       	ldi	r18, 0x00	; 0
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	40 e8       	ldi	r20, 0x80	; 128
     ec4:	5f e3       	ldi	r21, 0x3F	; 63
     ec6:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
     eca:	88 23       	and	r24, r24
     ecc:	2c f4       	brge	.+10     	; 0xed8 <CLCD_voidInitialization+0x90>
		__ticks = 1;
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	98 ab       	std	Y+48, r25	; 0x30
     ed4:	8f a7       	std	Y+47, r24	; 0x2f
     ed6:	3f c0       	rjmp	.+126    	; 0xf56 <CLCD_voidInitialization+0x10e>
	else if (__tmp > 65535)
     ed8:	69 a9       	ldd	r22, Y+49	; 0x31
     eda:	7a a9       	ldd	r23, Y+50	; 0x32
     edc:	8b a9       	ldd	r24, Y+51	; 0x33
     ede:	9c a9       	ldd	r25, Y+52	; 0x34
     ee0:	20 e0       	ldi	r18, 0x00	; 0
     ee2:	3f ef       	ldi	r19, 0xFF	; 255
     ee4:	4f e7       	ldi	r20, 0x7F	; 127
     ee6:	57 e4       	ldi	r21, 0x47	; 71
     ee8:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
     eec:	18 16       	cp	r1, r24
     eee:	4c f5       	brge	.+82     	; 0xf42 <CLCD_voidInitialization+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ef0:	6d a9       	ldd	r22, Y+53	; 0x35
     ef2:	7e a9       	ldd	r23, Y+54	; 0x36
     ef4:	8f a9       	ldd	r24, Y+55	; 0x37
     ef6:	98 ad       	ldd	r25, Y+56	; 0x38
     ef8:	20 e0       	ldi	r18, 0x00	; 0
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	40 e2       	ldi	r20, 0x20	; 32
     efe:	51 e4       	ldi	r21, 0x41	; 65
     f00:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f04:	dc 01       	movw	r26, r24
     f06:	cb 01       	movw	r24, r22
     f08:	bc 01       	movw	r22, r24
     f0a:	cd 01       	movw	r24, r26
     f0c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f10:	dc 01       	movw	r26, r24
     f12:	cb 01       	movw	r24, r22
     f14:	98 ab       	std	Y+48, r25	; 0x30
     f16:	8f a7       	std	Y+47, r24	; 0x2f
     f18:	0f c0       	rjmp	.+30     	; 0xf38 <CLCD_voidInitialization+0xf0>
     f1a:	88 ec       	ldi	r24, 0xC8	; 200
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	9e a7       	std	Y+46, r25	; 0x2e
     f20:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f22:	8d a5       	ldd	r24, Y+45	; 0x2d
     f24:	9e a5       	ldd	r25, Y+46	; 0x2e
     f26:	01 97       	sbiw	r24, 0x01	; 1
     f28:	f1 f7       	brne	.-4      	; 0xf26 <CLCD_voidInitialization+0xde>
     f2a:	9e a7       	std	Y+46, r25	; 0x2e
     f2c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f2e:	8f a5       	ldd	r24, Y+47	; 0x2f
     f30:	98 a9       	ldd	r25, Y+48	; 0x30
     f32:	01 97       	sbiw	r24, 0x01	; 1
     f34:	98 ab       	std	Y+48, r25	; 0x30
     f36:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f38:	8f a5       	ldd	r24, Y+47	; 0x2f
     f3a:	98 a9       	ldd	r25, Y+48	; 0x30
     f3c:	00 97       	sbiw	r24, 0x00	; 0
     f3e:	69 f7       	brne	.-38     	; 0xf1a <CLCD_voidInitialization+0xd2>
     f40:	14 c0       	rjmp	.+40     	; 0xf6a <CLCD_voidInitialization+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f42:	69 a9       	ldd	r22, Y+49	; 0x31
     f44:	7a a9       	ldd	r23, Y+50	; 0x32
     f46:	8b a9       	ldd	r24, Y+51	; 0x33
     f48:	9c a9       	ldd	r25, Y+52	; 0x34
     f4a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f4e:	dc 01       	movw	r26, r24
     f50:	cb 01       	movw	r24, r22
     f52:	98 ab       	std	Y+48, r25	; 0x30
     f54:	8f a7       	std	Y+47, r24	; 0x2f
     f56:	8f a5       	ldd	r24, Y+47	; 0x2f
     f58:	98 a9       	ldd	r25, Y+48	; 0x30
     f5a:	9c a7       	std	Y+44, r25	; 0x2c
     f5c:	8b a7       	std	Y+43, r24	; 0x2b
     f5e:	8b a5       	ldd	r24, Y+43	; 0x2b
     f60:	9c a5       	ldd	r25, Y+44	; 0x2c
     f62:	01 97       	sbiw	r24, 0x01	; 1
     f64:	f1 f7       	brne	.-4      	; 0xf62 <CLCD_voidInitialization+0x11a>
     f66:	9c a7       	std	Y+44, r25	; 0x2c
     f68:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(50);
	CLCD_voidSendCommand(CLCD_RETURN_HOME);
     f6a:	82 e0       	ldi	r24, 0x02	; 2
     f6c:	0e 94 b8 09 	call	0x1370	; 0x1370 <CLCD_voidSendCommand>
     f70:	80 e0       	ldi	r24, 0x00	; 0
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	a8 e4       	ldi	r26, 0x48	; 72
     f76:	b2 e4       	ldi	r27, 0x42	; 66
     f78:	8f a3       	std	Y+39, r24	; 0x27
     f7a:	98 a7       	std	Y+40, r25	; 0x28
     f7c:	a9 a7       	std	Y+41, r26	; 0x29
     f7e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f80:	6f a1       	ldd	r22, Y+39	; 0x27
     f82:	78 a5       	ldd	r23, Y+40	; 0x28
     f84:	89 a5       	ldd	r24, Y+41	; 0x29
     f86:	9a a5       	ldd	r25, Y+42	; 0x2a
     f88:	20 e0       	ldi	r18, 0x00	; 0
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	4a ef       	ldi	r20, 0xFA	; 250
     f8e:	54 e4       	ldi	r21, 0x44	; 68
     f90:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f94:	dc 01       	movw	r26, r24
     f96:	cb 01       	movw	r24, r22
     f98:	8b a3       	std	Y+35, r24	; 0x23
     f9a:	9c a3       	std	Y+36, r25	; 0x24
     f9c:	ad a3       	std	Y+37, r26	; 0x25
     f9e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     fa0:	6b a1       	ldd	r22, Y+35	; 0x23
     fa2:	7c a1       	ldd	r23, Y+36	; 0x24
     fa4:	8d a1       	ldd	r24, Y+37	; 0x25
     fa6:	9e a1       	ldd	r25, Y+38	; 0x26
     fa8:	20 e0       	ldi	r18, 0x00	; 0
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	40 e8       	ldi	r20, 0x80	; 128
     fae:	5f e3       	ldi	r21, 0x3F	; 63
     fb0:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
     fb4:	88 23       	and	r24, r24
     fb6:	2c f4       	brge	.+10     	; 0xfc2 <CLCD_voidInitialization+0x17a>
		__ticks = 1;
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	9a a3       	std	Y+34, r25	; 0x22
     fbe:	89 a3       	std	Y+33, r24	; 0x21
     fc0:	3f c0       	rjmp	.+126    	; 0x1040 <CLCD_voidInitialization+0x1f8>
	else if (__tmp > 65535)
     fc2:	6b a1       	ldd	r22, Y+35	; 0x23
     fc4:	7c a1       	ldd	r23, Y+36	; 0x24
     fc6:	8d a1       	ldd	r24, Y+37	; 0x25
     fc8:	9e a1       	ldd	r25, Y+38	; 0x26
     fca:	20 e0       	ldi	r18, 0x00	; 0
     fcc:	3f ef       	ldi	r19, 0xFF	; 255
     fce:	4f e7       	ldi	r20, 0x7F	; 127
     fd0:	57 e4       	ldi	r21, 0x47	; 71
     fd2:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
     fd6:	18 16       	cp	r1, r24
     fd8:	4c f5       	brge	.+82     	; 0x102c <CLCD_voidInitialization+0x1e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fda:	6f a1       	ldd	r22, Y+39	; 0x27
     fdc:	78 a5       	ldd	r23, Y+40	; 0x28
     fde:	89 a5       	ldd	r24, Y+41	; 0x29
     fe0:	9a a5       	ldd	r25, Y+42	; 0x2a
     fe2:	20 e0       	ldi	r18, 0x00	; 0
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	40 e2       	ldi	r20, 0x20	; 32
     fe8:	51 e4       	ldi	r21, 0x41	; 65
     fea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fee:	dc 01       	movw	r26, r24
     ff0:	cb 01       	movw	r24, r22
     ff2:	bc 01       	movw	r22, r24
     ff4:	cd 01       	movw	r24, r26
     ff6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     ffa:	dc 01       	movw	r26, r24
     ffc:	cb 01       	movw	r24, r22
     ffe:	9a a3       	std	Y+34, r25	; 0x22
    1000:	89 a3       	std	Y+33, r24	; 0x21
    1002:	0f c0       	rjmp	.+30     	; 0x1022 <CLCD_voidInitialization+0x1da>
    1004:	88 ec       	ldi	r24, 0xC8	; 200
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	98 a3       	std	Y+32, r25	; 0x20
    100a:	8f 8f       	std	Y+31, r24	; 0x1f
    100c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    100e:	98 a1       	ldd	r25, Y+32	; 0x20
    1010:	01 97       	sbiw	r24, 0x01	; 1
    1012:	f1 f7       	brne	.-4      	; 0x1010 <CLCD_voidInitialization+0x1c8>
    1014:	98 a3       	std	Y+32, r25	; 0x20
    1016:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1018:	89 a1       	ldd	r24, Y+33	; 0x21
    101a:	9a a1       	ldd	r25, Y+34	; 0x22
    101c:	01 97       	sbiw	r24, 0x01	; 1
    101e:	9a a3       	std	Y+34, r25	; 0x22
    1020:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1022:	89 a1       	ldd	r24, Y+33	; 0x21
    1024:	9a a1       	ldd	r25, Y+34	; 0x22
    1026:	00 97       	sbiw	r24, 0x00	; 0
    1028:	69 f7       	brne	.-38     	; 0x1004 <CLCD_voidInitialization+0x1bc>
    102a:	14 c0       	rjmp	.+40     	; 0x1054 <CLCD_voidInitialization+0x20c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    102c:	6b a1       	ldd	r22, Y+35	; 0x23
    102e:	7c a1       	ldd	r23, Y+36	; 0x24
    1030:	8d a1       	ldd	r24, Y+37	; 0x25
    1032:	9e a1       	ldd	r25, Y+38	; 0x26
    1034:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1038:	dc 01       	movw	r26, r24
    103a:	cb 01       	movw	r24, r22
    103c:	9a a3       	std	Y+34, r25	; 0x22
    103e:	89 a3       	std	Y+33, r24	; 0x21
    1040:	89 a1       	ldd	r24, Y+33	; 0x21
    1042:	9a a1       	ldd	r25, Y+34	; 0x22
    1044:	9e 8f       	std	Y+30, r25	; 0x1e
    1046:	8d 8f       	std	Y+29, r24	; 0x1d
    1048:	8d 8d       	ldd	r24, Y+29	; 0x1d
    104a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    104c:	01 97       	sbiw	r24, 0x01	; 1
    104e:	f1 f7       	brne	.-4      	; 0x104c <CLCD_voidInitialization+0x204>
    1050:	9e 8f       	std	Y+30, r25	; 0x1e
    1052:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(50);
	CLCD_voidSendCommand(FUNCTION_SET_TWO_LINE );
    1054:	88 e3       	ldi	r24, 0x38	; 56
    1056:	0e 94 b8 09 	call	0x1370	; 0x1370 <CLCD_voidSendCommand>
    105a:	80 e0       	ldi	r24, 0x00	; 0
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	a0 e8       	ldi	r26, 0x80	; 128
    1060:	bf e3       	ldi	r27, 0x3F	; 63
    1062:	89 8f       	std	Y+25, r24	; 0x19
    1064:	9a 8f       	std	Y+26, r25	; 0x1a
    1066:	ab 8f       	std	Y+27, r26	; 0x1b
    1068:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    106a:	69 8d       	ldd	r22, Y+25	; 0x19
    106c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    106e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1070:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1072:	20 e0       	ldi	r18, 0x00	; 0
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	4a ef       	ldi	r20, 0xFA	; 250
    1078:	54 e4       	ldi	r21, 0x44	; 68
    107a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    107e:	dc 01       	movw	r26, r24
    1080:	cb 01       	movw	r24, r22
    1082:	8d 8b       	std	Y+21, r24	; 0x15
    1084:	9e 8b       	std	Y+22, r25	; 0x16
    1086:	af 8b       	std	Y+23, r26	; 0x17
    1088:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    108a:	6d 89       	ldd	r22, Y+21	; 0x15
    108c:	7e 89       	ldd	r23, Y+22	; 0x16
    108e:	8f 89       	ldd	r24, Y+23	; 0x17
    1090:	98 8d       	ldd	r25, Y+24	; 0x18
    1092:	20 e0       	ldi	r18, 0x00	; 0
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	40 e8       	ldi	r20, 0x80	; 128
    1098:	5f e3       	ldi	r21, 0x3F	; 63
    109a:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    109e:	88 23       	and	r24, r24
    10a0:	2c f4       	brge	.+10     	; 0x10ac <CLCD_voidInitialization+0x264>
		__ticks = 1;
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	9c 8b       	std	Y+20, r25	; 0x14
    10a8:	8b 8b       	std	Y+19, r24	; 0x13
    10aa:	3f c0       	rjmp	.+126    	; 0x112a <CLCD_voidInitialization+0x2e2>
	else if (__tmp > 65535)
    10ac:	6d 89       	ldd	r22, Y+21	; 0x15
    10ae:	7e 89       	ldd	r23, Y+22	; 0x16
    10b0:	8f 89       	ldd	r24, Y+23	; 0x17
    10b2:	98 8d       	ldd	r25, Y+24	; 0x18
    10b4:	20 e0       	ldi	r18, 0x00	; 0
    10b6:	3f ef       	ldi	r19, 0xFF	; 255
    10b8:	4f e7       	ldi	r20, 0x7F	; 127
    10ba:	57 e4       	ldi	r21, 0x47	; 71
    10bc:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    10c0:	18 16       	cp	r1, r24
    10c2:	4c f5       	brge	.+82     	; 0x1116 <CLCD_voidInitialization+0x2ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10c4:	69 8d       	ldd	r22, Y+25	; 0x19
    10c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10cc:	20 e0       	ldi	r18, 0x00	; 0
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	40 e2       	ldi	r20, 0x20	; 32
    10d2:	51 e4       	ldi	r21, 0x41	; 65
    10d4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10d8:	dc 01       	movw	r26, r24
    10da:	cb 01       	movw	r24, r22
    10dc:	bc 01       	movw	r22, r24
    10de:	cd 01       	movw	r24, r26
    10e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10e4:	dc 01       	movw	r26, r24
    10e6:	cb 01       	movw	r24, r22
    10e8:	9c 8b       	std	Y+20, r25	; 0x14
    10ea:	8b 8b       	std	Y+19, r24	; 0x13
    10ec:	0f c0       	rjmp	.+30     	; 0x110c <CLCD_voidInitialization+0x2c4>
    10ee:	88 ec       	ldi	r24, 0xC8	; 200
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	9a 8b       	std	Y+18, r25	; 0x12
    10f4:	89 8b       	std	Y+17, r24	; 0x11
    10f6:	89 89       	ldd	r24, Y+17	; 0x11
    10f8:	9a 89       	ldd	r25, Y+18	; 0x12
    10fa:	01 97       	sbiw	r24, 0x01	; 1
    10fc:	f1 f7       	brne	.-4      	; 0x10fa <CLCD_voidInitialization+0x2b2>
    10fe:	9a 8b       	std	Y+18, r25	; 0x12
    1100:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1102:	8b 89       	ldd	r24, Y+19	; 0x13
    1104:	9c 89       	ldd	r25, Y+20	; 0x14
    1106:	01 97       	sbiw	r24, 0x01	; 1
    1108:	9c 8b       	std	Y+20, r25	; 0x14
    110a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    110c:	8b 89       	ldd	r24, Y+19	; 0x13
    110e:	9c 89       	ldd	r25, Y+20	; 0x14
    1110:	00 97       	sbiw	r24, 0x00	; 0
    1112:	69 f7       	brne	.-38     	; 0x10ee <CLCD_voidInitialization+0x2a6>
    1114:	14 c0       	rjmp	.+40     	; 0x113e <CLCD_voidInitialization+0x2f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1116:	6d 89       	ldd	r22, Y+21	; 0x15
    1118:	7e 89       	ldd	r23, Y+22	; 0x16
    111a:	8f 89       	ldd	r24, Y+23	; 0x17
    111c:	98 8d       	ldd	r25, Y+24	; 0x18
    111e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1122:	dc 01       	movw	r26, r24
    1124:	cb 01       	movw	r24, r22
    1126:	9c 8b       	std	Y+20, r25	; 0x14
    1128:	8b 8b       	std	Y+19, r24	; 0x13
    112a:	8b 89       	ldd	r24, Y+19	; 0x13
    112c:	9c 89       	ldd	r25, Y+20	; 0x14
    112e:	98 8b       	std	Y+16, r25	; 0x10
    1130:	8f 87       	std	Y+15, r24	; 0x0f
    1132:	8f 85       	ldd	r24, Y+15	; 0x0f
    1134:	98 89       	ldd	r25, Y+16	; 0x10
    1136:	01 97       	sbiw	r24, 0x01	; 1
    1138:	f1 f7       	brne	.-4      	; 0x1136 <CLCD_voidInitialization+0x2ee>
    113a:	98 8b       	std	Y+16, r25	; 0x10
    113c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	CLCD_voidSendCommand(LCD_DISPLAY_ON_CURSOR_OFF_BLINK_OFF  );
    113e:	8c e0       	ldi	r24, 0x0C	; 12
    1140:	0e 94 b8 09 	call	0x1370	; 0x1370 <CLCD_voidSendCommand>
    1144:	80 e0       	ldi	r24, 0x00	; 0
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	a0 e8       	ldi	r26, 0x80	; 128
    114a:	bf e3       	ldi	r27, 0x3F	; 63
    114c:	8b 87       	std	Y+11, r24	; 0x0b
    114e:	9c 87       	std	Y+12, r25	; 0x0c
    1150:	ad 87       	std	Y+13, r26	; 0x0d
    1152:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1154:	6b 85       	ldd	r22, Y+11	; 0x0b
    1156:	7c 85       	ldd	r23, Y+12	; 0x0c
    1158:	8d 85       	ldd	r24, Y+13	; 0x0d
    115a:	9e 85       	ldd	r25, Y+14	; 0x0e
    115c:	20 e0       	ldi	r18, 0x00	; 0
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	4a ef       	ldi	r20, 0xFA	; 250
    1162:	54 e4       	ldi	r21, 0x44	; 68
    1164:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1168:	dc 01       	movw	r26, r24
    116a:	cb 01       	movw	r24, r22
    116c:	8f 83       	std	Y+7, r24	; 0x07
    116e:	98 87       	std	Y+8, r25	; 0x08
    1170:	a9 87       	std	Y+9, r26	; 0x09
    1172:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1174:	6f 81       	ldd	r22, Y+7	; 0x07
    1176:	78 85       	ldd	r23, Y+8	; 0x08
    1178:	89 85       	ldd	r24, Y+9	; 0x09
    117a:	9a 85       	ldd	r25, Y+10	; 0x0a
    117c:	20 e0       	ldi	r18, 0x00	; 0
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	40 e8       	ldi	r20, 0x80	; 128
    1182:	5f e3       	ldi	r21, 0x3F	; 63
    1184:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    1188:	88 23       	and	r24, r24
    118a:	2c f4       	brge	.+10     	; 0x1196 <CLCD_voidInitialization+0x34e>
		__ticks = 1;
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	9e 83       	std	Y+6, r25	; 0x06
    1192:	8d 83       	std	Y+5, r24	; 0x05
    1194:	3f c0       	rjmp	.+126    	; 0x1214 <CLCD_voidInitialization+0x3cc>
	else if (__tmp > 65535)
    1196:	6f 81       	ldd	r22, Y+7	; 0x07
    1198:	78 85       	ldd	r23, Y+8	; 0x08
    119a:	89 85       	ldd	r24, Y+9	; 0x09
    119c:	9a 85       	ldd	r25, Y+10	; 0x0a
    119e:	20 e0       	ldi	r18, 0x00	; 0
    11a0:	3f ef       	ldi	r19, 0xFF	; 255
    11a2:	4f e7       	ldi	r20, 0x7F	; 127
    11a4:	57 e4       	ldi	r21, 0x47	; 71
    11a6:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    11aa:	18 16       	cp	r1, r24
    11ac:	4c f5       	brge	.+82     	; 0x1200 <CLCD_voidInitialization+0x3b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    11b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    11b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    11b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    11b6:	20 e0       	ldi	r18, 0x00	; 0
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	40 e2       	ldi	r20, 0x20	; 32
    11bc:	51 e4       	ldi	r21, 0x41	; 65
    11be:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11c2:	dc 01       	movw	r26, r24
    11c4:	cb 01       	movw	r24, r22
    11c6:	bc 01       	movw	r22, r24
    11c8:	cd 01       	movw	r24, r26
    11ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11ce:	dc 01       	movw	r26, r24
    11d0:	cb 01       	movw	r24, r22
    11d2:	9e 83       	std	Y+6, r25	; 0x06
    11d4:	8d 83       	std	Y+5, r24	; 0x05
    11d6:	0f c0       	rjmp	.+30     	; 0x11f6 <CLCD_voidInitialization+0x3ae>
    11d8:	88 ec       	ldi	r24, 0xC8	; 200
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	9c 83       	std	Y+4, r25	; 0x04
    11de:	8b 83       	std	Y+3, r24	; 0x03
    11e0:	8b 81       	ldd	r24, Y+3	; 0x03
    11e2:	9c 81       	ldd	r25, Y+4	; 0x04
    11e4:	01 97       	sbiw	r24, 0x01	; 1
    11e6:	f1 f7       	brne	.-4      	; 0x11e4 <CLCD_voidInitialization+0x39c>
    11e8:	9c 83       	std	Y+4, r25	; 0x04
    11ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11ec:	8d 81       	ldd	r24, Y+5	; 0x05
    11ee:	9e 81       	ldd	r25, Y+6	; 0x06
    11f0:	01 97       	sbiw	r24, 0x01	; 1
    11f2:	9e 83       	std	Y+6, r25	; 0x06
    11f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11f6:	8d 81       	ldd	r24, Y+5	; 0x05
    11f8:	9e 81       	ldd	r25, Y+6	; 0x06
    11fa:	00 97       	sbiw	r24, 0x00	; 0
    11fc:	69 f7       	brne	.-38     	; 0x11d8 <CLCD_voidInitialization+0x390>
    11fe:	14 c0       	rjmp	.+40     	; 0x1228 <CLCD_voidInitialization+0x3e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1200:	6f 81       	ldd	r22, Y+7	; 0x07
    1202:	78 85       	ldd	r23, Y+8	; 0x08
    1204:	89 85       	ldd	r24, Y+9	; 0x09
    1206:	9a 85       	ldd	r25, Y+10	; 0x0a
    1208:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    120c:	dc 01       	movw	r26, r24
    120e:	cb 01       	movw	r24, r22
    1210:	9e 83       	std	Y+6, r25	; 0x06
    1212:	8d 83       	std	Y+5, r24	; 0x05
    1214:	8d 81       	ldd	r24, Y+5	; 0x05
    1216:	9e 81       	ldd	r25, Y+6	; 0x06
    1218:	9a 83       	std	Y+2, r25	; 0x02
    121a:	89 83       	std	Y+1, r24	; 0x01
    121c:	89 81       	ldd	r24, Y+1	; 0x01
    121e:	9a 81       	ldd	r25, Y+2	; 0x02
    1220:	01 97       	sbiw	r24, 0x01	; 1
    1222:	f1 f7       	brne	.-4      	; 0x1220 <CLCD_voidInitialization+0x3d8>
    1224:	9a 83       	std	Y+2, r25	; 0x02
    1226:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	CLCD_voidClearScreen();
    1228:	0e 94 4e 0a 	call	0x149c	; 0x149c <CLCD_voidClearScreen>
	CLCD_voidSendCommand(LCD_ENTRY_MODE_SHIFT_LEFT );
    122c:	86 e0       	ldi	r24, 0x06	; 6
    122e:	0e 94 b8 09 	call	0x1370	; 0x1370 <CLCD_voidSendCommand>
	_delay_ms(1);
	CLCD_voidClearScreen();
	CLCD_voidSendCommand(LCD_ENTRY_MODE_SHIFT_LEFT );
	#endif
	
}
    1232:	e8 96       	adiw	r28, 0x38	; 56
    1234:	0f b6       	in	r0, 0x3f	; 63
    1236:	f8 94       	cli
    1238:	de bf       	out	0x3e, r29	; 62
    123a:	0f be       	out	0x3f, r0	; 63
    123c:	cd bf       	out	0x3d, r28	; 61
    123e:	cf 91       	pop	r28
    1240:	df 91       	pop	r29
    1242:	08 95       	ret

00001244 <CLCD_voidSendData>:
	
 void CLCD_voidSendData( u8 copy_u8Data)
 {
    1244:	df 93       	push	r29
    1246:	cf 93       	push	r28
    1248:	cd b7       	in	r28, 0x3d	; 61
    124a:	de b7       	in	r29, 0x3e	; 62
    124c:	2f 97       	sbiw	r28, 0x0f	; 15
    124e:	0f b6       	in	r0, 0x3f	; 63
    1250:	f8 94       	cli
    1252:	de bf       	out	0x3e, r29	; 62
    1254:	0f be       	out	0x3f, r0	; 63
    1256:	cd bf       	out	0x3d, r28	; 61
    1258:	8f 87       	std	Y+15, r24	; 0x0f
	 #if CLCD_MODE == EIGHT_BIT_MODE
	 MDIO_voidSetPortValue(CLCD_DATA_PORT, copy_u8Data);
    125a:	80 e0       	ldi	r24, 0x00	; 0
    125c:	6f 85       	ldd	r22, Y+15	; 0x0f
    125e:	0e 94 71 12 	call	0x24e2	; 0x24e2 <MDIO_voidSetPortValue>
	 MDIO_voidSetPinValue(CLCD_CONTROL_PORT,CLCD_RS_PIN,DIO_PIN_HIGH);
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	60 e0       	ldi	r22, 0x00	; 0
    1266:	41 e0       	ldi	r20, 0x01	; 1
    1268:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <MDIO_voidSetPinValue>
	 MDIO_voidSetPinValue(CLCD_CONTROL_PORT,CLCD_RW_PIN,DIO_PIN_LOW);
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	61 e0       	ldi	r22, 0x01	; 1
    1270:	40 e0       	ldi	r20, 0x00	; 0
    1272:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <MDIO_voidSetPinValue>
	 CLCD_voidSendFallingEdge ();
    1276:	0e 94 94 0b 	call	0x1728	; 0x1728 <CLCD_voidSendFallingEdge>
    127a:	80 e0       	ldi	r24, 0x00	; 0
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	a0 e8       	ldi	r26, 0x80	; 128
    1280:	bf e3       	ldi	r27, 0x3F	; 63
    1282:	8b 87       	std	Y+11, r24	; 0x0b
    1284:	9c 87       	std	Y+12, r25	; 0x0c
    1286:	ad 87       	std	Y+13, r26	; 0x0d
    1288:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    128a:	6b 85       	ldd	r22, Y+11	; 0x0b
    128c:	7c 85       	ldd	r23, Y+12	; 0x0c
    128e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1290:	9e 85       	ldd	r25, Y+14	; 0x0e
    1292:	20 e0       	ldi	r18, 0x00	; 0
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	4a ef       	ldi	r20, 0xFA	; 250
    1298:	54 e4       	ldi	r21, 0x44	; 68
    129a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    129e:	dc 01       	movw	r26, r24
    12a0:	cb 01       	movw	r24, r22
    12a2:	8f 83       	std	Y+7, r24	; 0x07
    12a4:	98 87       	std	Y+8, r25	; 0x08
    12a6:	a9 87       	std	Y+9, r26	; 0x09
    12a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12aa:	6f 81       	ldd	r22, Y+7	; 0x07
    12ac:	78 85       	ldd	r23, Y+8	; 0x08
    12ae:	89 85       	ldd	r24, Y+9	; 0x09
    12b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    12b2:	20 e0       	ldi	r18, 0x00	; 0
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	40 e8       	ldi	r20, 0x80	; 128
    12b8:	5f e3       	ldi	r21, 0x3F	; 63
    12ba:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    12be:	88 23       	and	r24, r24
    12c0:	2c f4       	brge	.+10     	; 0x12cc <CLCD_voidSendData+0x88>
		__ticks = 1;
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	9e 83       	std	Y+6, r25	; 0x06
    12c8:	8d 83       	std	Y+5, r24	; 0x05
    12ca:	3f c0       	rjmp	.+126    	; 0x134a <CLCD_voidSendData+0x106>
	else if (__tmp > 65535)
    12cc:	6f 81       	ldd	r22, Y+7	; 0x07
    12ce:	78 85       	ldd	r23, Y+8	; 0x08
    12d0:	89 85       	ldd	r24, Y+9	; 0x09
    12d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    12d4:	20 e0       	ldi	r18, 0x00	; 0
    12d6:	3f ef       	ldi	r19, 0xFF	; 255
    12d8:	4f e7       	ldi	r20, 0x7F	; 127
    12da:	57 e4       	ldi	r21, 0x47	; 71
    12dc:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    12e0:	18 16       	cp	r1, r24
    12e2:	4c f5       	brge	.+82     	; 0x1336 <CLCD_voidSendData+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    12e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    12e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    12ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    12ec:	20 e0       	ldi	r18, 0x00	; 0
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	40 e2       	ldi	r20, 0x20	; 32
    12f2:	51 e4       	ldi	r21, 0x41	; 65
    12f4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12f8:	dc 01       	movw	r26, r24
    12fa:	cb 01       	movw	r24, r22
    12fc:	bc 01       	movw	r22, r24
    12fe:	cd 01       	movw	r24, r26
    1300:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1304:	dc 01       	movw	r26, r24
    1306:	cb 01       	movw	r24, r22
    1308:	9e 83       	std	Y+6, r25	; 0x06
    130a:	8d 83       	std	Y+5, r24	; 0x05
    130c:	0f c0       	rjmp	.+30     	; 0x132c <CLCD_voidSendData+0xe8>
    130e:	88 ec       	ldi	r24, 0xC8	; 200
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	9c 83       	std	Y+4, r25	; 0x04
    1314:	8b 83       	std	Y+3, r24	; 0x03
    1316:	8b 81       	ldd	r24, Y+3	; 0x03
    1318:	9c 81       	ldd	r25, Y+4	; 0x04
    131a:	01 97       	sbiw	r24, 0x01	; 1
    131c:	f1 f7       	brne	.-4      	; 0x131a <CLCD_voidSendData+0xd6>
    131e:	9c 83       	std	Y+4, r25	; 0x04
    1320:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1322:	8d 81       	ldd	r24, Y+5	; 0x05
    1324:	9e 81       	ldd	r25, Y+6	; 0x06
    1326:	01 97       	sbiw	r24, 0x01	; 1
    1328:	9e 83       	std	Y+6, r25	; 0x06
    132a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    132c:	8d 81       	ldd	r24, Y+5	; 0x05
    132e:	9e 81       	ldd	r25, Y+6	; 0x06
    1330:	00 97       	sbiw	r24, 0x00	; 0
    1332:	69 f7       	brne	.-38     	; 0x130e <CLCD_voidSendData+0xca>
    1334:	14 c0       	rjmp	.+40     	; 0x135e <CLCD_voidSendData+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1336:	6f 81       	ldd	r22, Y+7	; 0x07
    1338:	78 85       	ldd	r23, Y+8	; 0x08
    133a:	89 85       	ldd	r24, Y+9	; 0x09
    133c:	9a 85       	ldd	r25, Y+10	; 0x0a
    133e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1342:	dc 01       	movw	r26, r24
    1344:	cb 01       	movw	r24, r22
    1346:	9e 83       	std	Y+6, r25	; 0x06
    1348:	8d 83       	std	Y+5, r24	; 0x05
    134a:	8d 81       	ldd	r24, Y+5	; 0x05
    134c:	9e 81       	ldd	r25, Y+6	; 0x06
    134e:	9a 83       	std	Y+2, r25	; 0x02
    1350:	89 83       	std	Y+1, r24	; 0x01
    1352:	89 81       	ldd	r24, Y+1	; 0x01
    1354:	9a 81       	ldd	r25, Y+2	; 0x02
    1356:	01 97       	sbiw	r24, 0x01	; 1
    1358:	f1 f7       	brne	.-4      	; 0x1356 <CLCD_voidSendData+0x112>
    135a:	9a 83       	std	Y+2, r25	; 0x02
    135c:	89 83       	std	Y+1, r24	; 0x01
	#endif

	_delay_ms(1);
	  
	  
 }
    135e:	2f 96       	adiw	r28, 0x0f	; 15
    1360:	0f b6       	in	r0, 0x3f	; 63
    1362:	f8 94       	cli
    1364:	de bf       	out	0x3e, r29	; 62
    1366:	0f be       	out	0x3f, r0	; 63
    1368:	cd bf       	out	0x3d, r28	; 61
    136a:	cf 91       	pop	r28
    136c:	df 91       	pop	r29
    136e:	08 95       	ret

00001370 <CLCD_voidSendCommand>:
	 
void CLCD_voidSendCommand( u8 copy_u8Command)
{
    1370:	df 93       	push	r29
    1372:	cf 93       	push	r28
    1374:	cd b7       	in	r28, 0x3d	; 61
    1376:	de b7       	in	r29, 0x3e	; 62
    1378:	2f 97       	sbiw	r28, 0x0f	; 15
    137a:	0f b6       	in	r0, 0x3f	; 63
    137c:	f8 94       	cli
    137e:	de bf       	out	0x3e, r29	; 62
    1380:	0f be       	out	0x3f, r0	; 63
    1382:	cd bf       	out	0x3d, r28	; 61
    1384:	8f 87       	std	Y+15, r24	; 0x0f
	 #if CLCD_MODE == EIGHT_BIT_MODE
	 MDIO_voidSetPortValue(CLCD_DATA_PORT,copy_u8Command);
    1386:	80 e0       	ldi	r24, 0x00	; 0
    1388:	6f 85       	ldd	r22, Y+15	; 0x0f
    138a:	0e 94 71 12 	call	0x24e2	; 0x24e2 <MDIO_voidSetPortValue>
	 MDIO_voidSetPinValue(CLCD_CONTROL_PORT,CLCD_RS_PIN,DIO_PIN_LOW);
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	60 e0       	ldi	r22, 0x00	; 0
    1392:	40 e0       	ldi	r20, 0x00	; 0
    1394:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <MDIO_voidSetPinValue>
	 MDIO_voidSetPinValue(CLCD_CONTROL_PORT,CLCD_RW_PIN,DIO_PIN_LOW);
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	61 e0       	ldi	r22, 0x01	; 1
    139c:	40 e0       	ldi	r20, 0x00	; 0
    139e:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <MDIO_voidSetPinValue>
	 CLCD_voidSendFallingEdge ();
    13a2:	0e 94 94 0b 	call	0x1728	; 0x1728 <CLCD_voidSendFallingEdge>
    13a6:	80 e0       	ldi	r24, 0x00	; 0
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	a0 e8       	ldi	r26, 0x80	; 128
    13ac:	bf e3       	ldi	r27, 0x3F	; 63
    13ae:	8b 87       	std	Y+11, r24	; 0x0b
    13b0:	9c 87       	std	Y+12, r25	; 0x0c
    13b2:	ad 87       	std	Y+13, r26	; 0x0d
    13b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    13b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    13ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    13bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    13be:	20 e0       	ldi	r18, 0x00	; 0
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	4a ef       	ldi	r20, 0xFA	; 250
    13c4:	54 e4       	ldi	r21, 0x44	; 68
    13c6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13ca:	dc 01       	movw	r26, r24
    13cc:	cb 01       	movw	r24, r22
    13ce:	8f 83       	std	Y+7, r24	; 0x07
    13d0:	98 87       	std	Y+8, r25	; 0x08
    13d2:	a9 87       	std	Y+9, r26	; 0x09
    13d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13d6:	6f 81       	ldd	r22, Y+7	; 0x07
    13d8:	78 85       	ldd	r23, Y+8	; 0x08
    13da:	89 85       	ldd	r24, Y+9	; 0x09
    13dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    13de:	20 e0       	ldi	r18, 0x00	; 0
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	40 e8       	ldi	r20, 0x80	; 128
    13e4:	5f e3       	ldi	r21, 0x3F	; 63
    13e6:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    13ea:	88 23       	and	r24, r24
    13ec:	2c f4       	brge	.+10     	; 0x13f8 <CLCD_voidSendCommand+0x88>
		__ticks = 1;
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	9e 83       	std	Y+6, r25	; 0x06
    13f4:	8d 83       	std	Y+5, r24	; 0x05
    13f6:	3f c0       	rjmp	.+126    	; 0x1476 <CLCD_voidSendCommand+0x106>
	else if (__tmp > 65535)
    13f8:	6f 81       	ldd	r22, Y+7	; 0x07
    13fa:	78 85       	ldd	r23, Y+8	; 0x08
    13fc:	89 85       	ldd	r24, Y+9	; 0x09
    13fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1400:	20 e0       	ldi	r18, 0x00	; 0
    1402:	3f ef       	ldi	r19, 0xFF	; 255
    1404:	4f e7       	ldi	r20, 0x7F	; 127
    1406:	57 e4       	ldi	r21, 0x47	; 71
    1408:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    140c:	18 16       	cp	r1, r24
    140e:	4c f5       	brge	.+82     	; 0x1462 <CLCD_voidSendCommand+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1410:	6b 85       	ldd	r22, Y+11	; 0x0b
    1412:	7c 85       	ldd	r23, Y+12	; 0x0c
    1414:	8d 85       	ldd	r24, Y+13	; 0x0d
    1416:	9e 85       	ldd	r25, Y+14	; 0x0e
    1418:	20 e0       	ldi	r18, 0x00	; 0
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	40 e2       	ldi	r20, 0x20	; 32
    141e:	51 e4       	ldi	r21, 0x41	; 65
    1420:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1424:	dc 01       	movw	r26, r24
    1426:	cb 01       	movw	r24, r22
    1428:	bc 01       	movw	r22, r24
    142a:	cd 01       	movw	r24, r26
    142c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1430:	dc 01       	movw	r26, r24
    1432:	cb 01       	movw	r24, r22
    1434:	9e 83       	std	Y+6, r25	; 0x06
    1436:	8d 83       	std	Y+5, r24	; 0x05
    1438:	0f c0       	rjmp	.+30     	; 0x1458 <CLCD_voidSendCommand+0xe8>
    143a:	88 ec       	ldi	r24, 0xC8	; 200
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	9c 83       	std	Y+4, r25	; 0x04
    1440:	8b 83       	std	Y+3, r24	; 0x03
    1442:	8b 81       	ldd	r24, Y+3	; 0x03
    1444:	9c 81       	ldd	r25, Y+4	; 0x04
    1446:	01 97       	sbiw	r24, 0x01	; 1
    1448:	f1 f7       	brne	.-4      	; 0x1446 <CLCD_voidSendCommand+0xd6>
    144a:	9c 83       	std	Y+4, r25	; 0x04
    144c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    144e:	8d 81       	ldd	r24, Y+5	; 0x05
    1450:	9e 81       	ldd	r25, Y+6	; 0x06
    1452:	01 97       	sbiw	r24, 0x01	; 1
    1454:	9e 83       	std	Y+6, r25	; 0x06
    1456:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1458:	8d 81       	ldd	r24, Y+5	; 0x05
    145a:	9e 81       	ldd	r25, Y+6	; 0x06
    145c:	00 97       	sbiw	r24, 0x00	; 0
    145e:	69 f7       	brne	.-38     	; 0x143a <CLCD_voidSendCommand+0xca>
    1460:	14 c0       	rjmp	.+40     	; 0x148a <CLCD_voidSendCommand+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1462:	6f 81       	ldd	r22, Y+7	; 0x07
    1464:	78 85       	ldd	r23, Y+8	; 0x08
    1466:	89 85       	ldd	r24, Y+9	; 0x09
    1468:	9a 85       	ldd	r25, Y+10	; 0x0a
    146a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    146e:	dc 01       	movw	r26, r24
    1470:	cb 01       	movw	r24, r22
    1472:	9e 83       	std	Y+6, r25	; 0x06
    1474:	8d 83       	std	Y+5, r24	; 0x05
    1476:	8d 81       	ldd	r24, Y+5	; 0x05
    1478:	9e 81       	ldd	r25, Y+6	; 0x06
    147a:	9a 83       	std	Y+2, r25	; 0x02
    147c:	89 83       	std	Y+1, r24	; 0x01
    147e:	89 81       	ldd	r24, Y+1	; 0x01
    1480:	9a 81       	ldd	r25, Y+2	; 0x02
    1482:	01 97       	sbiw	r24, 0x01	; 1
    1484:	f1 f7       	brne	.-4      	; 0x1482 <CLCD_voidSendCommand+0x112>
    1486:	9a 83       	std	Y+2, r25	; 0x02
    1488:	89 83       	std	Y+1, r24	; 0x01

	#endif

	_delay_ms(1);
	 
}
    148a:	2f 96       	adiw	r28, 0x0f	; 15
    148c:	0f b6       	in	r0, 0x3f	; 63
    148e:	f8 94       	cli
    1490:	de bf       	out	0x3e, r29	; 62
    1492:	0f be       	out	0x3f, r0	; 63
    1494:	cd bf       	out	0x3d, r28	; 61
    1496:	cf 91       	pop	r28
    1498:	df 91       	pop	r29
    149a:	08 95       	ret

0000149c <CLCD_voidClearScreen>:
void CLCD_voidClearScreen(void)
{
    149c:	df 93       	push	r29
    149e:	cf 93       	push	r28
    14a0:	cd b7       	in	r28, 0x3d	; 61
    14a2:	de b7       	in	r29, 0x3e	; 62
    14a4:	2e 97       	sbiw	r28, 0x0e	; 14
    14a6:	0f b6       	in	r0, 0x3f	; 63
    14a8:	f8 94       	cli
    14aa:	de bf       	out	0x3e, r29	; 62
    14ac:	0f be       	out	0x3f, r0	; 63
    14ae:	cd bf       	out	0x3d, r28	; 61
	CLCD_voidSendCommand( LCD_DISPLAY_CLEAR);
    14b0:	81 e0       	ldi	r24, 0x01	; 1
    14b2:	0e 94 b8 09 	call	0x1370	; 0x1370 <CLCD_voidSendCommand>
    14b6:	80 e0       	ldi	r24, 0x00	; 0
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	a0 e2       	ldi	r26, 0x20	; 32
    14bc:	b1 e4       	ldi	r27, 0x41	; 65
    14be:	8b 87       	std	Y+11, r24	; 0x0b
    14c0:	9c 87       	std	Y+12, r25	; 0x0c
    14c2:	ad 87       	std	Y+13, r26	; 0x0d
    14c4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    14c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    14ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    14cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    14ce:	20 e0       	ldi	r18, 0x00	; 0
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	4a ef       	ldi	r20, 0xFA	; 250
    14d4:	54 e4       	ldi	r21, 0x44	; 68
    14d6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14da:	dc 01       	movw	r26, r24
    14dc:	cb 01       	movw	r24, r22
    14de:	8f 83       	std	Y+7, r24	; 0x07
    14e0:	98 87       	std	Y+8, r25	; 0x08
    14e2:	a9 87       	std	Y+9, r26	; 0x09
    14e4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14e6:	6f 81       	ldd	r22, Y+7	; 0x07
    14e8:	78 85       	ldd	r23, Y+8	; 0x08
    14ea:	89 85       	ldd	r24, Y+9	; 0x09
    14ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    14ee:	20 e0       	ldi	r18, 0x00	; 0
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	40 e8       	ldi	r20, 0x80	; 128
    14f4:	5f e3       	ldi	r21, 0x3F	; 63
    14f6:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    14fa:	88 23       	and	r24, r24
    14fc:	2c f4       	brge	.+10     	; 0x1508 <CLCD_voidClearScreen+0x6c>
		__ticks = 1;
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	9e 83       	std	Y+6, r25	; 0x06
    1504:	8d 83       	std	Y+5, r24	; 0x05
    1506:	3f c0       	rjmp	.+126    	; 0x1586 <CLCD_voidClearScreen+0xea>
	else if (__tmp > 65535)
    1508:	6f 81       	ldd	r22, Y+7	; 0x07
    150a:	78 85       	ldd	r23, Y+8	; 0x08
    150c:	89 85       	ldd	r24, Y+9	; 0x09
    150e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1510:	20 e0       	ldi	r18, 0x00	; 0
    1512:	3f ef       	ldi	r19, 0xFF	; 255
    1514:	4f e7       	ldi	r20, 0x7F	; 127
    1516:	57 e4       	ldi	r21, 0x47	; 71
    1518:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    151c:	18 16       	cp	r1, r24
    151e:	4c f5       	brge	.+82     	; 0x1572 <CLCD_voidClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1520:	6b 85       	ldd	r22, Y+11	; 0x0b
    1522:	7c 85       	ldd	r23, Y+12	; 0x0c
    1524:	8d 85       	ldd	r24, Y+13	; 0x0d
    1526:	9e 85       	ldd	r25, Y+14	; 0x0e
    1528:	20 e0       	ldi	r18, 0x00	; 0
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	40 e2       	ldi	r20, 0x20	; 32
    152e:	51 e4       	ldi	r21, 0x41	; 65
    1530:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1534:	dc 01       	movw	r26, r24
    1536:	cb 01       	movw	r24, r22
    1538:	bc 01       	movw	r22, r24
    153a:	cd 01       	movw	r24, r26
    153c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1540:	dc 01       	movw	r26, r24
    1542:	cb 01       	movw	r24, r22
    1544:	9e 83       	std	Y+6, r25	; 0x06
    1546:	8d 83       	std	Y+5, r24	; 0x05
    1548:	0f c0       	rjmp	.+30     	; 0x1568 <CLCD_voidClearScreen+0xcc>
    154a:	88 ec       	ldi	r24, 0xC8	; 200
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	9c 83       	std	Y+4, r25	; 0x04
    1550:	8b 83       	std	Y+3, r24	; 0x03
    1552:	8b 81       	ldd	r24, Y+3	; 0x03
    1554:	9c 81       	ldd	r25, Y+4	; 0x04
    1556:	01 97       	sbiw	r24, 0x01	; 1
    1558:	f1 f7       	brne	.-4      	; 0x1556 <CLCD_voidClearScreen+0xba>
    155a:	9c 83       	std	Y+4, r25	; 0x04
    155c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    155e:	8d 81       	ldd	r24, Y+5	; 0x05
    1560:	9e 81       	ldd	r25, Y+6	; 0x06
    1562:	01 97       	sbiw	r24, 0x01	; 1
    1564:	9e 83       	std	Y+6, r25	; 0x06
    1566:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1568:	8d 81       	ldd	r24, Y+5	; 0x05
    156a:	9e 81       	ldd	r25, Y+6	; 0x06
    156c:	00 97       	sbiw	r24, 0x00	; 0
    156e:	69 f7       	brne	.-38     	; 0x154a <CLCD_voidClearScreen+0xae>
    1570:	14 c0       	rjmp	.+40     	; 0x159a <CLCD_voidClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1572:	6f 81       	ldd	r22, Y+7	; 0x07
    1574:	78 85       	ldd	r23, Y+8	; 0x08
    1576:	89 85       	ldd	r24, Y+9	; 0x09
    1578:	9a 85       	ldd	r25, Y+10	; 0x0a
    157a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    157e:	dc 01       	movw	r26, r24
    1580:	cb 01       	movw	r24, r22
    1582:	9e 83       	std	Y+6, r25	; 0x06
    1584:	8d 83       	std	Y+5, r24	; 0x05
    1586:	8d 81       	ldd	r24, Y+5	; 0x05
    1588:	9e 81       	ldd	r25, Y+6	; 0x06
    158a:	9a 83       	std	Y+2, r25	; 0x02
    158c:	89 83       	std	Y+1, r24	; 0x01
    158e:	89 81       	ldd	r24, Y+1	; 0x01
    1590:	9a 81       	ldd	r25, Y+2	; 0x02
    1592:	01 97       	sbiw	r24, 0x01	; 1
    1594:	f1 f7       	brne	.-4      	; 0x1592 <CLCD_voidClearScreen+0xf6>
    1596:	9a 83       	std	Y+2, r25	; 0x02
    1598:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    159a:	2e 96       	adiw	r28, 0x0e	; 14
    159c:	0f b6       	in	r0, 0x3f	; 63
    159e:	f8 94       	cli
    15a0:	de bf       	out	0x3e, r29	; 62
    15a2:	0f be       	out	0x3f, r0	; 63
    15a4:	cd bf       	out	0x3d, r28	; 61
    15a6:	cf 91       	pop	r28
    15a8:	df 91       	pop	r29
    15aa:	08 95       	ret

000015ac <CLCD_voidSendString>:
 void CLCD_voidSendString( u8* copy_u8ptrString)
 {
    15ac:	df 93       	push	r29
    15ae:	cf 93       	push	r28
    15b0:	00 d0       	rcall	.+0      	; 0x15b2 <CLCD_voidSendString+0x6>
    15b2:	0f 92       	push	r0
    15b4:	cd b7       	in	r28, 0x3d	; 61
    15b6:	de b7       	in	r29, 0x3e	; 62
    15b8:	9b 83       	std	Y+3, r25	; 0x03
    15ba:	8a 83       	std	Y+2, r24	; 0x02
	 u8 LOC_u8Itrator=0;
    15bc:	19 82       	std	Y+1, r1	; 0x01
	 while(copy_u8ptrString[ LOC_u8Itrator] != '/0')
	 {
		CLCD_voidSendData(copy_u8ptrString[ LOC_u8Itrator]);
    15be:	89 81       	ldd	r24, Y+1	; 0x01
    15c0:	28 2f       	mov	r18, r24
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	8a 81       	ldd	r24, Y+2	; 0x02
    15c6:	9b 81       	ldd	r25, Y+3	; 0x03
    15c8:	fc 01       	movw	r30, r24
    15ca:	e2 0f       	add	r30, r18
    15cc:	f3 1f       	adc	r31, r19
    15ce:	80 81       	ld	r24, Z
    15d0:	0e 94 22 09 	call	0x1244	; 0x1244 <CLCD_voidSendData>
		 LOC_u8Itrator++;
    15d4:	89 81       	ldd	r24, Y+1	; 0x01
    15d6:	8f 5f       	subi	r24, 0xFF	; 255
    15d8:	89 83       	std	Y+1, r24	; 0x01
    15da:	f1 cf       	rjmp	.-30     	; 0x15be <CLCD_voidSendString+0x12>

000015dc <CLCD_voidSetPosition>:
	 }
 }	 

 void CLCD_voidSetPosition ( u8 copy_u8Row, u8 copy_u8Column)
 {
    15dc:	df 93       	push	r29
    15de:	cf 93       	push	r28
    15e0:	cd b7       	in	r28, 0x3d	; 61
    15e2:	de b7       	in	r29, 0x3e	; 62
    15e4:	61 97       	sbiw	r28, 0x11	; 17
    15e6:	0f b6       	in	r0, 0x3f	; 63
    15e8:	f8 94       	cli
    15ea:	de bf       	out	0x3e, r29	; 62
    15ec:	0f be       	out	0x3f, r0	; 63
    15ee:	cd bf       	out	0x3d, r28	; 61
    15f0:	88 8b       	std	Y+16, r24	; 0x10
    15f2:	69 8b       	std	Y+17, r22	; 0x11
	 u8 LOC_u8Data;
	 if( (copy_u8Row>2)||(copy_u8Row<1) ||(copy_u8Column>16)||(copy_u8Column<1))
    15f4:	88 89       	ldd	r24, Y+16	; 0x10
    15f6:	83 30       	cpi	r24, 0x03	; 3
    15f8:	48 f4       	brcc	.+18     	; 0x160c <CLCD_voidSetPosition+0x30>
    15fa:	88 89       	ldd	r24, Y+16	; 0x10
    15fc:	88 23       	and	r24, r24
    15fe:	31 f0       	breq	.+12     	; 0x160c <CLCD_voidSetPosition+0x30>
    1600:	89 89       	ldd	r24, Y+17	; 0x11
    1602:	81 31       	cpi	r24, 0x11	; 17
    1604:	18 f4       	brcc	.+6      	; 0x160c <CLCD_voidSetPosition+0x30>
    1606:	89 89       	ldd	r24, Y+17	; 0x11
    1608:	88 23       	and	r24, r24
    160a:	19 f4       	brne	.+6      	; 0x1612 <CLCD_voidSetPosition+0x36>
	 {
		 LOC_u8Data=LCD_SET_CURSOR_FIRST_LINE;
    160c:	80 e8       	ldi	r24, 0x80	; 128
    160e:	8f 87       	std	Y+15, r24	; 0x0f
    1610:	0d c0       	rjmp	.+26     	; 0x162c <CLCD_voidSetPosition+0x50>
	 }
	 else if(copy_u8Row==CLCD_ROW_1)
    1612:	88 89       	ldd	r24, Y+16	; 0x10
    1614:	81 30       	cpi	r24, 0x01	; 1
    1616:	21 f4       	brne	.+8      	; 0x1620 <CLCD_voidSetPosition+0x44>
	 {
		 LOC_u8Data=LCD_SET_CURSOR_FIRST_LINE+(copy_u8Column-1);
    1618:	89 89       	ldd	r24, Y+17	; 0x11
    161a:	81 58       	subi	r24, 0x81	; 129
    161c:	8f 87       	std	Y+15, r24	; 0x0f
    161e:	06 c0       	rjmp	.+12     	; 0x162c <CLCD_voidSetPosition+0x50>
	 }
     else if(copy_u8Row==CLCD_ROW_2)
    1620:	88 89       	ldd	r24, Y+16	; 0x10
    1622:	82 30       	cpi	r24, 0x02	; 2
    1624:	19 f4       	brne	.+6      	; 0x162c <CLCD_voidSetPosition+0x50>
	 {
		 LOC_u8Data=LCD_SET_CURSOR_SECOND_LINE +(copy_u8Column-1);
    1626:	89 89       	ldd	r24, Y+17	; 0x11
    1628:	81 54       	subi	r24, 0x41	; 65
    162a:	8f 87       	std	Y+15, r24	; 0x0f
	 }	
    CLCD_voidSendCommand(LOC_u8Data);
    162c:	8f 85       	ldd	r24, Y+15	; 0x0f
    162e:	0e 94 b8 09 	call	0x1370	; 0x1370 <CLCD_voidSendCommand>
    1632:	80 e0       	ldi	r24, 0x00	; 0
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	a0 e8       	ldi	r26, 0x80	; 128
    1638:	bf e3       	ldi	r27, 0x3F	; 63
    163a:	8b 87       	std	Y+11, r24	; 0x0b
    163c:	9c 87       	std	Y+12, r25	; 0x0c
    163e:	ad 87       	std	Y+13, r26	; 0x0d
    1640:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1642:	6b 85       	ldd	r22, Y+11	; 0x0b
    1644:	7c 85       	ldd	r23, Y+12	; 0x0c
    1646:	8d 85       	ldd	r24, Y+13	; 0x0d
    1648:	9e 85       	ldd	r25, Y+14	; 0x0e
    164a:	20 e0       	ldi	r18, 0x00	; 0
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	4a ef       	ldi	r20, 0xFA	; 250
    1650:	54 e4       	ldi	r21, 0x44	; 68
    1652:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1656:	dc 01       	movw	r26, r24
    1658:	cb 01       	movw	r24, r22
    165a:	8f 83       	std	Y+7, r24	; 0x07
    165c:	98 87       	std	Y+8, r25	; 0x08
    165e:	a9 87       	std	Y+9, r26	; 0x09
    1660:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1662:	6f 81       	ldd	r22, Y+7	; 0x07
    1664:	78 85       	ldd	r23, Y+8	; 0x08
    1666:	89 85       	ldd	r24, Y+9	; 0x09
    1668:	9a 85       	ldd	r25, Y+10	; 0x0a
    166a:	20 e0       	ldi	r18, 0x00	; 0
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	40 e8       	ldi	r20, 0x80	; 128
    1670:	5f e3       	ldi	r21, 0x3F	; 63
    1672:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    1676:	88 23       	and	r24, r24
    1678:	2c f4       	brge	.+10     	; 0x1684 <CLCD_voidSetPosition+0xa8>
		__ticks = 1;
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	9e 83       	std	Y+6, r25	; 0x06
    1680:	8d 83       	std	Y+5, r24	; 0x05
    1682:	3f c0       	rjmp	.+126    	; 0x1702 <CLCD_voidSetPosition+0x126>
	else if (__tmp > 65535)
    1684:	6f 81       	ldd	r22, Y+7	; 0x07
    1686:	78 85       	ldd	r23, Y+8	; 0x08
    1688:	89 85       	ldd	r24, Y+9	; 0x09
    168a:	9a 85       	ldd	r25, Y+10	; 0x0a
    168c:	20 e0       	ldi	r18, 0x00	; 0
    168e:	3f ef       	ldi	r19, 0xFF	; 255
    1690:	4f e7       	ldi	r20, 0x7F	; 127
    1692:	57 e4       	ldi	r21, 0x47	; 71
    1694:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    1698:	18 16       	cp	r1, r24
    169a:	4c f5       	brge	.+82     	; 0x16ee <CLCD_voidSetPosition+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    169c:	6b 85       	ldd	r22, Y+11	; 0x0b
    169e:	7c 85       	ldd	r23, Y+12	; 0x0c
    16a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    16a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    16a4:	20 e0       	ldi	r18, 0x00	; 0
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	40 e2       	ldi	r20, 0x20	; 32
    16aa:	51 e4       	ldi	r21, 0x41	; 65
    16ac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16b0:	dc 01       	movw	r26, r24
    16b2:	cb 01       	movw	r24, r22
    16b4:	bc 01       	movw	r22, r24
    16b6:	cd 01       	movw	r24, r26
    16b8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16bc:	dc 01       	movw	r26, r24
    16be:	cb 01       	movw	r24, r22
    16c0:	9e 83       	std	Y+6, r25	; 0x06
    16c2:	8d 83       	std	Y+5, r24	; 0x05
    16c4:	0f c0       	rjmp	.+30     	; 0x16e4 <CLCD_voidSetPosition+0x108>
    16c6:	88 ec       	ldi	r24, 0xC8	; 200
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	9c 83       	std	Y+4, r25	; 0x04
    16cc:	8b 83       	std	Y+3, r24	; 0x03
    16ce:	8b 81       	ldd	r24, Y+3	; 0x03
    16d0:	9c 81       	ldd	r25, Y+4	; 0x04
    16d2:	01 97       	sbiw	r24, 0x01	; 1
    16d4:	f1 f7       	brne	.-4      	; 0x16d2 <CLCD_voidSetPosition+0xf6>
    16d6:	9c 83       	std	Y+4, r25	; 0x04
    16d8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16da:	8d 81       	ldd	r24, Y+5	; 0x05
    16dc:	9e 81       	ldd	r25, Y+6	; 0x06
    16de:	01 97       	sbiw	r24, 0x01	; 1
    16e0:	9e 83       	std	Y+6, r25	; 0x06
    16e2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16e4:	8d 81       	ldd	r24, Y+5	; 0x05
    16e6:	9e 81       	ldd	r25, Y+6	; 0x06
    16e8:	00 97       	sbiw	r24, 0x00	; 0
    16ea:	69 f7       	brne	.-38     	; 0x16c6 <CLCD_voidSetPosition+0xea>
    16ec:	14 c0       	rjmp	.+40     	; 0x1716 <CLCD_voidSetPosition+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16ee:	6f 81       	ldd	r22, Y+7	; 0x07
    16f0:	78 85       	ldd	r23, Y+8	; 0x08
    16f2:	89 85       	ldd	r24, Y+9	; 0x09
    16f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    16f6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16fa:	dc 01       	movw	r26, r24
    16fc:	cb 01       	movw	r24, r22
    16fe:	9e 83       	std	Y+6, r25	; 0x06
    1700:	8d 83       	std	Y+5, r24	; 0x05
    1702:	8d 81       	ldd	r24, Y+5	; 0x05
    1704:	9e 81       	ldd	r25, Y+6	; 0x06
    1706:	9a 83       	std	Y+2, r25	; 0x02
    1708:	89 83       	std	Y+1, r24	; 0x01
    170a:	89 81       	ldd	r24, Y+1	; 0x01
    170c:	9a 81       	ldd	r25, Y+2	; 0x02
    170e:	01 97       	sbiw	r24, 0x01	; 1
    1710:	f1 f7       	brne	.-4      	; 0x170e <CLCD_voidSetPosition+0x132>
    1712:	9a 83       	std	Y+2, r25	; 0x02
    1714:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
 }	
    1716:	61 96       	adiw	r28, 0x11	; 17
    1718:	0f b6       	in	r0, 0x3f	; 63
    171a:	f8 94       	cli
    171c:	de bf       	out	0x3e, r29	; 62
    171e:	0f be       	out	0x3f, r0	; 63
    1720:	cd bf       	out	0x3d, r28	; 61
    1722:	cf 91       	pop	r28
    1724:	df 91       	pop	r29
    1726:	08 95       	ret

00001728 <CLCD_voidSendFallingEdge>:


 void CLCD_voidSendFallingEdge (void)
 {
    1728:	df 93       	push	r29
    172a:	cf 93       	push	r28
    172c:	cd b7       	in	r28, 0x3d	; 61
    172e:	de b7       	in	r29, 0x3e	; 62
    1730:	6c 97       	sbiw	r28, 0x1c	; 28
    1732:	0f b6       	in	r0, 0x3f	; 63
    1734:	f8 94       	cli
    1736:	de bf       	out	0x3e, r29	; 62
    1738:	0f be       	out	0x3f, r0	; 63
    173a:	cd bf       	out	0x3d, r28	; 61
	MDIO_voidSetPinValue(CLCD_CONTROL_PORT, CLCD_EN_PIN, DIO_PIN_HIGH);
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	62 e0       	ldi	r22, 0x02	; 2
    1740:	41 e0       	ldi	r20, 0x01	; 1
    1742:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <MDIO_voidSetPinValue>
    1746:	80 e0       	ldi	r24, 0x00	; 0
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	a0 e8       	ldi	r26, 0x80	; 128
    174c:	bf e3       	ldi	r27, 0x3F	; 63
    174e:	89 8f       	std	Y+25, r24	; 0x19
    1750:	9a 8f       	std	Y+26, r25	; 0x1a
    1752:	ab 8f       	std	Y+27, r26	; 0x1b
    1754:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1756:	69 8d       	ldd	r22, Y+25	; 0x19
    1758:	7a 8d       	ldd	r23, Y+26	; 0x1a
    175a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    175c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    175e:	20 e0       	ldi	r18, 0x00	; 0
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	4a ef       	ldi	r20, 0xFA	; 250
    1764:	54 e4       	ldi	r21, 0x44	; 68
    1766:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    176a:	dc 01       	movw	r26, r24
    176c:	cb 01       	movw	r24, r22
    176e:	8d 8b       	std	Y+21, r24	; 0x15
    1770:	9e 8b       	std	Y+22, r25	; 0x16
    1772:	af 8b       	std	Y+23, r26	; 0x17
    1774:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1776:	6d 89       	ldd	r22, Y+21	; 0x15
    1778:	7e 89       	ldd	r23, Y+22	; 0x16
    177a:	8f 89       	ldd	r24, Y+23	; 0x17
    177c:	98 8d       	ldd	r25, Y+24	; 0x18
    177e:	20 e0       	ldi	r18, 0x00	; 0
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	40 e8       	ldi	r20, 0x80	; 128
    1784:	5f e3       	ldi	r21, 0x3F	; 63
    1786:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    178a:	88 23       	and	r24, r24
    178c:	2c f4       	brge	.+10     	; 0x1798 <CLCD_voidSendFallingEdge+0x70>
		__ticks = 1;
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	9c 8b       	std	Y+20, r25	; 0x14
    1794:	8b 8b       	std	Y+19, r24	; 0x13
    1796:	3f c0       	rjmp	.+126    	; 0x1816 <CLCD_voidSendFallingEdge+0xee>
	else if (__tmp > 65535)
    1798:	6d 89       	ldd	r22, Y+21	; 0x15
    179a:	7e 89       	ldd	r23, Y+22	; 0x16
    179c:	8f 89       	ldd	r24, Y+23	; 0x17
    179e:	98 8d       	ldd	r25, Y+24	; 0x18
    17a0:	20 e0       	ldi	r18, 0x00	; 0
    17a2:	3f ef       	ldi	r19, 0xFF	; 255
    17a4:	4f e7       	ldi	r20, 0x7F	; 127
    17a6:	57 e4       	ldi	r21, 0x47	; 71
    17a8:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    17ac:	18 16       	cp	r1, r24
    17ae:	4c f5       	brge	.+82     	; 0x1802 <CLCD_voidSendFallingEdge+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17b0:	69 8d       	ldd	r22, Y+25	; 0x19
    17b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17b8:	20 e0       	ldi	r18, 0x00	; 0
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	40 e2       	ldi	r20, 0x20	; 32
    17be:	51 e4       	ldi	r21, 0x41	; 65
    17c0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17c4:	dc 01       	movw	r26, r24
    17c6:	cb 01       	movw	r24, r22
    17c8:	bc 01       	movw	r22, r24
    17ca:	cd 01       	movw	r24, r26
    17cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17d0:	dc 01       	movw	r26, r24
    17d2:	cb 01       	movw	r24, r22
    17d4:	9c 8b       	std	Y+20, r25	; 0x14
    17d6:	8b 8b       	std	Y+19, r24	; 0x13
    17d8:	0f c0       	rjmp	.+30     	; 0x17f8 <CLCD_voidSendFallingEdge+0xd0>
    17da:	88 ec       	ldi	r24, 0xC8	; 200
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	9a 8b       	std	Y+18, r25	; 0x12
    17e0:	89 8b       	std	Y+17, r24	; 0x11
    17e2:	89 89       	ldd	r24, Y+17	; 0x11
    17e4:	9a 89       	ldd	r25, Y+18	; 0x12
    17e6:	01 97       	sbiw	r24, 0x01	; 1
    17e8:	f1 f7       	brne	.-4      	; 0x17e6 <CLCD_voidSendFallingEdge+0xbe>
    17ea:	9a 8b       	std	Y+18, r25	; 0x12
    17ec:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17ee:	8b 89       	ldd	r24, Y+19	; 0x13
    17f0:	9c 89       	ldd	r25, Y+20	; 0x14
    17f2:	01 97       	sbiw	r24, 0x01	; 1
    17f4:	9c 8b       	std	Y+20, r25	; 0x14
    17f6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17f8:	8b 89       	ldd	r24, Y+19	; 0x13
    17fa:	9c 89       	ldd	r25, Y+20	; 0x14
    17fc:	00 97       	sbiw	r24, 0x00	; 0
    17fe:	69 f7       	brne	.-38     	; 0x17da <CLCD_voidSendFallingEdge+0xb2>
    1800:	14 c0       	rjmp	.+40     	; 0x182a <CLCD_voidSendFallingEdge+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1802:	6d 89       	ldd	r22, Y+21	; 0x15
    1804:	7e 89       	ldd	r23, Y+22	; 0x16
    1806:	8f 89       	ldd	r24, Y+23	; 0x17
    1808:	98 8d       	ldd	r25, Y+24	; 0x18
    180a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    180e:	dc 01       	movw	r26, r24
    1810:	cb 01       	movw	r24, r22
    1812:	9c 8b       	std	Y+20, r25	; 0x14
    1814:	8b 8b       	std	Y+19, r24	; 0x13
    1816:	8b 89       	ldd	r24, Y+19	; 0x13
    1818:	9c 89       	ldd	r25, Y+20	; 0x14
    181a:	98 8b       	std	Y+16, r25	; 0x10
    181c:	8f 87       	std	Y+15, r24	; 0x0f
    181e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1820:	98 89       	ldd	r25, Y+16	; 0x10
    1822:	01 97       	sbiw	r24, 0x01	; 1
    1824:	f1 f7       	brne	.-4      	; 0x1822 <CLCD_voidSendFallingEdge+0xfa>
    1826:	98 8b       	std	Y+16, r25	; 0x10
    1828:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	MDIO_voidSetPinValue(CLCD_CONTROL_PORT, CLCD_EN_PIN, DIO_PIN_LOW);
    182a:	81 e0       	ldi	r24, 0x01	; 1
    182c:	62 e0       	ldi	r22, 0x02	; 2
    182e:	40 e0       	ldi	r20, 0x00	; 0
    1830:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <MDIO_voidSetPinValue>
    1834:	80 e0       	ldi	r24, 0x00	; 0
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	a0 e8       	ldi	r26, 0x80	; 128
    183a:	bf e3       	ldi	r27, 0x3F	; 63
    183c:	8b 87       	std	Y+11, r24	; 0x0b
    183e:	9c 87       	std	Y+12, r25	; 0x0c
    1840:	ad 87       	std	Y+13, r26	; 0x0d
    1842:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1844:	6b 85       	ldd	r22, Y+11	; 0x0b
    1846:	7c 85       	ldd	r23, Y+12	; 0x0c
    1848:	8d 85       	ldd	r24, Y+13	; 0x0d
    184a:	9e 85       	ldd	r25, Y+14	; 0x0e
    184c:	20 e0       	ldi	r18, 0x00	; 0
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	4a ef       	ldi	r20, 0xFA	; 250
    1852:	54 e4       	ldi	r21, 0x44	; 68
    1854:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1858:	dc 01       	movw	r26, r24
    185a:	cb 01       	movw	r24, r22
    185c:	8f 83       	std	Y+7, r24	; 0x07
    185e:	98 87       	std	Y+8, r25	; 0x08
    1860:	a9 87       	std	Y+9, r26	; 0x09
    1862:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1864:	6f 81       	ldd	r22, Y+7	; 0x07
    1866:	78 85       	ldd	r23, Y+8	; 0x08
    1868:	89 85       	ldd	r24, Y+9	; 0x09
    186a:	9a 85       	ldd	r25, Y+10	; 0x0a
    186c:	20 e0       	ldi	r18, 0x00	; 0
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	40 e8       	ldi	r20, 0x80	; 128
    1872:	5f e3       	ldi	r21, 0x3F	; 63
    1874:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    1878:	88 23       	and	r24, r24
    187a:	2c f4       	brge	.+10     	; 0x1886 <CLCD_voidSendFallingEdge+0x15e>
		__ticks = 1;
    187c:	81 e0       	ldi	r24, 0x01	; 1
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	9e 83       	std	Y+6, r25	; 0x06
    1882:	8d 83       	std	Y+5, r24	; 0x05
    1884:	3f c0       	rjmp	.+126    	; 0x1904 <CLCD_voidSendFallingEdge+0x1dc>
	else if (__tmp > 65535)
    1886:	6f 81       	ldd	r22, Y+7	; 0x07
    1888:	78 85       	ldd	r23, Y+8	; 0x08
    188a:	89 85       	ldd	r24, Y+9	; 0x09
    188c:	9a 85       	ldd	r25, Y+10	; 0x0a
    188e:	20 e0       	ldi	r18, 0x00	; 0
    1890:	3f ef       	ldi	r19, 0xFF	; 255
    1892:	4f e7       	ldi	r20, 0x7F	; 127
    1894:	57 e4       	ldi	r21, 0x47	; 71
    1896:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    189a:	18 16       	cp	r1, r24
    189c:	4c f5       	brge	.+82     	; 0x18f0 <CLCD_voidSendFallingEdge+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    189e:	6b 85       	ldd	r22, Y+11	; 0x0b
    18a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    18a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    18a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    18a6:	20 e0       	ldi	r18, 0x00	; 0
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	40 e2       	ldi	r20, 0x20	; 32
    18ac:	51 e4       	ldi	r21, 0x41	; 65
    18ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18b2:	dc 01       	movw	r26, r24
    18b4:	cb 01       	movw	r24, r22
    18b6:	bc 01       	movw	r22, r24
    18b8:	cd 01       	movw	r24, r26
    18ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18be:	dc 01       	movw	r26, r24
    18c0:	cb 01       	movw	r24, r22
    18c2:	9e 83       	std	Y+6, r25	; 0x06
    18c4:	8d 83       	std	Y+5, r24	; 0x05
    18c6:	0f c0       	rjmp	.+30     	; 0x18e6 <CLCD_voidSendFallingEdge+0x1be>
    18c8:	88 ec       	ldi	r24, 0xC8	; 200
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	9c 83       	std	Y+4, r25	; 0x04
    18ce:	8b 83       	std	Y+3, r24	; 0x03
    18d0:	8b 81       	ldd	r24, Y+3	; 0x03
    18d2:	9c 81       	ldd	r25, Y+4	; 0x04
    18d4:	01 97       	sbiw	r24, 0x01	; 1
    18d6:	f1 f7       	brne	.-4      	; 0x18d4 <CLCD_voidSendFallingEdge+0x1ac>
    18d8:	9c 83       	std	Y+4, r25	; 0x04
    18da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18dc:	8d 81       	ldd	r24, Y+5	; 0x05
    18de:	9e 81       	ldd	r25, Y+6	; 0x06
    18e0:	01 97       	sbiw	r24, 0x01	; 1
    18e2:	9e 83       	std	Y+6, r25	; 0x06
    18e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18e6:	8d 81       	ldd	r24, Y+5	; 0x05
    18e8:	9e 81       	ldd	r25, Y+6	; 0x06
    18ea:	00 97       	sbiw	r24, 0x00	; 0
    18ec:	69 f7       	brne	.-38     	; 0x18c8 <CLCD_voidSendFallingEdge+0x1a0>
    18ee:	14 c0       	rjmp	.+40     	; 0x1918 <CLCD_voidSendFallingEdge+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18f0:	6f 81       	ldd	r22, Y+7	; 0x07
    18f2:	78 85       	ldd	r23, Y+8	; 0x08
    18f4:	89 85       	ldd	r24, Y+9	; 0x09
    18f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    18f8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18fc:	dc 01       	movw	r26, r24
    18fe:	cb 01       	movw	r24, r22
    1900:	9e 83       	std	Y+6, r25	; 0x06
    1902:	8d 83       	std	Y+5, r24	; 0x05
    1904:	8d 81       	ldd	r24, Y+5	; 0x05
    1906:	9e 81       	ldd	r25, Y+6	; 0x06
    1908:	9a 83       	std	Y+2, r25	; 0x02
    190a:	89 83       	std	Y+1, r24	; 0x01
    190c:	89 81       	ldd	r24, Y+1	; 0x01
    190e:	9a 81       	ldd	r25, Y+2	; 0x02
    1910:	01 97       	sbiw	r24, 0x01	; 1
    1912:	f1 f7       	brne	.-4      	; 0x1910 <CLCD_voidSendFallingEdge+0x1e8>
    1914:	9a 83       	std	Y+2, r25	; 0x02
    1916:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1);
 }
    1918:	6c 96       	adiw	r28, 0x1c	; 28
    191a:	0f b6       	in	r0, 0x3f	; 63
    191c:	f8 94       	cli
    191e:	de bf       	out	0x3e, r29	; 62
    1920:	0f be       	out	0x3f, r0	; 63
    1922:	cd bf       	out	0x3d, r28	; 61
    1924:	cf 91       	pop	r28
    1926:	df 91       	pop	r29
    1928:	08 95       	ret

0000192a <CLCD_voidSendNumber>:



void CLCD_voidSendNumber(s32 cpy_u32Number) //123
{      u32 cpy_u32power=1;
    192a:	df 93       	push	r29
    192c:	cf 93       	push	r28
    192e:	cd b7       	in	r28, 0x3d	; 61
    1930:	de b7       	in	r29, 0x3e	; 62
    1932:	2c 97       	sbiw	r28, 0x0c	; 12
    1934:	0f b6       	in	r0, 0x3f	; 63
    1936:	f8 94       	cli
    1938:	de bf       	out	0x3e, r29	; 62
    193a:	0f be       	out	0x3f, r0	; 63
    193c:	cd bf       	out	0x3d, r28	; 61
    193e:	69 87       	std	Y+9, r22	; 0x09
    1940:	7a 87       	std	Y+10, r23	; 0x0a
    1942:	8b 87       	std	Y+11, r24	; 0x0b
    1944:	9c 87       	std	Y+12, r25	; 0x0c
    1946:	81 e0       	ldi	r24, 0x01	; 1
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	a0 e0       	ldi	r26, 0x00	; 0
    194c:	b0 e0       	ldi	r27, 0x00	; 0
    194e:	8d 83       	std	Y+5, r24	; 0x05
    1950:	9e 83       	std	Y+6, r25	; 0x06
    1952:	af 83       	std	Y+7, r26	; 0x07
    1954:	b8 87       	std	Y+8, r27	; 0x08
       s32 cpy_u32num=cpy_u32Number;
    1956:	89 85       	ldd	r24, Y+9	; 0x09
    1958:	9a 85       	ldd	r25, Y+10	; 0x0a
    195a:	ab 85       	ldd	r26, Y+11	; 0x0b
    195c:	bc 85       	ldd	r27, Y+12	; 0x0c
    195e:	89 83       	std	Y+1, r24	; 0x01
    1960:	9a 83       	std	Y+2, r25	; 0x02
    1962:	ab 83       	std	Y+3, r26	; 0x03
    1964:	bc 83       	std	Y+4, r27	; 0x04
      if(cpy_u32Number==0)
    1966:	89 85       	ldd	r24, Y+9	; 0x09
    1968:	9a 85       	ldd	r25, Y+10	; 0x0a
    196a:	ab 85       	ldd	r26, Y+11	; 0x0b
    196c:	bc 85       	ldd	r27, Y+12	; 0x0c
    196e:	00 97       	sbiw	r24, 0x00	; 0
    1970:	a1 05       	cpc	r26, r1
    1972:	b1 05       	cpc	r27, r1
    1974:	21 f4       	brne	.+8      	; 0x197e <CLCD_voidSendNumber+0x54>
      {
    	  CLCD_voidSendData('0');
    1976:	80 e3       	ldi	r24, 0x30	; 48
    1978:	0e 94 22 09 	call	0x1244	; 0x1244 <CLCD_voidSendData>
    197c:	9b c0       	rjmp	.+310    	; 0x1ab4 <CLCD_voidSendNumber+0x18a>
    	  return;
      }
      if(cpy_u32Number<0)
    197e:	89 85       	ldd	r24, Y+9	; 0x09
    1980:	9a 85       	ldd	r25, Y+10	; 0x0a
    1982:	ab 85       	ldd	r26, Y+11	; 0x0b
    1984:	bc 85       	ldd	r27, Y+12	; 0x0c
    1986:	bb 23       	and	r27, r27
    1988:	bc f5       	brge	.+110    	; 0x19f8 <CLCD_voidSendNumber+0xce>
      {

    	  cpy_u32Number=cpy_u32Number*(-1);
    198a:	89 85       	ldd	r24, Y+9	; 0x09
    198c:	9a 85       	ldd	r25, Y+10	; 0x0a
    198e:	ab 85       	ldd	r26, Y+11	; 0x0b
    1990:	bc 85       	ldd	r27, Y+12	; 0x0c
    1992:	b0 95       	com	r27
    1994:	a0 95       	com	r26
    1996:	90 95       	com	r25
    1998:	81 95       	neg	r24
    199a:	9f 4f       	sbci	r25, 0xFF	; 255
    199c:	af 4f       	sbci	r26, 0xFF	; 255
    199e:	bf 4f       	sbci	r27, 0xFF	; 255
    19a0:	89 87       	std	Y+9, r24	; 0x09
    19a2:	9a 87       	std	Y+10, r25	; 0x0a
    19a4:	ab 87       	std	Y+11, r26	; 0x0b
    19a6:	bc 87       	std	Y+12, r27	; 0x0c
    	  CLCD_voidSendData('-');
    19a8:	8d e2       	ldi	r24, 0x2D	; 45
    19aa:	0e 94 22 09 	call	0x1244	; 0x1244 <CLCD_voidSendData>
    19ae:	24 c0       	rjmp	.+72     	; 0x19f8 <CLCD_voidSendNumber+0xce>
      }
      while(cpy_u32num)
      {//01234

    	  cpy_u32num=cpy_u32num/10;          //01234  0123  012   01   0 0
    19b0:	89 81       	ldd	r24, Y+1	; 0x01
    19b2:	9a 81       	ldd	r25, Y+2	; 0x02
    19b4:	ab 81       	ldd	r26, Y+3	; 0x03
    19b6:	bc 81       	ldd	r27, Y+4	; 0x04
    19b8:	2a e0       	ldi	r18, 0x0A	; 10
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	40 e0       	ldi	r20, 0x00	; 0
    19be:	50 e0       	ldi	r21, 0x00	; 0
    19c0:	bc 01       	movw	r22, r24
    19c2:	cd 01       	movw	r24, r26
    19c4:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <__divmodsi4>
    19c8:	da 01       	movw	r26, r20
    19ca:	c9 01       	movw	r24, r18
    19cc:	89 83       	std	Y+1, r24	; 0x01
    19ce:	9a 83       	std	Y+2, r25	; 0x02
    19d0:	ab 83       	std	Y+3, r26	; 0x03
    19d2:	bc 83       	std	Y+4, r27	; 0x04
    	  cpy_u32power=cpy_u32power*10;      //10000
    19d4:	8d 81       	ldd	r24, Y+5	; 0x05
    19d6:	9e 81       	ldd	r25, Y+6	; 0x06
    19d8:	af 81       	ldd	r26, Y+7	; 0x07
    19da:	b8 85       	ldd	r27, Y+8	; 0x08
    19dc:	2a e0       	ldi	r18, 0x0A	; 10
    19de:	30 e0       	ldi	r19, 0x00	; 0
    19e0:	40 e0       	ldi	r20, 0x00	; 0
    19e2:	50 e0       	ldi	r21, 0x00	; 0
    19e4:	bc 01       	movw	r22, r24
    19e6:	cd 01       	movw	r24, r26
    19e8:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <__mulsi3>
    19ec:	dc 01       	movw	r26, r24
    19ee:	cb 01       	movw	r24, r22
    19f0:	8d 83       	std	Y+5, r24	; 0x05
    19f2:	9e 83       	std	Y+6, r25	; 0x06
    19f4:	af 83       	std	Y+7, r26	; 0x07
    19f6:	b8 87       	std	Y+8, r27	; 0x08
      {

    	  cpy_u32Number=cpy_u32Number*(-1);
    	  CLCD_voidSendData('-');
      }
      while(cpy_u32num)
    19f8:	89 81       	ldd	r24, Y+1	; 0x01
    19fa:	9a 81       	ldd	r25, Y+2	; 0x02
    19fc:	ab 81       	ldd	r26, Y+3	; 0x03
    19fe:	bc 81       	ldd	r27, Y+4	; 0x04
    1a00:	00 97       	sbiw	r24, 0x00	; 0
    1a02:	a1 05       	cpc	r26, r1
    1a04:	b1 05       	cpc	r27, r1
    1a06:	a1 f6       	brne	.-88     	; 0x19b0 <CLCD_voidSendNumber+0x86>
      {//01234

    	  cpy_u32num=cpy_u32num/10;          //01234  0123  012   01   0 0
    	  cpy_u32power=cpy_u32power*10;      //10000
      }
      cpy_u32power=cpy_u32power/10;
    1a08:	8d 81       	ldd	r24, Y+5	; 0x05
    1a0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a0c:	af 81       	ldd	r26, Y+7	; 0x07
    1a0e:	b8 85       	ldd	r27, Y+8	; 0x08
    1a10:	2a e0       	ldi	r18, 0x0A	; 10
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	40 e0       	ldi	r20, 0x00	; 0
    1a16:	50 e0       	ldi	r21, 0x00	; 0
    1a18:	bc 01       	movw	r22, r24
    1a1a:	cd 01       	movw	r24, r26
    1a1c:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <__udivmodsi4>
    1a20:	da 01       	movw	r26, r20
    1a22:	c9 01       	movw	r24, r18
    1a24:	8d 83       	std	Y+5, r24	; 0x05
    1a26:	9e 83       	std	Y+6, r25	; 0x06
    1a28:	af 83       	std	Y+7, r26	; 0x07
    1a2a:	b8 87       	std	Y+8, r27	; 0x08
    1a2c:	3a c0       	rjmp	.+116    	; 0x1aa2 <CLCD_voidSendNumber+0x178>
      while(cpy_u32power>0)
      {
    	  cpy_u32num=cpy_u32Number/cpy_u32power;  //01234/1000=0
    1a2e:	89 85       	ldd	r24, Y+9	; 0x09
    1a30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a32:	ab 85       	ldd	r26, Y+11	; 0x0b
    1a34:	bc 85       	ldd	r27, Y+12	; 0x0c
    1a36:	2d 81       	ldd	r18, Y+5	; 0x05
    1a38:	3e 81       	ldd	r19, Y+6	; 0x06
    1a3a:	4f 81       	ldd	r20, Y+7	; 0x07
    1a3c:	58 85       	ldd	r21, Y+8	; 0x08
    1a3e:	bc 01       	movw	r22, r24
    1a40:	cd 01       	movw	r24, r26
    1a42:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <__udivmodsi4>
    1a46:	da 01       	movw	r26, r20
    1a48:	c9 01       	movw	r24, r18
    1a4a:	89 83       	std	Y+1, r24	; 0x01
    1a4c:	9a 83       	std	Y+2, r25	; 0x02
    1a4e:	ab 83       	std	Y+3, r26	; 0x03
    1a50:	bc 83       	std	Y+4, r27	; 0x04
    	  cpy_u32Number%=cpy_u32power;
    1a52:	89 85       	ldd	r24, Y+9	; 0x09
    1a54:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a56:	ab 85       	ldd	r26, Y+11	; 0x0b
    1a58:	bc 85       	ldd	r27, Y+12	; 0x0c
    1a5a:	2d 81       	ldd	r18, Y+5	; 0x05
    1a5c:	3e 81       	ldd	r19, Y+6	; 0x06
    1a5e:	4f 81       	ldd	r20, Y+7	; 0x07
    1a60:	58 85       	ldd	r21, Y+8	; 0x08
    1a62:	bc 01       	movw	r22, r24
    1a64:	cd 01       	movw	r24, r26
    1a66:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <__udivmodsi4>
    1a6a:	dc 01       	movw	r26, r24
    1a6c:	cb 01       	movw	r24, r22
    1a6e:	89 87       	std	Y+9, r24	; 0x09
    1a70:	9a 87       	std	Y+10, r25	; 0x0a
    1a72:	ab 87       	std	Y+11, r26	; 0x0b
    1a74:	bc 87       	std	Y+12, r27	; 0x0c
    	  cpy_u32power/=10;
    1a76:	8d 81       	ldd	r24, Y+5	; 0x05
    1a78:	9e 81       	ldd	r25, Y+6	; 0x06
    1a7a:	af 81       	ldd	r26, Y+7	; 0x07
    1a7c:	b8 85       	ldd	r27, Y+8	; 0x08
    1a7e:	2a e0       	ldi	r18, 0x0A	; 10
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	40 e0       	ldi	r20, 0x00	; 0
    1a84:	50 e0       	ldi	r21, 0x00	; 0
    1a86:	bc 01       	movw	r22, r24
    1a88:	cd 01       	movw	r24, r26
    1a8a:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <__udivmodsi4>
    1a8e:	da 01       	movw	r26, r20
    1a90:	c9 01       	movw	r24, r18
    1a92:	8d 83       	std	Y+5, r24	; 0x05
    1a94:	9e 83       	std	Y+6, r25	; 0x06
    1a96:	af 83       	std	Y+7, r26	; 0x07
    1a98:	b8 87       	std	Y+8, r27	; 0x08

    	  CLCD_voidSendData(cpy_u32num+'0');
    1a9a:	89 81       	ldd	r24, Y+1	; 0x01
    1a9c:	80 5d       	subi	r24, 0xD0	; 208
    1a9e:	0e 94 22 09 	call	0x1244	; 0x1244 <CLCD_voidSendData>

    	  cpy_u32num=cpy_u32num/10;          //01234  0123  012   01   0 0
    	  cpy_u32power=cpy_u32power*10;      //10000
      }
      cpy_u32power=cpy_u32power/10;
      while(cpy_u32power>0)
    1aa2:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa4:	9e 81       	ldd	r25, Y+6	; 0x06
    1aa6:	af 81       	ldd	r26, Y+7	; 0x07
    1aa8:	b8 85       	ldd	r27, Y+8	; 0x08
    1aaa:	00 97       	sbiw	r24, 0x00	; 0
    1aac:	a1 05       	cpc	r26, r1
    1aae:	b1 05       	cpc	r27, r1
    1ab0:	09 f0       	breq	.+2      	; 0x1ab4 <CLCD_voidSendNumber+0x18a>
    1ab2:	bd cf       	rjmp	.-134    	; 0x1a2e <CLCD_voidSendNumber+0x104>
      }




}
    1ab4:	2c 96       	adiw	r28, 0x0c	; 12
    1ab6:	0f b6       	in	r0, 0x3f	; 63
    1ab8:	f8 94       	cli
    1aba:	de bf       	out	0x3e, r29	; 62
    1abc:	0f be       	out	0x3f, r0	; 63
    1abe:	cd bf       	out	0x3d, r28	; 61
    1ac0:	cf 91       	pop	r28
    1ac2:	df 91       	pop	r29
    1ac4:	08 95       	ret

00001ac6 <CLCD_voidSendFloat>:

void CLCD_voidSendFloat(f64 cpy_f64Float) 
{
    1ac6:	df 93       	push	r29
    1ac8:	cf 93       	push	r28
    1aca:	cd b7       	in	r28, 0x3d	; 61
    1acc:	de b7       	in	r29, 0x3e	; 62
    1ace:	64 97       	sbiw	r28, 0x14	; 20
    1ad0:	0f b6       	in	r0, 0x3f	; 63
    1ad2:	f8 94       	cli
    1ad4:	de bf       	out	0x3e, r29	; 62
    1ad6:	0f be       	out	0x3f, r0	; 63
    1ad8:	cd bf       	out	0x3d, r28	; 61
    1ada:	69 8b       	std	Y+17, r22	; 0x11
    1adc:	7a 8b       	std	Y+18, r23	; 0x12
    1ade:	8b 8b       	std	Y+19, r24	; 0x13
    1ae0:	9c 8b       	std	Y+20, r25	; 0x14
	  u32 cpy_u32power=1;
    1ae2:	81 e0       	ldi	r24, 0x01	; 1
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	a0 e0       	ldi	r26, 0x00	; 0
    1ae8:	b0 e0       	ldi	r27, 0x00	; 0
    1aea:	8d 87       	std	Y+13, r24	; 0x0d
    1aec:	9e 87       	std	Y+14, r25	; 0x0e
    1aee:	af 87       	std	Y+15, r26	; 0x0f
    1af0:	b8 8b       	std	Y+16, r27	; 0x10
	       s32 cpy_u32num=cpy_f64Float;
    1af2:	69 89       	ldd	r22, Y+17	; 0x11
    1af4:	7a 89       	ldd	r23, Y+18	; 0x12
    1af6:	8b 89       	ldd	r24, Y+19	; 0x13
    1af8:	9c 89       	ldd	r25, Y+20	; 0x14
    1afa:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__fixsfsi>
    1afe:	dc 01       	movw	r26, r24
    1b00:	cb 01       	movw	r24, r22
    1b02:	89 87       	std	Y+9, r24	; 0x09
    1b04:	9a 87       	std	Y+10, r25	; 0x0a
    1b06:	ab 87       	std	Y+11, r26	; 0x0b
    1b08:	bc 87       	std	Y+12, r27	; 0x0c
	       s32 i=0;
    1b0a:	1d 82       	std	Y+5, r1	; 0x05
    1b0c:	1e 82       	std	Y+6, r1	; 0x06
    1b0e:	1f 82       	std	Y+7, r1	; 0x07
    1b10:	18 86       	std	Y+8, r1	; 0x08

	      if(cpy_f64Float==0)
    1b12:	69 89       	ldd	r22, Y+17	; 0x11
    1b14:	7a 89       	ldd	r23, Y+18	; 0x12
    1b16:	8b 89       	ldd	r24, Y+19	; 0x13
    1b18:	9c 89       	ldd	r25, Y+20	; 0x14
    1b1a:	20 e0       	ldi	r18, 0x00	; 0
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	40 e0       	ldi	r20, 0x00	; 0
    1b20:	50 e0       	ldi	r21, 0x00	; 0
    1b22:	0e 94 bd 03 	call	0x77a	; 0x77a <__eqsf2>
    1b26:	88 23       	and	r24, r24
    1b28:	21 f4       	brne	.+8      	; 0x1b32 <CLCD_voidSendFloat+0x6c>
	      {
	    	  CLCD_voidSendData('0');
    1b2a:	80 e3       	ldi	r24, 0x30	; 48
    1b2c:	0e 94 22 09 	call	0x1244	; 0x1244 <CLCD_voidSendData>
    1b30:	d2 c0       	rjmp	.+420    	; 0x1cd6 <CLCD_voidSendFloat+0x210>
	    	  return;
	      }
	      if(cpy_f64Float<0)
    1b32:	69 89       	ldd	r22, Y+17	; 0x11
    1b34:	7a 89       	ldd	r23, Y+18	; 0x12
    1b36:	8b 89       	ldd	r24, Y+19	; 0x13
    1b38:	9c 89       	ldd	r25, Y+20	; 0x14
    1b3a:	20 e0       	ldi	r18, 0x00	; 0
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	40 e0       	ldi	r20, 0x00	; 0
    1b40:	50 e0       	ldi	r21, 0x00	; 0
    1b42:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    1b46:	88 23       	and	r24, r24
    1b48:	e4 f5       	brge	.+120    	; 0x1bc2 <CLCD_voidSendFloat+0xfc>
	      {

	    	  cpy_f64Float=cpy_f64Float*(-1);
    1b4a:	89 89       	ldd	r24, Y+17	; 0x11
    1b4c:	9a 89       	ldd	r25, Y+18	; 0x12
    1b4e:	ab 89       	ldd	r26, Y+19	; 0x13
    1b50:	bc 89       	ldd	r27, Y+20	; 0x14
    1b52:	b0 58       	subi	r27, 0x80	; 128
    1b54:	89 8b       	std	Y+17, r24	; 0x11
    1b56:	9a 8b       	std	Y+18, r25	; 0x12
    1b58:	ab 8b       	std	Y+19, r26	; 0x13
    1b5a:	bc 8b       	std	Y+20, r27	; 0x14
	    	  CLCD_voidSendData('-');
    1b5c:	8d e2       	ldi	r24, 0x2D	; 45
    1b5e:	0e 94 22 09 	call	0x1244	; 0x1244 <CLCD_voidSendData>
    1b62:	2f c0       	rjmp	.+94     	; 0x1bc2 <CLCD_voidSendFloat+0xfc>
	      }
	      while(cpy_u32num)//1234
	      {

	    	  cpy_u32num=cpy_u32num/10;
    1b64:	89 85       	ldd	r24, Y+9	; 0x09
    1b66:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b68:	ab 85       	ldd	r26, Y+11	; 0x0b
    1b6a:	bc 85       	ldd	r27, Y+12	; 0x0c
    1b6c:	2a e0       	ldi	r18, 0x0A	; 10
    1b6e:	30 e0       	ldi	r19, 0x00	; 0
    1b70:	40 e0       	ldi	r20, 0x00	; 0
    1b72:	50 e0       	ldi	r21, 0x00	; 0
    1b74:	bc 01       	movw	r22, r24
    1b76:	cd 01       	movw	r24, r26
    1b78:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <__divmodsi4>
    1b7c:	da 01       	movw	r26, r20
    1b7e:	c9 01       	movw	r24, r18
    1b80:	89 87       	std	Y+9, r24	; 0x09
    1b82:	9a 87       	std	Y+10, r25	; 0x0a
    1b84:	ab 87       	std	Y+11, r26	; 0x0b
    1b86:	bc 87       	std	Y+12, r27	; 0x0c
	    	   i++;//4
    1b88:	8d 81       	ldd	r24, Y+5	; 0x05
    1b8a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b8c:	af 81       	ldd	r26, Y+7	; 0x07
    1b8e:	b8 85       	ldd	r27, Y+8	; 0x08
    1b90:	01 96       	adiw	r24, 0x01	; 1
    1b92:	a1 1d       	adc	r26, r1
    1b94:	b1 1d       	adc	r27, r1
    1b96:	8d 83       	std	Y+5, r24	; 0x05
    1b98:	9e 83       	std	Y+6, r25	; 0x06
    1b9a:	af 83       	std	Y+7, r26	; 0x07
    1b9c:	b8 87       	std	Y+8, r27	; 0x08
	    	  cpy_u32power=cpy_u32power*10;      //10000
    1b9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ba0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ba2:	af 85       	ldd	r26, Y+15	; 0x0f
    1ba4:	b8 89       	ldd	r27, Y+16	; 0x10
    1ba6:	2a e0       	ldi	r18, 0x0A	; 10
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	40 e0       	ldi	r20, 0x00	; 0
    1bac:	50 e0       	ldi	r21, 0x00	; 0
    1bae:	bc 01       	movw	r22, r24
    1bb0:	cd 01       	movw	r24, r26
    1bb2:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <__mulsi3>
    1bb6:	dc 01       	movw	r26, r24
    1bb8:	cb 01       	movw	r24, r22
    1bba:	8d 87       	std	Y+13, r24	; 0x0d
    1bbc:	9e 87       	std	Y+14, r25	; 0x0e
    1bbe:	af 87       	std	Y+15, r26	; 0x0f
    1bc0:	b8 8b       	std	Y+16, r27	; 0x10
	      {

	    	  cpy_f64Float=cpy_f64Float*(-1);
	    	  CLCD_voidSendData('-');
	      }
	      while(cpy_u32num)//1234
    1bc2:	89 85       	ldd	r24, Y+9	; 0x09
    1bc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bc6:	ab 85       	ldd	r26, Y+11	; 0x0b
    1bc8:	bc 85       	ldd	r27, Y+12	; 0x0c
    1bca:	00 97       	sbiw	r24, 0x00	; 0
    1bcc:	a1 05       	cpc	r26, r1
    1bce:	b1 05       	cpc	r27, r1
    1bd0:	49 f6       	brne	.-110    	; 0x1b64 <CLCD_voidSendFloat+0x9e>

	    	  cpy_u32num=cpy_u32num/10;
	    	   i++;//4
	    	  cpy_u32power=cpy_u32power*10;      //10000
	      }
	      s32 int_num=cpy_f64Float*10000;  //1234.1234-->12341234
    1bd2:	69 89       	ldd	r22, Y+17	; 0x11
    1bd4:	7a 89       	ldd	r23, Y+18	; 0x12
    1bd6:	8b 89       	ldd	r24, Y+19	; 0x13
    1bd8:	9c 89       	ldd	r25, Y+20	; 0x14
    1bda:	20 e0       	ldi	r18, 0x00	; 0
    1bdc:	30 e4       	ldi	r19, 0x40	; 64
    1bde:	4c e1       	ldi	r20, 0x1C	; 28
    1be0:	56 e4       	ldi	r21, 0x46	; 70
    1be2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1be6:	dc 01       	movw	r26, r24
    1be8:	cb 01       	movw	r24, r22
    1bea:	bc 01       	movw	r22, r24
    1bec:	cd 01       	movw	r24, r26
    1bee:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__fixsfsi>
    1bf2:	dc 01       	movw	r26, r24
    1bf4:	cb 01       	movw	r24, r22
    1bf6:	89 83       	std	Y+1, r24	; 0x01
    1bf8:	9a 83       	std	Y+2, r25	; 0x02
    1bfa:	ab 83       	std	Y+3, r26	; 0x03
    1bfc:	bc 83       	std	Y+4, r27	; 0x04
	      cpy_u32power=cpy_u32power*1000;
    1bfe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c00:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c02:	af 85       	ldd	r26, Y+15	; 0x0f
    1c04:	b8 89       	ldd	r27, Y+16	; 0x10
    1c06:	28 ee       	ldi	r18, 0xE8	; 232
    1c08:	33 e0       	ldi	r19, 0x03	; 3
    1c0a:	40 e0       	ldi	r20, 0x00	; 0
    1c0c:	50 e0       	ldi	r21, 0x00	; 0
    1c0e:	bc 01       	movw	r22, r24
    1c10:	cd 01       	movw	r24, r26
    1c12:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <__mulsi3>
    1c16:	dc 01       	movw	r26, r24
    1c18:	cb 01       	movw	r24, r22
    1c1a:	8d 87       	std	Y+13, r24	; 0x0d
    1c1c:	9e 87       	std	Y+14, r25	; 0x0e
    1c1e:	af 87       	std	Y+15, r26	; 0x0f
    1c20:	b8 8b       	std	Y+16, r27	; 0x10
    1c22:	50 c0       	rjmp	.+160    	; 0x1cc4 <CLCD_voidSendFloat+0x1fe>
	      while(cpy_u32power>0)
	      {
	    	  cpy_u32num=int_num/cpy_u32power;  //01234/1000=0
    1c24:	89 81       	ldd	r24, Y+1	; 0x01
    1c26:	9a 81       	ldd	r25, Y+2	; 0x02
    1c28:	ab 81       	ldd	r26, Y+3	; 0x03
    1c2a:	bc 81       	ldd	r27, Y+4	; 0x04
    1c2c:	2d 85       	ldd	r18, Y+13	; 0x0d
    1c2e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1c30:	4f 85       	ldd	r20, Y+15	; 0x0f
    1c32:	58 89       	ldd	r21, Y+16	; 0x10
    1c34:	bc 01       	movw	r22, r24
    1c36:	cd 01       	movw	r24, r26
    1c38:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <__udivmodsi4>
    1c3c:	da 01       	movw	r26, r20
    1c3e:	c9 01       	movw	r24, r18
    1c40:	89 87       	std	Y+9, r24	; 0x09
    1c42:	9a 87       	std	Y+10, r25	; 0x0a
    1c44:	ab 87       	std	Y+11, r26	; 0x0b
    1c46:	bc 87       	std	Y+12, r27	; 0x0c
	    	  int_num%=cpy_u32power;
    1c48:	89 81       	ldd	r24, Y+1	; 0x01
    1c4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c4c:	ab 81       	ldd	r26, Y+3	; 0x03
    1c4e:	bc 81       	ldd	r27, Y+4	; 0x04
    1c50:	2d 85       	ldd	r18, Y+13	; 0x0d
    1c52:	3e 85       	ldd	r19, Y+14	; 0x0e
    1c54:	4f 85       	ldd	r20, Y+15	; 0x0f
    1c56:	58 89       	ldd	r21, Y+16	; 0x10
    1c58:	bc 01       	movw	r22, r24
    1c5a:	cd 01       	movw	r24, r26
    1c5c:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <__udivmodsi4>
    1c60:	dc 01       	movw	r26, r24
    1c62:	cb 01       	movw	r24, r22
    1c64:	89 83       	std	Y+1, r24	; 0x01
    1c66:	9a 83       	std	Y+2, r25	; 0x02
    1c68:	ab 83       	std	Y+3, r26	; 0x03
    1c6a:	bc 83       	std	Y+4, r27	; 0x04
	    	  cpy_u32power/=10;
    1c6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c70:	af 85       	ldd	r26, Y+15	; 0x0f
    1c72:	b8 89       	ldd	r27, Y+16	; 0x10
    1c74:	2a e0       	ldi	r18, 0x0A	; 10
    1c76:	30 e0       	ldi	r19, 0x00	; 0
    1c78:	40 e0       	ldi	r20, 0x00	; 0
    1c7a:	50 e0       	ldi	r21, 0x00	; 0
    1c7c:	bc 01       	movw	r22, r24
    1c7e:	cd 01       	movw	r24, r26
    1c80:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <__udivmodsi4>
    1c84:	da 01       	movw	r26, r20
    1c86:	c9 01       	movw	r24, r18
    1c88:	8d 87       	std	Y+13, r24	; 0x0d
    1c8a:	9e 87       	std	Y+14, r25	; 0x0e
    1c8c:	af 87       	std	Y+15, r26	; 0x0f
    1c8e:	b8 8b       	std	Y+16, r27	; 0x10
               if(i==0)
    1c90:	8d 81       	ldd	r24, Y+5	; 0x05
    1c92:	9e 81       	ldd	r25, Y+6	; 0x06
    1c94:	af 81       	ldd	r26, Y+7	; 0x07
    1c96:	b8 85       	ldd	r27, Y+8	; 0x08
    1c98:	00 97       	sbiw	r24, 0x00	; 0
    1c9a:	a1 05       	cpc	r26, r1
    1c9c:	b1 05       	cpc	r27, r1
    1c9e:	19 f4       	brne	.+6      	; 0x1ca6 <CLCD_voidSendFloat+0x1e0>
               {
            	   CLCD_voidSendData('.');
    1ca0:	8e e2       	ldi	r24, 0x2E	; 46
    1ca2:	0e 94 22 09 	call	0x1244	; 0x1244 <CLCD_voidSendData>

               }
               i--;
    1ca6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca8:	9e 81       	ldd	r25, Y+6	; 0x06
    1caa:	af 81       	ldd	r26, Y+7	; 0x07
    1cac:	b8 85       	ldd	r27, Y+8	; 0x08
    1cae:	01 97       	sbiw	r24, 0x01	; 1
    1cb0:	a1 09       	sbc	r26, r1
    1cb2:	b1 09       	sbc	r27, r1
    1cb4:	8d 83       	std	Y+5, r24	; 0x05
    1cb6:	9e 83       	std	Y+6, r25	; 0x06
    1cb8:	af 83       	std	Y+7, r26	; 0x07
    1cba:	b8 87       	std	Y+8, r27	; 0x08
	    	  CLCD_voidSendData(cpy_u32num+'0');
    1cbc:	89 85       	ldd	r24, Y+9	; 0x09
    1cbe:	80 5d       	subi	r24, 0xD0	; 208
    1cc0:	0e 94 22 09 	call	0x1244	; 0x1244 <CLCD_voidSendData>
	    	   i++;//4
	    	  cpy_u32power=cpy_u32power*10;      //10000
	      }
	      s32 int_num=cpy_f64Float*10000;  //1234.1234-->12341234
	      cpy_u32power=cpy_u32power*1000;
	      while(cpy_u32power>0)
    1cc4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cc6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cc8:	af 85       	ldd	r26, Y+15	; 0x0f
    1cca:	b8 89       	ldd	r27, Y+16	; 0x10
    1ccc:	00 97       	sbiw	r24, 0x00	; 0
    1cce:	a1 05       	cpc	r26, r1
    1cd0:	b1 05       	cpc	r27, r1
    1cd2:	09 f0       	breq	.+2      	; 0x1cd6 <CLCD_voidSendFloat+0x210>
    1cd4:	a7 cf       	rjmp	.-178    	; 0x1c24 <CLCD_voidSendFloat+0x15e>
		cpy_f64Float-=(s32)cpy_f64Float;//0.4    0

	}
*/

}
    1cd6:	64 96       	adiw	r28, 0x14	; 20
    1cd8:	0f b6       	in	r0, 0x3f	; 63
    1cda:	f8 94       	cli
    1cdc:	de bf       	out	0x3e, r29	; 62
    1cde:	0f be       	out	0x3f, r0	; 63
    1ce0:	cd bf       	out	0x3d, r28	; 61
    1ce2:	cf 91       	pop	r28
    1ce4:	df 91       	pop	r29
    1ce6:	08 95       	ret

00001ce8 <MDIO_voidSetPinDirection>:

#include "DIO_interface.h"
#include "DIO_private.h"

void MDIO_voidSetPinDirection (u8 A_u8PortNo , u8 A_u8PinNo , u8 A_u8PinDirection)
{
    1ce8:	df 93       	push	r29
    1cea:	cf 93       	push	r28
    1cec:	cd b7       	in	r28, 0x3d	; 61
    1cee:	de b7       	in	r29, 0x3e	; 62
    1cf0:	27 97       	sbiw	r28, 0x07	; 7
    1cf2:	0f b6       	in	r0, 0x3f	; 63
    1cf4:	f8 94       	cli
    1cf6:	de bf       	out	0x3e, r29	; 62
    1cf8:	0f be       	out	0x3f, r0	; 63
    1cfa:	cd bf       	out	0x3d, r28	; 61
    1cfc:	89 83       	std	Y+1, r24	; 0x01
    1cfe:	6a 83       	std	Y+2, r22	; 0x02
    1d00:	4b 83       	std	Y+3, r20	; 0x03

	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((A_u8PortNo <= DIO_PORTD) && (A_u8PinNo <= DIO_PIN7))
    1d02:	89 81       	ldd	r24, Y+1	; 0x01
    1d04:	84 30       	cpi	r24, 0x04	; 4
    1d06:	08 f0       	brcs	.+2      	; 0x1d0a <MDIO_voidSetPinDirection+0x22>
    1d08:	ee c0       	rjmp	.+476    	; 0x1ee6 <MDIO_voidSetPinDirection+0x1fe>
    1d0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0c:	88 30       	cpi	r24, 0x08	; 8
    1d0e:	08 f0       	brcs	.+2      	; 0x1d12 <MDIO_voidSetPinDirection+0x2a>
    1d10:	ea c0       	rjmp	.+468    	; 0x1ee6 <MDIO_voidSetPinDirection+0x1fe>
	{
		if ( A_u8PinDirection == DIO_PIN_OUTPUT )
    1d12:	8b 81       	ldd	r24, Y+3	; 0x03
    1d14:	81 30       	cpi	r24, 0x01	; 1
    1d16:	09 f0       	breq	.+2      	; 0x1d1a <MDIO_voidSetPinDirection+0x32>
    1d18:	6f c0       	rjmp	.+222    	; 0x1df8 <MDIO_voidSetPinDirection+0x110>
		{
			/* Check on the Required PORT Number */
			switch (A_u8PortNo)
    1d1a:	89 81       	ldd	r24, Y+1	; 0x01
    1d1c:	28 2f       	mov	r18, r24
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	3f 83       	std	Y+7, r19	; 0x07
    1d22:	2e 83       	std	Y+6, r18	; 0x06
    1d24:	8e 81       	ldd	r24, Y+6	; 0x06
    1d26:	9f 81       	ldd	r25, Y+7	; 0x07
    1d28:	81 30       	cpi	r24, 0x01	; 1
    1d2a:	91 05       	cpc	r25, r1
    1d2c:	49 f1       	breq	.+82     	; 0x1d80 <MDIO_voidSetPinDirection+0x98>
    1d2e:	2e 81       	ldd	r18, Y+6	; 0x06
    1d30:	3f 81       	ldd	r19, Y+7	; 0x07
    1d32:	22 30       	cpi	r18, 0x02	; 2
    1d34:	31 05       	cpc	r19, r1
    1d36:	2c f4       	brge	.+10     	; 0x1d42 <MDIO_voidSetPinDirection+0x5a>
    1d38:	8e 81       	ldd	r24, Y+6	; 0x06
    1d3a:	9f 81       	ldd	r25, Y+7	; 0x07
    1d3c:	00 97       	sbiw	r24, 0x00	; 0
    1d3e:	61 f0       	breq	.+24     	; 0x1d58 <MDIO_voidSetPinDirection+0x70>
    1d40:	d2 c0       	rjmp	.+420    	; 0x1ee6 <MDIO_voidSetPinDirection+0x1fe>
    1d42:	2e 81       	ldd	r18, Y+6	; 0x06
    1d44:	3f 81       	ldd	r19, Y+7	; 0x07
    1d46:	22 30       	cpi	r18, 0x02	; 2
    1d48:	31 05       	cpc	r19, r1
    1d4a:	71 f1       	breq	.+92     	; 0x1da8 <MDIO_voidSetPinDirection+0xc0>
    1d4c:	8e 81       	ldd	r24, Y+6	; 0x06
    1d4e:	9f 81       	ldd	r25, Y+7	; 0x07
    1d50:	83 30       	cpi	r24, 0x03	; 3
    1d52:	91 05       	cpc	r25, r1
    1d54:	e9 f1       	breq	.+122    	; 0x1dd0 <MDIO_voidSetPinDirection+0xe8>
    1d56:	c7 c0       	rjmp	.+398    	; 0x1ee6 <MDIO_voidSetPinDirection+0x1fe>
			{
			case DIO_PORTA: SET_BIT(DDRA_Register,A_u8PinNo); break;
    1d58:	aa e3       	ldi	r26, 0x3A	; 58
    1d5a:	b0 e0       	ldi	r27, 0x00	; 0
    1d5c:	ea e3       	ldi	r30, 0x3A	; 58
    1d5e:	f0 e0       	ldi	r31, 0x00	; 0
    1d60:	80 81       	ld	r24, Z
    1d62:	48 2f       	mov	r20, r24
    1d64:	8a 81       	ldd	r24, Y+2	; 0x02
    1d66:	28 2f       	mov	r18, r24
    1d68:	30 e0       	ldi	r19, 0x00	; 0
    1d6a:	81 e0       	ldi	r24, 0x01	; 1
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	02 2e       	mov	r0, r18
    1d70:	02 c0       	rjmp	.+4      	; 0x1d76 <MDIO_voidSetPinDirection+0x8e>
    1d72:	88 0f       	add	r24, r24
    1d74:	99 1f       	adc	r25, r25
    1d76:	0a 94       	dec	r0
    1d78:	e2 f7       	brpl	.-8      	; 0x1d72 <MDIO_voidSetPinDirection+0x8a>
    1d7a:	84 2b       	or	r24, r20
    1d7c:	8c 93       	st	X, r24
    1d7e:	b3 c0       	rjmp	.+358    	; 0x1ee6 <MDIO_voidSetPinDirection+0x1fe>
			case DIO_PORTB: SET_BIT(DDRB_Register,A_u8PinNo); break;
    1d80:	a7 e3       	ldi	r26, 0x37	; 55
    1d82:	b0 e0       	ldi	r27, 0x00	; 0
    1d84:	e7 e3       	ldi	r30, 0x37	; 55
    1d86:	f0 e0       	ldi	r31, 0x00	; 0
    1d88:	80 81       	ld	r24, Z
    1d8a:	48 2f       	mov	r20, r24
    1d8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8e:	28 2f       	mov	r18, r24
    1d90:	30 e0       	ldi	r19, 0x00	; 0
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	02 2e       	mov	r0, r18
    1d98:	02 c0       	rjmp	.+4      	; 0x1d9e <MDIO_voidSetPinDirection+0xb6>
    1d9a:	88 0f       	add	r24, r24
    1d9c:	99 1f       	adc	r25, r25
    1d9e:	0a 94       	dec	r0
    1da0:	e2 f7       	brpl	.-8      	; 0x1d9a <MDIO_voidSetPinDirection+0xb2>
    1da2:	84 2b       	or	r24, r20
    1da4:	8c 93       	st	X, r24
    1da6:	9f c0       	rjmp	.+318    	; 0x1ee6 <MDIO_voidSetPinDirection+0x1fe>
			case DIO_PORTC: SET_BIT(DDRC_Register,A_u8PinNo); break;
    1da8:	a4 e3       	ldi	r26, 0x34	; 52
    1daa:	b0 e0       	ldi	r27, 0x00	; 0
    1dac:	e4 e3       	ldi	r30, 0x34	; 52
    1dae:	f0 e0       	ldi	r31, 0x00	; 0
    1db0:	80 81       	ld	r24, Z
    1db2:	48 2f       	mov	r20, r24
    1db4:	8a 81       	ldd	r24, Y+2	; 0x02
    1db6:	28 2f       	mov	r18, r24
    1db8:	30 e0       	ldi	r19, 0x00	; 0
    1dba:	81 e0       	ldi	r24, 0x01	; 1
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	02 2e       	mov	r0, r18
    1dc0:	02 c0       	rjmp	.+4      	; 0x1dc6 <MDIO_voidSetPinDirection+0xde>
    1dc2:	88 0f       	add	r24, r24
    1dc4:	99 1f       	adc	r25, r25
    1dc6:	0a 94       	dec	r0
    1dc8:	e2 f7       	brpl	.-8      	; 0x1dc2 <MDIO_voidSetPinDirection+0xda>
    1dca:	84 2b       	or	r24, r20
    1dcc:	8c 93       	st	X, r24
    1dce:	8b c0       	rjmp	.+278    	; 0x1ee6 <MDIO_voidSetPinDirection+0x1fe>
			case DIO_PORTD: SET_BIT(DDRD_Register,A_u8PinNo); break;
    1dd0:	a1 e3       	ldi	r26, 0x31	; 49
    1dd2:	b0 e0       	ldi	r27, 0x00	; 0
    1dd4:	e1 e3       	ldi	r30, 0x31	; 49
    1dd6:	f0 e0       	ldi	r31, 0x00	; 0
    1dd8:	80 81       	ld	r24, Z
    1dda:	48 2f       	mov	r20, r24
    1ddc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dde:	28 2f       	mov	r18, r24
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	81 e0       	ldi	r24, 0x01	; 1
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	02 2e       	mov	r0, r18
    1de8:	02 c0       	rjmp	.+4      	; 0x1dee <MDIO_voidSetPinDirection+0x106>
    1dea:	88 0f       	add	r24, r24
    1dec:	99 1f       	adc	r25, r25
    1dee:	0a 94       	dec	r0
    1df0:	e2 f7       	brpl	.-8      	; 0x1dea <MDIO_voidSetPinDirection+0x102>
    1df2:	84 2b       	or	r24, r20
    1df4:	8c 93       	st	X, r24
    1df6:	77 c0       	rjmp	.+238    	; 0x1ee6 <MDIO_voidSetPinDirection+0x1fe>
			}
		}

		else if ( A_u8PinDirection == DIO_PIN_INPUT )
    1df8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfa:	88 23       	and	r24, r24
    1dfc:	09 f0       	breq	.+2      	; 0x1e00 <MDIO_voidSetPinDirection+0x118>
    1dfe:	73 c0       	rjmp	.+230    	; 0x1ee6 <MDIO_voidSetPinDirection+0x1fe>
		{
			/* Check on the Required PORT Number */
			switch (A_u8PortNo)
    1e00:	89 81       	ldd	r24, Y+1	; 0x01
    1e02:	28 2f       	mov	r18, r24
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	3d 83       	std	Y+5, r19	; 0x05
    1e08:	2c 83       	std	Y+4, r18	; 0x04
    1e0a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e0c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e0e:	81 30       	cpi	r24, 0x01	; 1
    1e10:	91 05       	cpc	r25, r1
    1e12:	59 f1       	breq	.+86     	; 0x1e6a <MDIO_voidSetPinDirection+0x182>
    1e14:	2c 81       	ldd	r18, Y+4	; 0x04
    1e16:	3d 81       	ldd	r19, Y+5	; 0x05
    1e18:	22 30       	cpi	r18, 0x02	; 2
    1e1a:	31 05       	cpc	r19, r1
    1e1c:	2c f4       	brge	.+10     	; 0x1e28 <MDIO_voidSetPinDirection+0x140>
    1e1e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e20:	9d 81       	ldd	r25, Y+5	; 0x05
    1e22:	00 97       	sbiw	r24, 0x00	; 0
    1e24:	69 f0       	breq	.+26     	; 0x1e40 <MDIO_voidSetPinDirection+0x158>
    1e26:	5f c0       	rjmp	.+190    	; 0x1ee6 <MDIO_voidSetPinDirection+0x1fe>
    1e28:	2c 81       	ldd	r18, Y+4	; 0x04
    1e2a:	3d 81       	ldd	r19, Y+5	; 0x05
    1e2c:	22 30       	cpi	r18, 0x02	; 2
    1e2e:	31 05       	cpc	r19, r1
    1e30:	89 f1       	breq	.+98     	; 0x1e94 <MDIO_voidSetPinDirection+0x1ac>
    1e32:	8c 81       	ldd	r24, Y+4	; 0x04
    1e34:	9d 81       	ldd	r25, Y+5	; 0x05
    1e36:	83 30       	cpi	r24, 0x03	; 3
    1e38:	91 05       	cpc	r25, r1
    1e3a:	09 f4       	brne	.+2      	; 0x1e3e <MDIO_voidSetPinDirection+0x156>
    1e3c:	40 c0       	rjmp	.+128    	; 0x1ebe <MDIO_voidSetPinDirection+0x1d6>
    1e3e:	53 c0       	rjmp	.+166    	; 0x1ee6 <MDIO_voidSetPinDirection+0x1fe>
			{
			case DIO_PORTA: CLR_BIT(DDRA_Register,A_u8PinNo); break;
    1e40:	aa e3       	ldi	r26, 0x3A	; 58
    1e42:	b0 e0       	ldi	r27, 0x00	; 0
    1e44:	ea e3       	ldi	r30, 0x3A	; 58
    1e46:	f0 e0       	ldi	r31, 0x00	; 0
    1e48:	80 81       	ld	r24, Z
    1e4a:	48 2f       	mov	r20, r24
    1e4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4e:	28 2f       	mov	r18, r24
    1e50:	30 e0       	ldi	r19, 0x00	; 0
    1e52:	81 e0       	ldi	r24, 0x01	; 1
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	02 2e       	mov	r0, r18
    1e58:	02 c0       	rjmp	.+4      	; 0x1e5e <MDIO_voidSetPinDirection+0x176>
    1e5a:	88 0f       	add	r24, r24
    1e5c:	99 1f       	adc	r25, r25
    1e5e:	0a 94       	dec	r0
    1e60:	e2 f7       	brpl	.-8      	; 0x1e5a <MDIO_voidSetPinDirection+0x172>
    1e62:	80 95       	com	r24
    1e64:	84 23       	and	r24, r20
    1e66:	8c 93       	st	X, r24
    1e68:	3e c0       	rjmp	.+124    	; 0x1ee6 <MDIO_voidSetPinDirection+0x1fe>
			case DIO_PORTB: CLR_BIT(DDRB_Register,A_u8PinNo); break;
    1e6a:	a7 e3       	ldi	r26, 0x37	; 55
    1e6c:	b0 e0       	ldi	r27, 0x00	; 0
    1e6e:	e7 e3       	ldi	r30, 0x37	; 55
    1e70:	f0 e0       	ldi	r31, 0x00	; 0
    1e72:	80 81       	ld	r24, Z
    1e74:	48 2f       	mov	r20, r24
    1e76:	8a 81       	ldd	r24, Y+2	; 0x02
    1e78:	28 2f       	mov	r18, r24
    1e7a:	30 e0       	ldi	r19, 0x00	; 0
    1e7c:	81 e0       	ldi	r24, 0x01	; 1
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	02 2e       	mov	r0, r18
    1e82:	02 c0       	rjmp	.+4      	; 0x1e88 <MDIO_voidSetPinDirection+0x1a0>
    1e84:	88 0f       	add	r24, r24
    1e86:	99 1f       	adc	r25, r25
    1e88:	0a 94       	dec	r0
    1e8a:	e2 f7       	brpl	.-8      	; 0x1e84 <MDIO_voidSetPinDirection+0x19c>
    1e8c:	80 95       	com	r24
    1e8e:	84 23       	and	r24, r20
    1e90:	8c 93       	st	X, r24
    1e92:	29 c0       	rjmp	.+82     	; 0x1ee6 <MDIO_voidSetPinDirection+0x1fe>
			case DIO_PORTC: CLR_BIT(DDRC_Register,A_u8PinNo); break;
    1e94:	a4 e3       	ldi	r26, 0x34	; 52
    1e96:	b0 e0       	ldi	r27, 0x00	; 0
    1e98:	e4 e3       	ldi	r30, 0x34	; 52
    1e9a:	f0 e0       	ldi	r31, 0x00	; 0
    1e9c:	80 81       	ld	r24, Z
    1e9e:	48 2f       	mov	r20, r24
    1ea0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea2:	28 2f       	mov	r18, r24
    1ea4:	30 e0       	ldi	r19, 0x00	; 0
    1ea6:	81 e0       	ldi	r24, 0x01	; 1
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	02 2e       	mov	r0, r18
    1eac:	02 c0       	rjmp	.+4      	; 0x1eb2 <MDIO_voidSetPinDirection+0x1ca>
    1eae:	88 0f       	add	r24, r24
    1eb0:	99 1f       	adc	r25, r25
    1eb2:	0a 94       	dec	r0
    1eb4:	e2 f7       	brpl	.-8      	; 0x1eae <MDIO_voidSetPinDirection+0x1c6>
    1eb6:	80 95       	com	r24
    1eb8:	84 23       	and	r24, r20
    1eba:	8c 93       	st	X, r24
    1ebc:	14 c0       	rjmp	.+40     	; 0x1ee6 <MDIO_voidSetPinDirection+0x1fe>
			case DIO_PORTD: CLR_BIT(DDRD_Register,A_u8PinNo); break;
    1ebe:	a1 e3       	ldi	r26, 0x31	; 49
    1ec0:	b0 e0       	ldi	r27, 0x00	; 0
    1ec2:	e1 e3       	ldi	r30, 0x31	; 49
    1ec4:	f0 e0       	ldi	r31, 0x00	; 0
    1ec6:	80 81       	ld	r24, Z
    1ec8:	48 2f       	mov	r20, r24
    1eca:	8a 81       	ldd	r24, Y+2	; 0x02
    1ecc:	28 2f       	mov	r18, r24
    1ece:	30 e0       	ldi	r19, 0x00	; 0
    1ed0:	81 e0       	ldi	r24, 0x01	; 1
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	02 2e       	mov	r0, r18
    1ed6:	02 c0       	rjmp	.+4      	; 0x1edc <MDIO_voidSetPinDirection+0x1f4>
    1ed8:	88 0f       	add	r24, r24
    1eda:	99 1f       	adc	r25, r25
    1edc:	0a 94       	dec	r0
    1ede:	e2 f7       	brpl	.-8      	; 0x1ed8 <MDIO_voidSetPinDirection+0x1f0>
    1ee0:	80 95       	com	r24
    1ee2:	84 23       	and	r24, r20
    1ee4:	8c 93       	st	X, r24
			}
		}
	}
}
    1ee6:	27 96       	adiw	r28, 0x07	; 7
    1ee8:	0f b6       	in	r0, 0x3f	; 63
    1eea:	f8 94       	cli
    1eec:	de bf       	out	0x3e, r29	; 62
    1eee:	0f be       	out	0x3f, r0	; 63
    1ef0:	cd bf       	out	0x3d, r28	; 61
    1ef2:	cf 91       	pop	r28
    1ef4:	df 91       	pop	r29
    1ef6:	08 95       	ret

00001ef8 <MDIO_voidSetPinValue>:

void MDIO_voidSetPinValue (u8 A_u8PortNo , u8 A_u8PinNo  , u8 A_u8Value )
{	
    1ef8:	df 93       	push	r29
    1efa:	cf 93       	push	r28
    1efc:	cd b7       	in	r28, 0x3d	; 61
    1efe:	de b7       	in	r29, 0x3e	; 62
    1f00:	27 97       	sbiw	r28, 0x07	; 7
    1f02:	0f b6       	in	r0, 0x3f	; 63
    1f04:	f8 94       	cli
    1f06:	de bf       	out	0x3e, r29	; 62
    1f08:	0f be       	out	0x3f, r0	; 63
    1f0a:	cd bf       	out	0x3d, r28	; 61
    1f0c:	89 83       	std	Y+1, r24	; 0x01
    1f0e:	6a 83       	std	Y+2, r22	; 0x02
    1f10:	4b 83       	std	Y+3, r20	; 0x03
		if(A_u8Value==DIO_PIN_HIGH)
    1f12:	8b 81       	ldd	r24, Y+3	; 0x03
    1f14:	81 30       	cpi	r24, 0x01	; 1
    1f16:	09 f0       	breq	.+2      	; 0x1f1a <MDIO_voidSetPinValue+0x22>
    1f18:	6f c0       	rjmp	.+222    	; 0x1ff8 <MDIO_voidSetPinValue+0x100>
		{
			switch (A_u8PortNo)
    1f1a:	89 81       	ldd	r24, Y+1	; 0x01
    1f1c:	28 2f       	mov	r18, r24
    1f1e:	30 e0       	ldi	r19, 0x00	; 0
    1f20:	3f 83       	std	Y+7, r19	; 0x07
    1f22:	2e 83       	std	Y+6, r18	; 0x06
    1f24:	8e 81       	ldd	r24, Y+6	; 0x06
    1f26:	9f 81       	ldd	r25, Y+7	; 0x07
    1f28:	81 30       	cpi	r24, 0x01	; 1
    1f2a:	91 05       	cpc	r25, r1
    1f2c:	49 f1       	breq	.+82     	; 0x1f80 <MDIO_voidSetPinValue+0x88>
    1f2e:	2e 81       	ldd	r18, Y+6	; 0x06
    1f30:	3f 81       	ldd	r19, Y+7	; 0x07
    1f32:	22 30       	cpi	r18, 0x02	; 2
    1f34:	31 05       	cpc	r19, r1
    1f36:	2c f4       	brge	.+10     	; 0x1f42 <MDIO_voidSetPinValue+0x4a>
    1f38:	8e 81       	ldd	r24, Y+6	; 0x06
    1f3a:	9f 81       	ldd	r25, Y+7	; 0x07
    1f3c:	00 97       	sbiw	r24, 0x00	; 0
    1f3e:	61 f0       	breq	.+24     	; 0x1f58 <MDIO_voidSetPinValue+0x60>
    1f40:	d2 c0       	rjmp	.+420    	; 0x20e6 <MDIO_voidSetPinValue+0x1ee>
    1f42:	2e 81       	ldd	r18, Y+6	; 0x06
    1f44:	3f 81       	ldd	r19, Y+7	; 0x07
    1f46:	22 30       	cpi	r18, 0x02	; 2
    1f48:	31 05       	cpc	r19, r1
    1f4a:	71 f1       	breq	.+92     	; 0x1fa8 <MDIO_voidSetPinValue+0xb0>
    1f4c:	8e 81       	ldd	r24, Y+6	; 0x06
    1f4e:	9f 81       	ldd	r25, Y+7	; 0x07
    1f50:	83 30       	cpi	r24, 0x03	; 3
    1f52:	91 05       	cpc	r25, r1
    1f54:	e9 f1       	breq	.+122    	; 0x1fd0 <MDIO_voidSetPinValue+0xd8>
    1f56:	c7 c0       	rjmp	.+398    	; 0x20e6 <MDIO_voidSetPinValue+0x1ee>
			{
			case DIO_PORTA: SET_BIT(PORTA,A_u8PinNo); break;
    1f58:	ab e3       	ldi	r26, 0x3B	; 59
    1f5a:	b0 e0       	ldi	r27, 0x00	; 0
    1f5c:	eb e3       	ldi	r30, 0x3B	; 59
    1f5e:	f0 e0       	ldi	r31, 0x00	; 0
    1f60:	80 81       	ld	r24, Z
    1f62:	48 2f       	mov	r20, r24
    1f64:	8a 81       	ldd	r24, Y+2	; 0x02
    1f66:	28 2f       	mov	r18, r24
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	81 e0       	ldi	r24, 0x01	; 1
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	02 2e       	mov	r0, r18
    1f70:	02 c0       	rjmp	.+4      	; 0x1f76 <MDIO_voidSetPinValue+0x7e>
    1f72:	88 0f       	add	r24, r24
    1f74:	99 1f       	adc	r25, r25
    1f76:	0a 94       	dec	r0
    1f78:	e2 f7       	brpl	.-8      	; 0x1f72 <MDIO_voidSetPinValue+0x7a>
    1f7a:	84 2b       	or	r24, r20
    1f7c:	8c 93       	st	X, r24
    1f7e:	b3 c0       	rjmp	.+358    	; 0x20e6 <MDIO_voidSetPinValue+0x1ee>
			case DIO_PORTB: SET_BIT(PORTB,A_u8PinNo); break;
    1f80:	a8 e3       	ldi	r26, 0x38	; 56
    1f82:	b0 e0       	ldi	r27, 0x00	; 0
    1f84:	e8 e3       	ldi	r30, 0x38	; 56
    1f86:	f0 e0       	ldi	r31, 0x00	; 0
    1f88:	80 81       	ld	r24, Z
    1f8a:	48 2f       	mov	r20, r24
    1f8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8e:	28 2f       	mov	r18, r24
    1f90:	30 e0       	ldi	r19, 0x00	; 0
    1f92:	81 e0       	ldi	r24, 0x01	; 1
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	02 2e       	mov	r0, r18
    1f98:	02 c0       	rjmp	.+4      	; 0x1f9e <MDIO_voidSetPinValue+0xa6>
    1f9a:	88 0f       	add	r24, r24
    1f9c:	99 1f       	adc	r25, r25
    1f9e:	0a 94       	dec	r0
    1fa0:	e2 f7       	brpl	.-8      	; 0x1f9a <MDIO_voidSetPinValue+0xa2>
    1fa2:	84 2b       	or	r24, r20
    1fa4:	8c 93       	st	X, r24
    1fa6:	9f c0       	rjmp	.+318    	; 0x20e6 <MDIO_voidSetPinValue+0x1ee>
			case DIO_PORTC: SET_BIT(PORTC,A_u8PinNo); break;
    1fa8:	a5 e3       	ldi	r26, 0x35	; 53
    1faa:	b0 e0       	ldi	r27, 0x00	; 0
    1fac:	e5 e3       	ldi	r30, 0x35	; 53
    1fae:	f0 e0       	ldi	r31, 0x00	; 0
    1fb0:	80 81       	ld	r24, Z
    1fb2:	48 2f       	mov	r20, r24
    1fb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb6:	28 2f       	mov	r18, r24
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	81 e0       	ldi	r24, 0x01	; 1
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	02 2e       	mov	r0, r18
    1fc0:	02 c0       	rjmp	.+4      	; 0x1fc6 <MDIO_voidSetPinValue+0xce>
    1fc2:	88 0f       	add	r24, r24
    1fc4:	99 1f       	adc	r25, r25
    1fc6:	0a 94       	dec	r0
    1fc8:	e2 f7       	brpl	.-8      	; 0x1fc2 <MDIO_voidSetPinValue+0xca>
    1fca:	84 2b       	or	r24, r20
    1fcc:	8c 93       	st	X, r24
    1fce:	8b c0       	rjmp	.+278    	; 0x20e6 <MDIO_voidSetPinValue+0x1ee>
			case DIO_PORTD: SET_BIT(PORTD,A_u8PinNo); break;
    1fd0:	a2 e3       	ldi	r26, 0x32	; 50
    1fd2:	b0 e0       	ldi	r27, 0x00	; 0
    1fd4:	e2 e3       	ldi	r30, 0x32	; 50
    1fd6:	f0 e0       	ldi	r31, 0x00	; 0
    1fd8:	80 81       	ld	r24, Z
    1fda:	48 2f       	mov	r20, r24
    1fdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fde:	28 2f       	mov	r18, r24
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	81 e0       	ldi	r24, 0x01	; 1
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	02 2e       	mov	r0, r18
    1fe8:	02 c0       	rjmp	.+4      	; 0x1fee <MDIO_voidSetPinValue+0xf6>
    1fea:	88 0f       	add	r24, r24
    1fec:	99 1f       	adc	r25, r25
    1fee:	0a 94       	dec	r0
    1ff0:	e2 f7       	brpl	.-8      	; 0x1fea <MDIO_voidSetPinValue+0xf2>
    1ff2:	84 2b       	or	r24, r20
    1ff4:	8c 93       	st	X, r24
    1ff6:	77 c0       	rjmp	.+238    	; 0x20e6 <MDIO_voidSetPinValue+0x1ee>
			}
		}
		else if(A_u8Value==DIO_PIN_LOW)
    1ff8:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffa:	88 23       	and	r24, r24
    1ffc:	09 f0       	breq	.+2      	; 0x2000 <MDIO_voidSetPinValue+0x108>
    1ffe:	73 c0       	rjmp	.+230    	; 0x20e6 <MDIO_voidSetPinValue+0x1ee>
		{
			switch (A_u8PortNo)
    2000:	89 81       	ldd	r24, Y+1	; 0x01
    2002:	28 2f       	mov	r18, r24
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	3d 83       	std	Y+5, r19	; 0x05
    2008:	2c 83       	std	Y+4, r18	; 0x04
    200a:	8c 81       	ldd	r24, Y+4	; 0x04
    200c:	9d 81       	ldd	r25, Y+5	; 0x05
    200e:	81 30       	cpi	r24, 0x01	; 1
    2010:	91 05       	cpc	r25, r1
    2012:	59 f1       	breq	.+86     	; 0x206a <MDIO_voidSetPinValue+0x172>
    2014:	2c 81       	ldd	r18, Y+4	; 0x04
    2016:	3d 81       	ldd	r19, Y+5	; 0x05
    2018:	22 30       	cpi	r18, 0x02	; 2
    201a:	31 05       	cpc	r19, r1
    201c:	2c f4       	brge	.+10     	; 0x2028 <MDIO_voidSetPinValue+0x130>
    201e:	8c 81       	ldd	r24, Y+4	; 0x04
    2020:	9d 81       	ldd	r25, Y+5	; 0x05
    2022:	00 97       	sbiw	r24, 0x00	; 0
    2024:	69 f0       	breq	.+26     	; 0x2040 <MDIO_voidSetPinValue+0x148>
    2026:	5f c0       	rjmp	.+190    	; 0x20e6 <MDIO_voidSetPinValue+0x1ee>
    2028:	2c 81       	ldd	r18, Y+4	; 0x04
    202a:	3d 81       	ldd	r19, Y+5	; 0x05
    202c:	22 30       	cpi	r18, 0x02	; 2
    202e:	31 05       	cpc	r19, r1
    2030:	89 f1       	breq	.+98     	; 0x2094 <MDIO_voidSetPinValue+0x19c>
    2032:	8c 81       	ldd	r24, Y+4	; 0x04
    2034:	9d 81       	ldd	r25, Y+5	; 0x05
    2036:	83 30       	cpi	r24, 0x03	; 3
    2038:	91 05       	cpc	r25, r1
    203a:	09 f4       	brne	.+2      	; 0x203e <MDIO_voidSetPinValue+0x146>
    203c:	40 c0       	rjmp	.+128    	; 0x20be <MDIO_voidSetPinValue+0x1c6>
    203e:	53 c0       	rjmp	.+166    	; 0x20e6 <MDIO_voidSetPinValue+0x1ee>
			{
			case DIO_PORTA: CLR_BIT(PORTA,A_u8PinNo); break;
    2040:	ab e3       	ldi	r26, 0x3B	; 59
    2042:	b0 e0       	ldi	r27, 0x00	; 0
    2044:	eb e3       	ldi	r30, 0x3B	; 59
    2046:	f0 e0       	ldi	r31, 0x00	; 0
    2048:	80 81       	ld	r24, Z
    204a:	48 2f       	mov	r20, r24
    204c:	8a 81       	ldd	r24, Y+2	; 0x02
    204e:	28 2f       	mov	r18, r24
    2050:	30 e0       	ldi	r19, 0x00	; 0
    2052:	81 e0       	ldi	r24, 0x01	; 1
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	02 2e       	mov	r0, r18
    2058:	02 c0       	rjmp	.+4      	; 0x205e <MDIO_voidSetPinValue+0x166>
    205a:	88 0f       	add	r24, r24
    205c:	99 1f       	adc	r25, r25
    205e:	0a 94       	dec	r0
    2060:	e2 f7       	brpl	.-8      	; 0x205a <MDIO_voidSetPinValue+0x162>
    2062:	80 95       	com	r24
    2064:	84 23       	and	r24, r20
    2066:	8c 93       	st	X, r24
    2068:	3e c0       	rjmp	.+124    	; 0x20e6 <MDIO_voidSetPinValue+0x1ee>
			case DIO_PORTB: CLR_BIT(PORTB,A_u8PinNo); break;
    206a:	a8 e3       	ldi	r26, 0x38	; 56
    206c:	b0 e0       	ldi	r27, 0x00	; 0
    206e:	e8 e3       	ldi	r30, 0x38	; 56
    2070:	f0 e0       	ldi	r31, 0x00	; 0
    2072:	80 81       	ld	r24, Z
    2074:	48 2f       	mov	r20, r24
    2076:	8a 81       	ldd	r24, Y+2	; 0x02
    2078:	28 2f       	mov	r18, r24
    207a:	30 e0       	ldi	r19, 0x00	; 0
    207c:	81 e0       	ldi	r24, 0x01	; 1
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	02 2e       	mov	r0, r18
    2082:	02 c0       	rjmp	.+4      	; 0x2088 <MDIO_voidSetPinValue+0x190>
    2084:	88 0f       	add	r24, r24
    2086:	99 1f       	adc	r25, r25
    2088:	0a 94       	dec	r0
    208a:	e2 f7       	brpl	.-8      	; 0x2084 <MDIO_voidSetPinValue+0x18c>
    208c:	80 95       	com	r24
    208e:	84 23       	and	r24, r20
    2090:	8c 93       	st	X, r24
    2092:	29 c0       	rjmp	.+82     	; 0x20e6 <MDIO_voidSetPinValue+0x1ee>
			case DIO_PORTC: CLR_BIT(PORTC,A_u8PinNo); break;
    2094:	a5 e3       	ldi	r26, 0x35	; 53
    2096:	b0 e0       	ldi	r27, 0x00	; 0
    2098:	e5 e3       	ldi	r30, 0x35	; 53
    209a:	f0 e0       	ldi	r31, 0x00	; 0
    209c:	80 81       	ld	r24, Z
    209e:	48 2f       	mov	r20, r24
    20a0:	8a 81       	ldd	r24, Y+2	; 0x02
    20a2:	28 2f       	mov	r18, r24
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	81 e0       	ldi	r24, 0x01	; 1
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	02 2e       	mov	r0, r18
    20ac:	02 c0       	rjmp	.+4      	; 0x20b2 <MDIO_voidSetPinValue+0x1ba>
    20ae:	88 0f       	add	r24, r24
    20b0:	99 1f       	adc	r25, r25
    20b2:	0a 94       	dec	r0
    20b4:	e2 f7       	brpl	.-8      	; 0x20ae <MDIO_voidSetPinValue+0x1b6>
    20b6:	80 95       	com	r24
    20b8:	84 23       	and	r24, r20
    20ba:	8c 93       	st	X, r24
    20bc:	14 c0       	rjmp	.+40     	; 0x20e6 <MDIO_voidSetPinValue+0x1ee>
			case DIO_PORTD: CLR_BIT(PORTD,A_u8PinNo); break;
    20be:	a2 e3       	ldi	r26, 0x32	; 50
    20c0:	b0 e0       	ldi	r27, 0x00	; 0
    20c2:	e2 e3       	ldi	r30, 0x32	; 50
    20c4:	f0 e0       	ldi	r31, 0x00	; 0
    20c6:	80 81       	ld	r24, Z
    20c8:	48 2f       	mov	r20, r24
    20ca:	8a 81       	ldd	r24, Y+2	; 0x02
    20cc:	28 2f       	mov	r18, r24
    20ce:	30 e0       	ldi	r19, 0x00	; 0
    20d0:	81 e0       	ldi	r24, 0x01	; 1
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    20d4:	02 2e       	mov	r0, r18
    20d6:	02 c0       	rjmp	.+4      	; 0x20dc <MDIO_voidSetPinValue+0x1e4>
    20d8:	88 0f       	add	r24, r24
    20da:	99 1f       	adc	r25, r25
    20dc:	0a 94       	dec	r0
    20de:	e2 f7       	brpl	.-8      	; 0x20d8 <MDIO_voidSetPinValue+0x1e0>
    20e0:	80 95       	com	r24
    20e2:	84 23       	and	r24, r20
    20e4:	8c 93       	st	X, r24
			}
		}
}
    20e6:	27 96       	adiw	r28, 0x07	; 7
    20e8:	0f b6       	in	r0, 0x3f	; 63
    20ea:	f8 94       	cli
    20ec:	de bf       	out	0x3e, r29	; 62
    20ee:	0f be       	out	0x3f, r0	; 63
    20f0:	cd bf       	out	0x3d, r28	; 61
    20f2:	cf 91       	pop	r28
    20f4:	df 91       	pop	r29
    20f6:	08 95       	ret

000020f8 <MDIO_voidClrPinValue>:

void MDIO_voidClrPinValue (u8 A_u8PortNo , u8 A_u8PinNo )
{
    20f8:	df 93       	push	r29
    20fa:	cf 93       	push	r28
    20fc:	00 d0       	rcall	.+0      	; 0x20fe <MDIO_voidClrPinValue+0x6>
    20fe:	00 d0       	rcall	.+0      	; 0x2100 <MDIO_voidClrPinValue+0x8>
    2100:	cd b7       	in	r28, 0x3d	; 61
    2102:	de b7       	in	r29, 0x3e	; 62
    2104:	89 83       	std	Y+1, r24	; 0x01
    2106:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_u8PortNo)
    2108:	89 81       	ldd	r24, Y+1	; 0x01
    210a:	28 2f       	mov	r18, r24
    210c:	30 e0       	ldi	r19, 0x00	; 0
    210e:	3c 83       	std	Y+4, r19	; 0x04
    2110:	2b 83       	std	Y+3, r18	; 0x03
    2112:	8b 81       	ldd	r24, Y+3	; 0x03
    2114:	9c 81       	ldd	r25, Y+4	; 0x04
    2116:	81 30       	cpi	r24, 0x01	; 1
    2118:	91 05       	cpc	r25, r1
    211a:	59 f1       	breq	.+86     	; 0x2172 <MDIO_voidClrPinValue+0x7a>
    211c:	2b 81       	ldd	r18, Y+3	; 0x03
    211e:	3c 81       	ldd	r19, Y+4	; 0x04
    2120:	22 30       	cpi	r18, 0x02	; 2
    2122:	31 05       	cpc	r19, r1
    2124:	2c f4       	brge	.+10     	; 0x2130 <MDIO_voidClrPinValue+0x38>
    2126:	8b 81       	ldd	r24, Y+3	; 0x03
    2128:	9c 81       	ldd	r25, Y+4	; 0x04
    212a:	00 97       	sbiw	r24, 0x00	; 0
    212c:	69 f0       	breq	.+26     	; 0x2148 <MDIO_voidClrPinValue+0x50>
    212e:	5f c0       	rjmp	.+190    	; 0x21ee <MDIO_voidClrPinValue+0xf6>
    2130:	2b 81       	ldd	r18, Y+3	; 0x03
    2132:	3c 81       	ldd	r19, Y+4	; 0x04
    2134:	22 30       	cpi	r18, 0x02	; 2
    2136:	31 05       	cpc	r19, r1
    2138:	89 f1       	breq	.+98     	; 0x219c <MDIO_voidClrPinValue+0xa4>
    213a:	8b 81       	ldd	r24, Y+3	; 0x03
    213c:	9c 81       	ldd	r25, Y+4	; 0x04
    213e:	83 30       	cpi	r24, 0x03	; 3
    2140:	91 05       	cpc	r25, r1
    2142:	09 f4       	brne	.+2      	; 0x2146 <MDIO_voidClrPinValue+0x4e>
    2144:	40 c0       	rjmp	.+128    	; 0x21c6 <MDIO_voidClrPinValue+0xce>
    2146:	53 c0       	rjmp	.+166    	; 0x21ee <MDIO_voidClrPinValue+0xf6>
			{
			case DIO_PORTA: CLR_BIT(PORTA,A_u8PinNo); break;
    2148:	ab e3       	ldi	r26, 0x3B	; 59
    214a:	b0 e0       	ldi	r27, 0x00	; 0
    214c:	eb e3       	ldi	r30, 0x3B	; 59
    214e:	f0 e0       	ldi	r31, 0x00	; 0
    2150:	80 81       	ld	r24, Z
    2152:	48 2f       	mov	r20, r24
    2154:	8a 81       	ldd	r24, Y+2	; 0x02
    2156:	28 2f       	mov	r18, r24
    2158:	30 e0       	ldi	r19, 0x00	; 0
    215a:	81 e0       	ldi	r24, 0x01	; 1
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	02 2e       	mov	r0, r18
    2160:	02 c0       	rjmp	.+4      	; 0x2166 <MDIO_voidClrPinValue+0x6e>
    2162:	88 0f       	add	r24, r24
    2164:	99 1f       	adc	r25, r25
    2166:	0a 94       	dec	r0
    2168:	e2 f7       	brpl	.-8      	; 0x2162 <MDIO_voidClrPinValue+0x6a>
    216a:	80 95       	com	r24
    216c:	84 23       	and	r24, r20
    216e:	8c 93       	st	X, r24
    2170:	3e c0       	rjmp	.+124    	; 0x21ee <MDIO_voidClrPinValue+0xf6>
			case DIO_PORTB: CLR_BIT(PORTB,A_u8PinNo); break;
    2172:	a8 e3       	ldi	r26, 0x38	; 56
    2174:	b0 e0       	ldi	r27, 0x00	; 0
    2176:	e8 e3       	ldi	r30, 0x38	; 56
    2178:	f0 e0       	ldi	r31, 0x00	; 0
    217a:	80 81       	ld	r24, Z
    217c:	48 2f       	mov	r20, r24
    217e:	8a 81       	ldd	r24, Y+2	; 0x02
    2180:	28 2f       	mov	r18, r24
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	81 e0       	ldi	r24, 0x01	; 1
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	02 2e       	mov	r0, r18
    218a:	02 c0       	rjmp	.+4      	; 0x2190 <MDIO_voidClrPinValue+0x98>
    218c:	88 0f       	add	r24, r24
    218e:	99 1f       	adc	r25, r25
    2190:	0a 94       	dec	r0
    2192:	e2 f7       	brpl	.-8      	; 0x218c <MDIO_voidClrPinValue+0x94>
    2194:	80 95       	com	r24
    2196:	84 23       	and	r24, r20
    2198:	8c 93       	st	X, r24
    219a:	29 c0       	rjmp	.+82     	; 0x21ee <MDIO_voidClrPinValue+0xf6>
			case DIO_PORTC: CLR_BIT(PORTC,A_u8PinNo); break;
    219c:	a5 e3       	ldi	r26, 0x35	; 53
    219e:	b0 e0       	ldi	r27, 0x00	; 0
    21a0:	e5 e3       	ldi	r30, 0x35	; 53
    21a2:	f0 e0       	ldi	r31, 0x00	; 0
    21a4:	80 81       	ld	r24, Z
    21a6:	48 2f       	mov	r20, r24
    21a8:	8a 81       	ldd	r24, Y+2	; 0x02
    21aa:	28 2f       	mov	r18, r24
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	81 e0       	ldi	r24, 0x01	; 1
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	02 2e       	mov	r0, r18
    21b4:	02 c0       	rjmp	.+4      	; 0x21ba <MDIO_voidClrPinValue+0xc2>
    21b6:	88 0f       	add	r24, r24
    21b8:	99 1f       	adc	r25, r25
    21ba:	0a 94       	dec	r0
    21bc:	e2 f7       	brpl	.-8      	; 0x21b6 <MDIO_voidClrPinValue+0xbe>
    21be:	80 95       	com	r24
    21c0:	84 23       	and	r24, r20
    21c2:	8c 93       	st	X, r24
    21c4:	14 c0       	rjmp	.+40     	; 0x21ee <MDIO_voidClrPinValue+0xf6>
			case DIO_PORTD: CLR_BIT(PORTD,A_u8PinNo); break;
    21c6:	a2 e3       	ldi	r26, 0x32	; 50
    21c8:	b0 e0       	ldi	r27, 0x00	; 0
    21ca:	e2 e3       	ldi	r30, 0x32	; 50
    21cc:	f0 e0       	ldi	r31, 0x00	; 0
    21ce:	80 81       	ld	r24, Z
    21d0:	48 2f       	mov	r20, r24
    21d2:	8a 81       	ldd	r24, Y+2	; 0x02
    21d4:	28 2f       	mov	r18, r24
    21d6:	30 e0       	ldi	r19, 0x00	; 0
    21d8:	81 e0       	ldi	r24, 0x01	; 1
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	02 2e       	mov	r0, r18
    21de:	02 c0       	rjmp	.+4      	; 0x21e4 <MDIO_voidClrPinValue+0xec>
    21e0:	88 0f       	add	r24, r24
    21e2:	99 1f       	adc	r25, r25
    21e4:	0a 94       	dec	r0
    21e6:	e2 f7       	brpl	.-8      	; 0x21e0 <MDIO_voidClrPinValue+0xe8>
    21e8:	80 95       	com	r24
    21ea:	84 23       	and	r24, r20
    21ec:	8c 93       	st	X, r24
			}
}
    21ee:	0f 90       	pop	r0
    21f0:	0f 90       	pop	r0
    21f2:	0f 90       	pop	r0
    21f4:	0f 90       	pop	r0
    21f6:	cf 91       	pop	r28
    21f8:	df 91       	pop	r29
    21fa:	08 95       	ret

000021fc <MDIO_voidGetPinValue>:

void MDIO_voidGetPinValue (u8 A_u8PortNo , u8 A_u8PinNo  , u8 * A_PtrData )
{
    21fc:	df 93       	push	r29
    21fe:	cf 93       	push	r28
    2200:	00 d0       	rcall	.+0      	; 0x2202 <MDIO_voidGetPinValue+0x6>
    2202:	00 d0       	rcall	.+0      	; 0x2204 <MDIO_voidGetPinValue+0x8>
    2204:	00 d0       	rcall	.+0      	; 0x2206 <MDIO_voidGetPinValue+0xa>
    2206:	cd b7       	in	r28, 0x3d	; 61
    2208:	de b7       	in	r29, 0x3e	; 62
    220a:	89 83       	std	Y+1, r24	; 0x01
    220c:	6a 83       	std	Y+2, r22	; 0x02
    220e:	5c 83       	std	Y+4, r21	; 0x04
    2210:	4b 83       	std	Y+3, r20	; 0x03
	switch (A_u8PortNo)
    2212:	89 81       	ldd	r24, Y+1	; 0x01
    2214:	28 2f       	mov	r18, r24
    2216:	30 e0       	ldi	r19, 0x00	; 0
    2218:	3e 83       	std	Y+6, r19	; 0x06
    221a:	2d 83       	std	Y+5, r18	; 0x05
    221c:	4d 81       	ldd	r20, Y+5	; 0x05
    221e:	5e 81       	ldd	r21, Y+6	; 0x06
    2220:	41 30       	cpi	r20, 0x01	; 1
    2222:	51 05       	cpc	r21, r1
    2224:	c1 f1       	breq	.+112    	; 0x2296 <MDIO_voidGetPinValue+0x9a>
    2226:	8d 81       	ldd	r24, Y+5	; 0x05
    2228:	9e 81       	ldd	r25, Y+6	; 0x06
    222a:	82 30       	cpi	r24, 0x02	; 2
    222c:	91 05       	cpc	r25, r1
    222e:	34 f4       	brge	.+12     	; 0x223c <MDIO_voidGetPinValue+0x40>
    2230:	2d 81       	ldd	r18, Y+5	; 0x05
    2232:	3e 81       	ldd	r19, Y+6	; 0x06
    2234:	21 15       	cp	r18, r1
    2236:	31 05       	cpc	r19, r1
    2238:	71 f0       	breq	.+28     	; 0x2256 <MDIO_voidGetPinValue+0x5a>
    223a:	8c c0       	rjmp	.+280    	; 0x2354 <MDIO_voidGetPinValue+0x158>
    223c:	4d 81       	ldd	r20, Y+5	; 0x05
    223e:	5e 81       	ldd	r21, Y+6	; 0x06
    2240:	42 30       	cpi	r20, 0x02	; 2
    2242:	51 05       	cpc	r21, r1
    2244:	09 f4       	brne	.+2      	; 0x2248 <MDIO_voidGetPinValue+0x4c>
    2246:	47 c0       	rjmp	.+142    	; 0x22d6 <MDIO_voidGetPinValue+0xda>
    2248:	8d 81       	ldd	r24, Y+5	; 0x05
    224a:	9e 81       	ldd	r25, Y+6	; 0x06
    224c:	83 30       	cpi	r24, 0x03	; 3
    224e:	91 05       	cpc	r25, r1
    2250:	09 f4       	brne	.+2      	; 0x2254 <MDIO_voidGetPinValue+0x58>
    2252:	61 c0       	rjmp	.+194    	; 0x2316 <MDIO_voidGetPinValue+0x11a>
    2254:	7f c0       	rjmp	.+254    	; 0x2354 <MDIO_voidGetPinValue+0x158>
			{
			case DIO_PORTA: *A_PtrData=GET_BIT(DIO_PINA,A_u8PinNo); break;
    2256:	e9 e3       	ldi	r30, 0x39	; 57
    2258:	f0 e0       	ldi	r31, 0x00	; 0
    225a:	80 81       	ld	r24, Z
    225c:	48 2f       	mov	r20, r24
    225e:	50 e0       	ldi	r21, 0x00	; 0
    2260:	8a 81       	ldd	r24, Y+2	; 0x02
    2262:	28 2f       	mov	r18, r24
    2264:	30 e0       	ldi	r19, 0x00	; 0
    2266:	81 e0       	ldi	r24, 0x01	; 1
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	02 c0       	rjmp	.+4      	; 0x2270 <MDIO_voidGetPinValue+0x74>
    226c:	88 0f       	add	r24, r24
    226e:	99 1f       	adc	r25, r25
    2270:	2a 95       	dec	r18
    2272:	e2 f7       	brpl	.-8      	; 0x226c <MDIO_voidGetPinValue+0x70>
    2274:	9a 01       	movw	r18, r20
    2276:	28 23       	and	r18, r24
    2278:	39 23       	and	r19, r25
    227a:	8a 81       	ldd	r24, Y+2	; 0x02
    227c:	88 2f       	mov	r24, r24
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	a9 01       	movw	r20, r18
    2282:	02 c0       	rjmp	.+4      	; 0x2288 <MDIO_voidGetPinValue+0x8c>
    2284:	55 95       	asr	r21
    2286:	47 95       	ror	r20
    2288:	8a 95       	dec	r24
    228a:	e2 f7       	brpl	.-8      	; 0x2284 <MDIO_voidGetPinValue+0x88>
    228c:	ca 01       	movw	r24, r20
    228e:	eb 81       	ldd	r30, Y+3	; 0x03
    2290:	fc 81       	ldd	r31, Y+4	; 0x04
    2292:	80 83       	st	Z, r24
    2294:	5f c0       	rjmp	.+190    	; 0x2354 <MDIO_voidGetPinValue+0x158>
			case DIO_PORTB: *A_PtrData=GET_BIT(DIO_PINB,A_u8PinNo); break;
    2296:	e6 e3       	ldi	r30, 0x36	; 54
    2298:	f0 e0       	ldi	r31, 0x00	; 0
    229a:	80 81       	ld	r24, Z
    229c:	48 2f       	mov	r20, r24
    229e:	50 e0       	ldi	r21, 0x00	; 0
    22a0:	8a 81       	ldd	r24, Y+2	; 0x02
    22a2:	28 2f       	mov	r18, r24
    22a4:	30 e0       	ldi	r19, 0x00	; 0
    22a6:	81 e0       	ldi	r24, 0x01	; 1
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	02 c0       	rjmp	.+4      	; 0x22b0 <MDIO_voidGetPinValue+0xb4>
    22ac:	88 0f       	add	r24, r24
    22ae:	99 1f       	adc	r25, r25
    22b0:	2a 95       	dec	r18
    22b2:	e2 f7       	brpl	.-8      	; 0x22ac <MDIO_voidGetPinValue+0xb0>
    22b4:	9a 01       	movw	r18, r20
    22b6:	28 23       	and	r18, r24
    22b8:	39 23       	and	r19, r25
    22ba:	8a 81       	ldd	r24, Y+2	; 0x02
    22bc:	88 2f       	mov	r24, r24
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	a9 01       	movw	r20, r18
    22c2:	02 c0       	rjmp	.+4      	; 0x22c8 <MDIO_voidGetPinValue+0xcc>
    22c4:	55 95       	asr	r21
    22c6:	47 95       	ror	r20
    22c8:	8a 95       	dec	r24
    22ca:	e2 f7       	brpl	.-8      	; 0x22c4 <MDIO_voidGetPinValue+0xc8>
    22cc:	ca 01       	movw	r24, r20
    22ce:	eb 81       	ldd	r30, Y+3	; 0x03
    22d0:	fc 81       	ldd	r31, Y+4	; 0x04
    22d2:	80 83       	st	Z, r24
    22d4:	3f c0       	rjmp	.+126    	; 0x2354 <MDIO_voidGetPinValue+0x158>
			case DIO_PORTC: *A_PtrData=GET_BIT(DIO_PINC,A_u8PinNo); break;
    22d6:	e3 e3       	ldi	r30, 0x33	; 51
    22d8:	f0 e0       	ldi	r31, 0x00	; 0
    22da:	80 81       	ld	r24, Z
    22dc:	48 2f       	mov	r20, r24
    22de:	50 e0       	ldi	r21, 0x00	; 0
    22e0:	8a 81       	ldd	r24, Y+2	; 0x02
    22e2:	28 2f       	mov	r18, r24
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	81 e0       	ldi	r24, 0x01	; 1
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	02 c0       	rjmp	.+4      	; 0x22f0 <MDIO_voidGetPinValue+0xf4>
    22ec:	88 0f       	add	r24, r24
    22ee:	99 1f       	adc	r25, r25
    22f0:	2a 95       	dec	r18
    22f2:	e2 f7       	brpl	.-8      	; 0x22ec <MDIO_voidGetPinValue+0xf0>
    22f4:	9a 01       	movw	r18, r20
    22f6:	28 23       	and	r18, r24
    22f8:	39 23       	and	r19, r25
    22fa:	8a 81       	ldd	r24, Y+2	; 0x02
    22fc:	88 2f       	mov	r24, r24
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	a9 01       	movw	r20, r18
    2302:	02 c0       	rjmp	.+4      	; 0x2308 <MDIO_voidGetPinValue+0x10c>
    2304:	55 95       	asr	r21
    2306:	47 95       	ror	r20
    2308:	8a 95       	dec	r24
    230a:	e2 f7       	brpl	.-8      	; 0x2304 <MDIO_voidGetPinValue+0x108>
    230c:	ca 01       	movw	r24, r20
    230e:	eb 81       	ldd	r30, Y+3	; 0x03
    2310:	fc 81       	ldd	r31, Y+4	; 0x04
    2312:	80 83       	st	Z, r24
    2314:	1f c0       	rjmp	.+62     	; 0x2354 <MDIO_voidGetPinValue+0x158>
			case DIO_PORTD: *A_PtrData=GET_BIT(DIO_PIND,A_u8PinNo); break;
    2316:	e0 e3       	ldi	r30, 0x30	; 48
    2318:	f0 e0       	ldi	r31, 0x00	; 0
    231a:	80 81       	ld	r24, Z
    231c:	48 2f       	mov	r20, r24
    231e:	50 e0       	ldi	r21, 0x00	; 0
    2320:	8a 81       	ldd	r24, Y+2	; 0x02
    2322:	28 2f       	mov	r18, r24
    2324:	30 e0       	ldi	r19, 0x00	; 0
    2326:	81 e0       	ldi	r24, 0x01	; 1
    2328:	90 e0       	ldi	r25, 0x00	; 0
    232a:	02 c0       	rjmp	.+4      	; 0x2330 <MDIO_voidGetPinValue+0x134>
    232c:	88 0f       	add	r24, r24
    232e:	99 1f       	adc	r25, r25
    2330:	2a 95       	dec	r18
    2332:	e2 f7       	brpl	.-8      	; 0x232c <MDIO_voidGetPinValue+0x130>
    2334:	9a 01       	movw	r18, r20
    2336:	28 23       	and	r18, r24
    2338:	39 23       	and	r19, r25
    233a:	8a 81       	ldd	r24, Y+2	; 0x02
    233c:	88 2f       	mov	r24, r24
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	a9 01       	movw	r20, r18
    2342:	02 c0       	rjmp	.+4      	; 0x2348 <MDIO_voidGetPinValue+0x14c>
    2344:	55 95       	asr	r21
    2346:	47 95       	ror	r20
    2348:	8a 95       	dec	r24
    234a:	e2 f7       	brpl	.-8      	; 0x2344 <MDIO_voidGetPinValue+0x148>
    234c:	ca 01       	movw	r24, r20
    234e:	eb 81       	ldd	r30, Y+3	; 0x03
    2350:	fc 81       	ldd	r31, Y+4	; 0x04
    2352:	80 83       	st	Z, r24
			}
}
    2354:	26 96       	adiw	r28, 0x06	; 6
    2356:	0f b6       	in	r0, 0x3f	; 63
    2358:	f8 94       	cli
    235a:	de bf       	out	0x3e, r29	; 62
    235c:	0f be       	out	0x3f, r0	; 63
    235e:	cd bf       	out	0x3d, r28	; 61
    2360:	cf 91       	pop	r28
    2362:	df 91       	pop	r29
    2364:	08 95       	ret

00002366 <MDIO_voidTogglePinValue>:

void MDIO_voidTogglePinValue (u8 A_u8PortNo , u8 A_u8PinNo)
{
    2366:	df 93       	push	r29
    2368:	cf 93       	push	r28
    236a:	00 d0       	rcall	.+0      	; 0x236c <MDIO_voidTogglePinValue+0x6>
    236c:	00 d0       	rcall	.+0      	; 0x236e <MDIO_voidTogglePinValue+0x8>
    236e:	cd b7       	in	r28, 0x3d	; 61
    2370:	de b7       	in	r29, 0x3e	; 62
    2372:	89 83       	std	Y+1, r24	; 0x01
    2374:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_u8PortNo)
    2376:	89 81       	ldd	r24, Y+1	; 0x01
    2378:	28 2f       	mov	r18, r24
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	3c 83       	std	Y+4, r19	; 0x04
    237e:	2b 83       	std	Y+3, r18	; 0x03
    2380:	8b 81       	ldd	r24, Y+3	; 0x03
    2382:	9c 81       	ldd	r25, Y+4	; 0x04
    2384:	81 30       	cpi	r24, 0x01	; 1
    2386:	91 05       	cpc	r25, r1
    2388:	49 f1       	breq	.+82     	; 0x23dc <MDIO_voidTogglePinValue+0x76>
    238a:	2b 81       	ldd	r18, Y+3	; 0x03
    238c:	3c 81       	ldd	r19, Y+4	; 0x04
    238e:	22 30       	cpi	r18, 0x02	; 2
    2390:	31 05       	cpc	r19, r1
    2392:	2c f4       	brge	.+10     	; 0x239e <MDIO_voidTogglePinValue+0x38>
    2394:	8b 81       	ldd	r24, Y+3	; 0x03
    2396:	9c 81       	ldd	r25, Y+4	; 0x04
    2398:	00 97       	sbiw	r24, 0x00	; 0
    239a:	61 f0       	breq	.+24     	; 0x23b4 <MDIO_voidTogglePinValue+0x4e>
    239c:	5a c0       	rjmp	.+180    	; 0x2452 <MDIO_voidTogglePinValue+0xec>
    239e:	2b 81       	ldd	r18, Y+3	; 0x03
    23a0:	3c 81       	ldd	r19, Y+4	; 0x04
    23a2:	22 30       	cpi	r18, 0x02	; 2
    23a4:	31 05       	cpc	r19, r1
    23a6:	71 f1       	breq	.+92     	; 0x2404 <MDIO_voidTogglePinValue+0x9e>
    23a8:	8b 81       	ldd	r24, Y+3	; 0x03
    23aa:	9c 81       	ldd	r25, Y+4	; 0x04
    23ac:	83 30       	cpi	r24, 0x03	; 3
    23ae:	91 05       	cpc	r25, r1
    23b0:	e9 f1       	breq	.+122    	; 0x242c <MDIO_voidTogglePinValue+0xc6>
    23b2:	4f c0       	rjmp	.+158    	; 0x2452 <MDIO_voidTogglePinValue+0xec>
			{
			case DIO_PORTA: TOG_BIT(PORTA,A_u8PinNo); break;
    23b4:	ab e3       	ldi	r26, 0x3B	; 59
    23b6:	b0 e0       	ldi	r27, 0x00	; 0
    23b8:	eb e3       	ldi	r30, 0x3B	; 59
    23ba:	f0 e0       	ldi	r31, 0x00	; 0
    23bc:	80 81       	ld	r24, Z
    23be:	48 2f       	mov	r20, r24
    23c0:	8a 81       	ldd	r24, Y+2	; 0x02
    23c2:	28 2f       	mov	r18, r24
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	81 e0       	ldi	r24, 0x01	; 1
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	02 2e       	mov	r0, r18
    23cc:	02 c0       	rjmp	.+4      	; 0x23d2 <MDIO_voidTogglePinValue+0x6c>
    23ce:	88 0f       	add	r24, r24
    23d0:	99 1f       	adc	r25, r25
    23d2:	0a 94       	dec	r0
    23d4:	e2 f7       	brpl	.-8      	; 0x23ce <MDIO_voidTogglePinValue+0x68>
    23d6:	84 27       	eor	r24, r20
    23d8:	8c 93       	st	X, r24
    23da:	3b c0       	rjmp	.+118    	; 0x2452 <MDIO_voidTogglePinValue+0xec>
			case DIO_PORTB: TOG_BIT(PORTB,A_u8PinNo); break;
    23dc:	a8 e3       	ldi	r26, 0x38	; 56
    23de:	b0 e0       	ldi	r27, 0x00	; 0
    23e0:	e8 e3       	ldi	r30, 0x38	; 56
    23e2:	f0 e0       	ldi	r31, 0x00	; 0
    23e4:	80 81       	ld	r24, Z
    23e6:	48 2f       	mov	r20, r24
    23e8:	8a 81       	ldd	r24, Y+2	; 0x02
    23ea:	28 2f       	mov	r18, r24
    23ec:	30 e0       	ldi	r19, 0x00	; 0
    23ee:	81 e0       	ldi	r24, 0x01	; 1
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	02 2e       	mov	r0, r18
    23f4:	02 c0       	rjmp	.+4      	; 0x23fa <MDIO_voidTogglePinValue+0x94>
    23f6:	88 0f       	add	r24, r24
    23f8:	99 1f       	adc	r25, r25
    23fa:	0a 94       	dec	r0
    23fc:	e2 f7       	brpl	.-8      	; 0x23f6 <MDIO_voidTogglePinValue+0x90>
    23fe:	84 27       	eor	r24, r20
    2400:	8c 93       	st	X, r24
    2402:	27 c0       	rjmp	.+78     	; 0x2452 <MDIO_voidTogglePinValue+0xec>
			case DIO_PORTC: TOG_BIT(PORTC,A_u8PinNo); break;
    2404:	a5 e3       	ldi	r26, 0x35	; 53
    2406:	b0 e0       	ldi	r27, 0x00	; 0
    2408:	e5 e3       	ldi	r30, 0x35	; 53
    240a:	f0 e0       	ldi	r31, 0x00	; 0
    240c:	80 81       	ld	r24, Z
    240e:	48 2f       	mov	r20, r24
    2410:	8a 81       	ldd	r24, Y+2	; 0x02
    2412:	28 2f       	mov	r18, r24
    2414:	30 e0       	ldi	r19, 0x00	; 0
    2416:	81 e0       	ldi	r24, 0x01	; 1
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	02 2e       	mov	r0, r18
    241c:	02 c0       	rjmp	.+4      	; 0x2422 <MDIO_voidTogglePinValue+0xbc>
    241e:	88 0f       	add	r24, r24
    2420:	99 1f       	adc	r25, r25
    2422:	0a 94       	dec	r0
    2424:	e2 f7       	brpl	.-8      	; 0x241e <MDIO_voidTogglePinValue+0xb8>
    2426:	84 27       	eor	r24, r20
    2428:	8c 93       	st	X, r24
    242a:	13 c0       	rjmp	.+38     	; 0x2452 <MDIO_voidTogglePinValue+0xec>
			case DIO_PORTD: TOG_BIT(PORTD,A_u8PinNo); break;
    242c:	a2 e3       	ldi	r26, 0x32	; 50
    242e:	b0 e0       	ldi	r27, 0x00	; 0
    2430:	e2 e3       	ldi	r30, 0x32	; 50
    2432:	f0 e0       	ldi	r31, 0x00	; 0
    2434:	80 81       	ld	r24, Z
    2436:	48 2f       	mov	r20, r24
    2438:	8a 81       	ldd	r24, Y+2	; 0x02
    243a:	28 2f       	mov	r18, r24
    243c:	30 e0       	ldi	r19, 0x00	; 0
    243e:	81 e0       	ldi	r24, 0x01	; 1
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	02 2e       	mov	r0, r18
    2444:	02 c0       	rjmp	.+4      	; 0x244a <MDIO_voidTogglePinValue+0xe4>
    2446:	88 0f       	add	r24, r24
    2448:	99 1f       	adc	r25, r25
    244a:	0a 94       	dec	r0
    244c:	e2 f7       	brpl	.-8      	; 0x2446 <MDIO_voidTogglePinValue+0xe0>
    244e:	84 27       	eor	r24, r20
    2450:	8c 93       	st	X, r24
			}
}
    2452:	0f 90       	pop	r0
    2454:	0f 90       	pop	r0
    2456:	0f 90       	pop	r0
    2458:	0f 90       	pop	r0
    245a:	cf 91       	pop	r28
    245c:	df 91       	pop	r29
    245e:	08 95       	ret

00002460 <MDIO_voidSetPortDirection>:


void MDIO_voidSetPortDirection (u8 A_u8PortNo , u8 A_u8PinDirection)
{
    2460:	df 93       	push	r29
    2462:	cf 93       	push	r28
    2464:	00 d0       	rcall	.+0      	; 0x2466 <MDIO_voidSetPortDirection+0x6>
    2466:	00 d0       	rcall	.+0      	; 0x2468 <MDIO_voidSetPortDirection+0x8>
    2468:	cd b7       	in	r28, 0x3d	; 61
    246a:	de b7       	in	r29, 0x3e	; 62
    246c:	89 83       	std	Y+1, r24	; 0x01
    246e:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_u8PortNo)
    2470:	89 81       	ldd	r24, Y+1	; 0x01
    2472:	28 2f       	mov	r18, r24
    2474:	30 e0       	ldi	r19, 0x00	; 0
    2476:	3c 83       	std	Y+4, r19	; 0x04
    2478:	2b 83       	std	Y+3, r18	; 0x03
    247a:	8b 81       	ldd	r24, Y+3	; 0x03
    247c:	9c 81       	ldd	r25, Y+4	; 0x04
    247e:	81 30       	cpi	r24, 0x01	; 1
    2480:	91 05       	cpc	r25, r1
    2482:	d1 f0       	breq	.+52     	; 0x24b8 <MDIO_voidSetPortDirection+0x58>
    2484:	2b 81       	ldd	r18, Y+3	; 0x03
    2486:	3c 81       	ldd	r19, Y+4	; 0x04
    2488:	22 30       	cpi	r18, 0x02	; 2
    248a:	31 05       	cpc	r19, r1
    248c:	2c f4       	brge	.+10     	; 0x2498 <MDIO_voidSetPortDirection+0x38>
    248e:	8b 81       	ldd	r24, Y+3	; 0x03
    2490:	9c 81       	ldd	r25, Y+4	; 0x04
    2492:	00 97       	sbiw	r24, 0x00	; 0
    2494:	61 f0       	breq	.+24     	; 0x24ae <MDIO_voidSetPortDirection+0x4e>
    2496:	1e c0       	rjmp	.+60     	; 0x24d4 <MDIO_voidSetPortDirection+0x74>
    2498:	2b 81       	ldd	r18, Y+3	; 0x03
    249a:	3c 81       	ldd	r19, Y+4	; 0x04
    249c:	22 30       	cpi	r18, 0x02	; 2
    249e:	31 05       	cpc	r19, r1
    24a0:	81 f0       	breq	.+32     	; 0x24c2 <MDIO_voidSetPortDirection+0x62>
    24a2:	8b 81       	ldd	r24, Y+3	; 0x03
    24a4:	9c 81       	ldd	r25, Y+4	; 0x04
    24a6:	83 30       	cpi	r24, 0x03	; 3
    24a8:	91 05       	cpc	r25, r1
    24aa:	81 f0       	breq	.+32     	; 0x24cc <MDIO_voidSetPortDirection+0x6c>
    24ac:	13 c0       	rjmp	.+38     	; 0x24d4 <MDIO_voidSetPortDirection+0x74>
			{
			case DIO_PORTA: DDRA_Register= A_u8PinDirection; break;
    24ae:	ea e3       	ldi	r30, 0x3A	; 58
    24b0:	f0 e0       	ldi	r31, 0x00	; 0
    24b2:	8a 81       	ldd	r24, Y+2	; 0x02
    24b4:	80 83       	st	Z, r24
    24b6:	0e c0       	rjmp	.+28     	; 0x24d4 <MDIO_voidSetPortDirection+0x74>
			case DIO_PORTB: DDRB_Register= A_u8PinDirection; break;
    24b8:	e7 e3       	ldi	r30, 0x37	; 55
    24ba:	f0 e0       	ldi	r31, 0x00	; 0
    24bc:	8a 81       	ldd	r24, Y+2	; 0x02
    24be:	80 83       	st	Z, r24
    24c0:	09 c0       	rjmp	.+18     	; 0x24d4 <MDIO_voidSetPortDirection+0x74>
			case DIO_PORTC: DDRC_Register= A_u8PinDirection; break;
    24c2:	e4 e3       	ldi	r30, 0x34	; 52
    24c4:	f0 e0       	ldi	r31, 0x00	; 0
    24c6:	8a 81       	ldd	r24, Y+2	; 0x02
    24c8:	80 83       	st	Z, r24
    24ca:	04 c0       	rjmp	.+8      	; 0x24d4 <MDIO_voidSetPortDirection+0x74>
			case DIO_PORTD: DDRD_Register= A_u8PinDirection; break;
    24cc:	e1 e3       	ldi	r30, 0x31	; 49
    24ce:	f0 e0       	ldi	r31, 0x00	; 0
    24d0:	8a 81       	ldd	r24, Y+2	; 0x02
    24d2:	80 83       	st	Z, r24
			}
}
    24d4:	0f 90       	pop	r0
    24d6:	0f 90       	pop	r0
    24d8:	0f 90       	pop	r0
    24da:	0f 90       	pop	r0
    24dc:	cf 91       	pop	r28
    24de:	df 91       	pop	r29
    24e0:	08 95       	ret

000024e2 <MDIO_voidSetPortValue>:

void MDIO_voidSetPortValue   (u8 A_u8PortNo  , u8 A_u8Value)
{
    24e2:	df 93       	push	r29
    24e4:	cf 93       	push	r28
    24e6:	00 d0       	rcall	.+0      	; 0x24e8 <MDIO_voidSetPortValue+0x6>
    24e8:	00 d0       	rcall	.+0      	; 0x24ea <MDIO_voidSetPortValue+0x8>
    24ea:	cd b7       	in	r28, 0x3d	; 61
    24ec:	de b7       	in	r29, 0x3e	; 62
    24ee:	89 83       	std	Y+1, r24	; 0x01
    24f0:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_u8PortNo)
    24f2:	89 81       	ldd	r24, Y+1	; 0x01
    24f4:	28 2f       	mov	r18, r24
    24f6:	30 e0       	ldi	r19, 0x00	; 0
    24f8:	3c 83       	std	Y+4, r19	; 0x04
    24fa:	2b 83       	std	Y+3, r18	; 0x03
    24fc:	8b 81       	ldd	r24, Y+3	; 0x03
    24fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2500:	81 30       	cpi	r24, 0x01	; 1
    2502:	91 05       	cpc	r25, r1
    2504:	d1 f0       	breq	.+52     	; 0x253a <MDIO_voidSetPortValue+0x58>
    2506:	2b 81       	ldd	r18, Y+3	; 0x03
    2508:	3c 81       	ldd	r19, Y+4	; 0x04
    250a:	22 30       	cpi	r18, 0x02	; 2
    250c:	31 05       	cpc	r19, r1
    250e:	2c f4       	brge	.+10     	; 0x251a <MDIO_voidSetPortValue+0x38>
    2510:	8b 81       	ldd	r24, Y+3	; 0x03
    2512:	9c 81       	ldd	r25, Y+4	; 0x04
    2514:	00 97       	sbiw	r24, 0x00	; 0
    2516:	61 f0       	breq	.+24     	; 0x2530 <MDIO_voidSetPortValue+0x4e>
    2518:	1e c0       	rjmp	.+60     	; 0x2556 <MDIO_voidSetPortValue+0x74>
    251a:	2b 81       	ldd	r18, Y+3	; 0x03
    251c:	3c 81       	ldd	r19, Y+4	; 0x04
    251e:	22 30       	cpi	r18, 0x02	; 2
    2520:	31 05       	cpc	r19, r1
    2522:	81 f0       	breq	.+32     	; 0x2544 <MDIO_voidSetPortValue+0x62>
    2524:	8b 81       	ldd	r24, Y+3	; 0x03
    2526:	9c 81       	ldd	r25, Y+4	; 0x04
    2528:	83 30       	cpi	r24, 0x03	; 3
    252a:	91 05       	cpc	r25, r1
    252c:	81 f0       	breq	.+32     	; 0x254e <MDIO_voidSetPortValue+0x6c>
    252e:	13 c0       	rjmp	.+38     	; 0x2556 <MDIO_voidSetPortValue+0x74>
			{
			case DIO_PORTA: PORTA= A_u8Value; break;
    2530:	eb e3       	ldi	r30, 0x3B	; 59
    2532:	f0 e0       	ldi	r31, 0x00	; 0
    2534:	8a 81       	ldd	r24, Y+2	; 0x02
    2536:	80 83       	st	Z, r24
    2538:	0e c0       	rjmp	.+28     	; 0x2556 <MDIO_voidSetPortValue+0x74>
			case DIO_PORTB: PORTB= A_u8Value; break;
    253a:	e8 e3       	ldi	r30, 0x38	; 56
    253c:	f0 e0       	ldi	r31, 0x00	; 0
    253e:	8a 81       	ldd	r24, Y+2	; 0x02
    2540:	80 83       	st	Z, r24
    2542:	09 c0       	rjmp	.+18     	; 0x2556 <MDIO_voidSetPortValue+0x74>
			case DIO_PORTC: PORTC= A_u8Value; break;
    2544:	e5 e3       	ldi	r30, 0x35	; 53
    2546:	f0 e0       	ldi	r31, 0x00	; 0
    2548:	8a 81       	ldd	r24, Y+2	; 0x02
    254a:	80 83       	st	Z, r24
    254c:	04 c0       	rjmp	.+8      	; 0x2556 <MDIO_voidSetPortValue+0x74>
			case DIO_PORTD: PORTD= A_u8Value; break;
    254e:	e2 e3       	ldi	r30, 0x32	; 50
    2550:	f0 e0       	ldi	r31, 0x00	; 0
    2552:	8a 81       	ldd	r24, Y+2	; 0x02
    2554:	80 83       	st	Z, r24
			}
}
    2556:	0f 90       	pop	r0
    2558:	0f 90       	pop	r0
    255a:	0f 90       	pop	r0
    255c:	0f 90       	pop	r0
    255e:	cf 91       	pop	r28
    2560:	df 91       	pop	r29
    2562:	08 95       	ret

00002564 <MDIO_voidClrPortValue>:

void MDIO_voidClrPortValue (u8 A_u8PortNo)
{
    2564:	df 93       	push	r29
    2566:	cf 93       	push	r28
    2568:	00 d0       	rcall	.+0      	; 0x256a <MDIO_voidClrPortValue+0x6>
    256a:	0f 92       	push	r0
    256c:	cd b7       	in	r28, 0x3d	; 61
    256e:	de b7       	in	r29, 0x3e	; 62
    2570:	89 83       	std	Y+1, r24	; 0x01
	switch (A_u8PortNo)
    2572:	89 81       	ldd	r24, Y+1	; 0x01
    2574:	28 2f       	mov	r18, r24
    2576:	30 e0       	ldi	r19, 0x00	; 0
    2578:	3b 83       	std	Y+3, r19	; 0x03
    257a:	2a 83       	std	Y+2, r18	; 0x02
    257c:	8a 81       	ldd	r24, Y+2	; 0x02
    257e:	9b 81       	ldd	r25, Y+3	; 0x03
    2580:	81 30       	cpi	r24, 0x01	; 1
    2582:	91 05       	cpc	r25, r1
    2584:	c9 f0       	breq	.+50     	; 0x25b8 <MDIO_voidClrPortValue+0x54>
    2586:	2a 81       	ldd	r18, Y+2	; 0x02
    2588:	3b 81       	ldd	r19, Y+3	; 0x03
    258a:	22 30       	cpi	r18, 0x02	; 2
    258c:	31 05       	cpc	r19, r1
    258e:	2c f4       	brge	.+10     	; 0x259a <MDIO_voidClrPortValue+0x36>
    2590:	8a 81       	ldd	r24, Y+2	; 0x02
    2592:	9b 81       	ldd	r25, Y+3	; 0x03
    2594:	00 97       	sbiw	r24, 0x00	; 0
    2596:	61 f0       	breq	.+24     	; 0x25b0 <MDIO_voidClrPortValue+0x4c>
    2598:	1a c0       	rjmp	.+52     	; 0x25ce <MDIO_voidClrPortValue+0x6a>
    259a:	2a 81       	ldd	r18, Y+2	; 0x02
    259c:	3b 81       	ldd	r19, Y+3	; 0x03
    259e:	22 30       	cpi	r18, 0x02	; 2
    25a0:	31 05       	cpc	r19, r1
    25a2:	71 f0       	breq	.+28     	; 0x25c0 <MDIO_voidClrPortValue+0x5c>
    25a4:	8a 81       	ldd	r24, Y+2	; 0x02
    25a6:	9b 81       	ldd	r25, Y+3	; 0x03
    25a8:	83 30       	cpi	r24, 0x03	; 3
    25aa:	91 05       	cpc	r25, r1
    25ac:	69 f0       	breq	.+26     	; 0x25c8 <MDIO_voidClrPortValue+0x64>
    25ae:	0f c0       	rjmp	.+30     	; 0x25ce <MDIO_voidClrPortValue+0x6a>
			{
			case DIO_PORTA: PORTA= DIO_PORT_LOW; break;
    25b0:	eb e3       	ldi	r30, 0x3B	; 59
    25b2:	f0 e0       	ldi	r31, 0x00	; 0
    25b4:	10 82       	st	Z, r1
    25b6:	0b c0       	rjmp	.+22     	; 0x25ce <MDIO_voidClrPortValue+0x6a>
			case DIO_PORTB: PORTB= DIO_PORT_LOW; break;
    25b8:	e8 e3       	ldi	r30, 0x38	; 56
    25ba:	f0 e0       	ldi	r31, 0x00	; 0
    25bc:	10 82       	st	Z, r1
    25be:	07 c0       	rjmp	.+14     	; 0x25ce <MDIO_voidClrPortValue+0x6a>
			case DIO_PORTC: PORTC= DIO_PORT_LOW; break;
    25c0:	e5 e3       	ldi	r30, 0x35	; 53
    25c2:	f0 e0       	ldi	r31, 0x00	; 0
    25c4:	10 82       	st	Z, r1
    25c6:	03 c0       	rjmp	.+6      	; 0x25ce <MDIO_voidClrPortValue+0x6a>
			case DIO_PORTD: PORTD= DIO_PORT_LOW; break;
    25c8:	e2 e3       	ldi	r30, 0x32	; 50
    25ca:	f0 e0       	ldi	r31, 0x00	; 0
    25cc:	10 82       	st	Z, r1
			}
}
    25ce:	0f 90       	pop	r0
    25d0:	0f 90       	pop	r0
    25d2:	0f 90       	pop	r0
    25d4:	cf 91       	pop	r28
    25d6:	df 91       	pop	r29
    25d8:	08 95       	ret

000025da <MDIO_voidGetPortValue>:

void MDIO_voidGetPortValue (u8 A_u8PortNo  , u8 * A_PtrData )
{
    25da:	df 93       	push	r29
    25dc:	cf 93       	push	r28
    25de:	00 d0       	rcall	.+0      	; 0x25e0 <MDIO_voidGetPortValue+0x6>
    25e0:	00 d0       	rcall	.+0      	; 0x25e2 <MDIO_voidGetPortValue+0x8>
    25e2:	0f 92       	push	r0
    25e4:	cd b7       	in	r28, 0x3d	; 61
    25e6:	de b7       	in	r29, 0x3e	; 62
    25e8:	89 83       	std	Y+1, r24	; 0x01
    25ea:	7b 83       	std	Y+3, r23	; 0x03
    25ec:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_u8PortNo)
    25ee:	89 81       	ldd	r24, Y+1	; 0x01
    25f0:	28 2f       	mov	r18, r24
    25f2:	30 e0       	ldi	r19, 0x00	; 0
    25f4:	3d 83       	std	Y+5, r19	; 0x05
    25f6:	2c 83       	std	Y+4, r18	; 0x04
    25f8:	8c 81       	ldd	r24, Y+4	; 0x04
    25fa:	9d 81       	ldd	r25, Y+5	; 0x05
    25fc:	81 30       	cpi	r24, 0x01	; 1
    25fe:	91 05       	cpc	r25, r1
    2600:	e1 f0       	breq	.+56     	; 0x263a <MDIO_voidGetPortValue+0x60>
    2602:	2c 81       	ldd	r18, Y+4	; 0x04
    2604:	3d 81       	ldd	r19, Y+5	; 0x05
    2606:	22 30       	cpi	r18, 0x02	; 2
    2608:	31 05       	cpc	r19, r1
    260a:	2c f4       	brge	.+10     	; 0x2616 <MDIO_voidGetPortValue+0x3c>
    260c:	8c 81       	ldd	r24, Y+4	; 0x04
    260e:	9d 81       	ldd	r25, Y+5	; 0x05
    2610:	00 97       	sbiw	r24, 0x00	; 0
    2612:	61 f0       	breq	.+24     	; 0x262c <MDIO_voidGetPortValue+0x52>
    2614:	26 c0       	rjmp	.+76     	; 0x2662 <MDIO_voidGetPortValue+0x88>
    2616:	2c 81       	ldd	r18, Y+4	; 0x04
    2618:	3d 81       	ldd	r19, Y+5	; 0x05
    261a:	22 30       	cpi	r18, 0x02	; 2
    261c:	31 05       	cpc	r19, r1
    261e:	a1 f0       	breq	.+40     	; 0x2648 <MDIO_voidGetPortValue+0x6e>
    2620:	8c 81       	ldd	r24, Y+4	; 0x04
    2622:	9d 81       	ldd	r25, Y+5	; 0x05
    2624:	83 30       	cpi	r24, 0x03	; 3
    2626:	91 05       	cpc	r25, r1
    2628:	b1 f0       	breq	.+44     	; 0x2656 <MDIO_voidGetPortValue+0x7c>
    262a:	1b c0       	rjmp	.+54     	; 0x2662 <MDIO_voidGetPortValue+0x88>
			{
			case DIO_PORTA: *A_PtrData= DIO_PINA; break;
    262c:	e9 e3       	ldi	r30, 0x39	; 57
    262e:	f0 e0       	ldi	r31, 0x00	; 0
    2630:	80 81       	ld	r24, Z
    2632:	ea 81       	ldd	r30, Y+2	; 0x02
    2634:	fb 81       	ldd	r31, Y+3	; 0x03
    2636:	80 83       	st	Z, r24
    2638:	14 c0       	rjmp	.+40     	; 0x2662 <MDIO_voidGetPortValue+0x88>
			case DIO_PORTB: *A_PtrData= DIO_PINB; break;
    263a:	e6 e3       	ldi	r30, 0x36	; 54
    263c:	f0 e0       	ldi	r31, 0x00	; 0
    263e:	80 81       	ld	r24, Z
    2640:	ea 81       	ldd	r30, Y+2	; 0x02
    2642:	fb 81       	ldd	r31, Y+3	; 0x03
    2644:	80 83       	st	Z, r24
    2646:	0d c0       	rjmp	.+26     	; 0x2662 <MDIO_voidGetPortValue+0x88>
			case DIO_PORTC: *A_PtrData= DIO_PINC; break;
    2648:	e3 e3       	ldi	r30, 0x33	; 51
    264a:	f0 e0       	ldi	r31, 0x00	; 0
    264c:	80 81       	ld	r24, Z
    264e:	ea 81       	ldd	r30, Y+2	; 0x02
    2650:	fb 81       	ldd	r31, Y+3	; 0x03
    2652:	80 83       	st	Z, r24
    2654:	06 c0       	rjmp	.+12     	; 0x2662 <MDIO_voidGetPortValue+0x88>
			case DIO_PORTD: *A_PtrData= DIO_PIND; break;
    2656:	e0 e3       	ldi	r30, 0x30	; 48
    2658:	f0 e0       	ldi	r31, 0x00	; 0
    265a:	80 81       	ld	r24, Z
    265c:	ea 81       	ldd	r30, Y+2	; 0x02
    265e:	fb 81       	ldd	r31, Y+3	; 0x03
    2660:	80 83       	st	Z, r24
			}
}
    2662:	0f 90       	pop	r0
    2664:	0f 90       	pop	r0
    2666:	0f 90       	pop	r0
    2668:	0f 90       	pop	r0
    266a:	0f 90       	pop	r0
    266c:	cf 91       	pop	r28
    266e:	df 91       	pop	r29
    2670:	08 95       	ret

00002672 <MDIO_voidTogglePortValue>:

void MDIO_voidTogglePortValue (u8 A_u8PortNo)
{
    2672:	df 93       	push	r29
    2674:	cf 93       	push	r28
    2676:	00 d0       	rcall	.+0      	; 0x2678 <MDIO_voidTogglePortValue+0x6>
    2678:	0f 92       	push	r0
    267a:	cd b7       	in	r28, 0x3d	; 61
    267c:	de b7       	in	r29, 0x3e	; 62
    267e:	89 83       	std	Y+1, r24	; 0x01
		switch (A_u8PortNo)
    2680:	89 81       	ldd	r24, Y+1	; 0x01
    2682:	28 2f       	mov	r18, r24
    2684:	30 e0       	ldi	r19, 0x00	; 0
    2686:	3b 83       	std	Y+3, r19	; 0x03
    2688:	2a 83       	std	Y+2, r18	; 0x02
    268a:	8a 81       	ldd	r24, Y+2	; 0x02
    268c:	9b 81       	ldd	r25, Y+3	; 0x03
    268e:	81 30       	cpi	r24, 0x01	; 1
    2690:	91 05       	cpc	r25, r1
    2692:	e9 f0       	breq	.+58     	; 0x26ce <MDIO_voidTogglePortValue+0x5c>
    2694:	2a 81       	ldd	r18, Y+2	; 0x02
    2696:	3b 81       	ldd	r19, Y+3	; 0x03
    2698:	22 30       	cpi	r18, 0x02	; 2
    269a:	31 05       	cpc	r19, r1
    269c:	2c f4       	brge	.+10     	; 0x26a8 <MDIO_voidTogglePortValue+0x36>
    269e:	8a 81       	ldd	r24, Y+2	; 0x02
    26a0:	9b 81       	ldd	r25, Y+3	; 0x03
    26a2:	00 97       	sbiw	r24, 0x00	; 0
    26a4:	61 f0       	breq	.+24     	; 0x26be <MDIO_voidTogglePortValue+0x4c>
    26a6:	2a c0       	rjmp	.+84     	; 0x26fc <MDIO_voidTogglePortValue+0x8a>
    26a8:	2a 81       	ldd	r18, Y+2	; 0x02
    26aa:	3b 81       	ldd	r19, Y+3	; 0x03
    26ac:	22 30       	cpi	r18, 0x02	; 2
    26ae:	31 05       	cpc	r19, r1
    26b0:	b1 f0       	breq	.+44     	; 0x26de <MDIO_voidTogglePortValue+0x6c>
    26b2:	8a 81       	ldd	r24, Y+2	; 0x02
    26b4:	9b 81       	ldd	r25, Y+3	; 0x03
    26b6:	83 30       	cpi	r24, 0x03	; 3
    26b8:	91 05       	cpc	r25, r1
    26ba:	c9 f0       	breq	.+50     	; 0x26ee <MDIO_voidTogglePortValue+0x7c>
    26bc:	1f c0       	rjmp	.+62     	; 0x26fc <MDIO_voidTogglePortValue+0x8a>
			{
			case DIO_PORTA: PORTA =~ PORTA; break;
    26be:	ab e3       	ldi	r26, 0x3B	; 59
    26c0:	b0 e0       	ldi	r27, 0x00	; 0
    26c2:	eb e3       	ldi	r30, 0x3B	; 59
    26c4:	f0 e0       	ldi	r31, 0x00	; 0
    26c6:	80 81       	ld	r24, Z
    26c8:	80 95       	com	r24
    26ca:	8c 93       	st	X, r24
    26cc:	17 c0       	rjmp	.+46     	; 0x26fc <MDIO_voidTogglePortValue+0x8a>
			case DIO_PORTB: PORTB =~ PORTB; break;
    26ce:	a8 e3       	ldi	r26, 0x38	; 56
    26d0:	b0 e0       	ldi	r27, 0x00	; 0
    26d2:	e8 e3       	ldi	r30, 0x38	; 56
    26d4:	f0 e0       	ldi	r31, 0x00	; 0
    26d6:	80 81       	ld	r24, Z
    26d8:	80 95       	com	r24
    26da:	8c 93       	st	X, r24
    26dc:	0f c0       	rjmp	.+30     	; 0x26fc <MDIO_voidTogglePortValue+0x8a>
			case DIO_PORTC: PORTC =~ PORTC; break;
    26de:	a5 e3       	ldi	r26, 0x35	; 53
    26e0:	b0 e0       	ldi	r27, 0x00	; 0
    26e2:	e5 e3       	ldi	r30, 0x35	; 53
    26e4:	f0 e0       	ldi	r31, 0x00	; 0
    26e6:	80 81       	ld	r24, Z
    26e8:	80 95       	com	r24
    26ea:	8c 93       	st	X, r24
    26ec:	07 c0       	rjmp	.+14     	; 0x26fc <MDIO_voidTogglePortValue+0x8a>
			case DIO_PORTD: PORTD =~ PORTD; break;
    26ee:	a2 e3       	ldi	r26, 0x32	; 50
    26f0:	b0 e0       	ldi	r27, 0x00	; 0
    26f2:	e2 e3       	ldi	r30, 0x32	; 50
    26f4:	f0 e0       	ldi	r31, 0x00	; 0
    26f6:	80 81       	ld	r24, Z
    26f8:	80 95       	com	r24
    26fa:	8c 93       	st	X, r24
			}
}
    26fc:	0f 90       	pop	r0
    26fe:	0f 90       	pop	r0
    2700:	0f 90       	pop	r0
    2702:	cf 91       	pop	r28
    2704:	df 91       	pop	r29
    2706:	08 95       	ret

00002708 <MDIO_voidWriteHighNibbles>:



void MDIO_voidWriteHighNibbles ( u8 A_u8PORT , u8 A_u8value  )
{
    2708:	df 93       	push	r29
    270a:	cf 93       	push	r28
    270c:	00 d0       	rcall	.+0      	; 0x270e <MDIO_voidWriteHighNibbles+0x6>
    270e:	00 d0       	rcall	.+0      	; 0x2710 <MDIO_voidWriteHighNibbles+0x8>
    2710:	cd b7       	in	r28, 0x3d	; 61
    2712:	de b7       	in	r29, 0x3e	; 62
    2714:	89 83       	std	Y+1, r24	; 0x01
    2716:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8PORT)
    2718:	89 81       	ldd	r24, Y+1	; 0x01
    271a:	28 2f       	mov	r18, r24
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	3c 83       	std	Y+4, r19	; 0x04
    2720:	2b 83       	std	Y+3, r18	; 0x03
    2722:	8b 81       	ldd	r24, Y+3	; 0x03
    2724:	9c 81       	ldd	r25, Y+4	; 0x04
    2726:	81 30       	cpi	r24, 0x01	; 1
    2728:	91 05       	cpc	r25, r1
    272a:	29 f1       	breq	.+74     	; 0x2776 <MDIO_voidWriteHighNibbles+0x6e>
    272c:	2b 81       	ldd	r18, Y+3	; 0x03
    272e:	3c 81       	ldd	r19, Y+4	; 0x04
    2730:	22 30       	cpi	r18, 0x02	; 2
    2732:	31 05       	cpc	r19, r1
    2734:	2c f4       	brge	.+10     	; 0x2740 <MDIO_voidWriteHighNibbles+0x38>
    2736:	8b 81       	ldd	r24, Y+3	; 0x03
    2738:	9c 81       	ldd	r25, Y+4	; 0x04
    273a:	00 97       	sbiw	r24, 0x00	; 0
    273c:	61 f0       	breq	.+24     	; 0x2756 <MDIO_voidWriteHighNibbles+0x4e>
    273e:	4a c0       	rjmp	.+148    	; 0x27d4 <MDIO_voidWriteHighNibbles+0xcc>
    2740:	2b 81       	ldd	r18, Y+3	; 0x03
    2742:	3c 81       	ldd	r19, Y+4	; 0x04
    2744:	22 30       	cpi	r18, 0x02	; 2
    2746:	31 05       	cpc	r19, r1
    2748:	31 f1       	breq	.+76     	; 0x2796 <MDIO_voidWriteHighNibbles+0x8e>
    274a:	8b 81       	ldd	r24, Y+3	; 0x03
    274c:	9c 81       	ldd	r25, Y+4	; 0x04
    274e:	83 30       	cpi	r24, 0x03	; 3
    2750:	91 05       	cpc	r25, r1
    2752:	89 f1       	breq	.+98     	; 0x27b6 <MDIO_voidWriteHighNibbles+0xae>
    2754:	3f c0       	rjmp	.+126    	; 0x27d4 <MDIO_voidWriteHighNibbles+0xcc>
		{
		case DIO_PORTA :
			PORTA&=0x0f;                   // make sure the high bits = 0000
    2756:	ab e3       	ldi	r26, 0x3B	; 59
    2758:	b0 e0       	ldi	r27, 0x00	; 0
    275a:	eb e3       	ldi	r30, 0x3B	; 59
    275c:	f0 e0       	ldi	r31, 0x00	; 0
    275e:	80 81       	ld	r24, Z
    2760:	8f 70       	andi	r24, 0x0F	; 15
    2762:	8c 93       	st	X, r24
			PORTA|=A_u8value;			//Set only the high nibble of the port A by the given value
    2764:	ab e3       	ldi	r26, 0x3B	; 59
    2766:	b0 e0       	ldi	r27, 0x00	; 0
    2768:	eb e3       	ldi	r30, 0x3B	; 59
    276a:	f0 e0       	ldi	r31, 0x00	; 0
    276c:	90 81       	ld	r25, Z
    276e:	8a 81       	ldd	r24, Y+2	; 0x02
    2770:	89 2b       	or	r24, r25
    2772:	8c 93       	st	X, r24
    2774:	2f c0       	rjmp	.+94     	; 0x27d4 <MDIO_voidWriteHighNibbles+0xcc>
			break ;
		case DIO_PORTB:
			PORTB&=0x0f;                 //Set only the high nibble of the port B by the given value
    2776:	a8 e3       	ldi	r26, 0x38	; 56
    2778:	b0 e0       	ldi	r27, 0x00	; 0
    277a:	e8 e3       	ldi	r30, 0x38	; 56
    277c:	f0 e0       	ldi	r31, 0x00	; 0
    277e:	80 81       	ld	r24, Z
    2780:	8f 70       	andi	r24, 0x0F	; 15
    2782:	8c 93       	st	X, r24
			PORTB|=A_u8value;
    2784:	a8 e3       	ldi	r26, 0x38	; 56
    2786:	b0 e0       	ldi	r27, 0x00	; 0
    2788:	e8 e3       	ldi	r30, 0x38	; 56
    278a:	f0 e0       	ldi	r31, 0x00	; 0
    278c:	90 81       	ld	r25, Z
    278e:	8a 81       	ldd	r24, Y+2	; 0x02
    2790:	89 2b       	or	r24, r25
    2792:	8c 93       	st	X, r24
    2794:	1f c0       	rjmp	.+62     	; 0x27d4 <MDIO_voidWriteHighNibbles+0xcc>
			break ;
		case DIO_PORTC :
			PORTC&=0x0f;                 //Set only the high nibble of the port C by the given value
    2796:	a5 e3       	ldi	r26, 0x35	; 53
    2798:	b0 e0       	ldi	r27, 0x00	; 0
    279a:	e5 e3       	ldi	r30, 0x35	; 53
    279c:	f0 e0       	ldi	r31, 0x00	; 0
    279e:	80 81       	ld	r24, Z
    27a0:	8f 70       	andi	r24, 0x0F	; 15
    27a2:	8c 93       	st	X, r24
			PORTC|=A_u8value;
    27a4:	a5 e3       	ldi	r26, 0x35	; 53
    27a6:	b0 e0       	ldi	r27, 0x00	; 0
    27a8:	e5 e3       	ldi	r30, 0x35	; 53
    27aa:	f0 e0       	ldi	r31, 0x00	; 0
    27ac:	90 81       	ld	r25, Z
    27ae:	8a 81       	ldd	r24, Y+2	; 0x02
    27b0:	89 2b       	or	r24, r25
    27b2:	8c 93       	st	X, r24
    27b4:	0f c0       	rjmp	.+30     	; 0x27d4 <MDIO_voidWriteHighNibbles+0xcc>
			break ;
		case DIO_PORTD:
			PORTD&=0x0f;                 //Set only the high nibble of the port D by the given value
    27b6:	a2 e3       	ldi	r26, 0x32	; 50
    27b8:	b0 e0       	ldi	r27, 0x00	; 0
    27ba:	e2 e3       	ldi	r30, 0x32	; 50
    27bc:	f0 e0       	ldi	r31, 0x00	; 0
    27be:	80 81       	ld	r24, Z
    27c0:	8f 70       	andi	r24, 0x0F	; 15
    27c2:	8c 93       	st	X, r24
			PORTD|=A_u8value;
    27c4:	a2 e3       	ldi	r26, 0x32	; 50
    27c6:	b0 e0       	ldi	r27, 0x00	; 0
    27c8:	e2 e3       	ldi	r30, 0x32	; 50
    27ca:	f0 e0       	ldi	r31, 0x00	; 0
    27cc:	90 81       	ld	r25, Z
    27ce:	8a 81       	ldd	r24, Y+2	; 0x02
    27d0:	89 2b       	or	r24, r25
    27d2:	8c 93       	st	X, r24
			break ;
		}
}
    27d4:	0f 90       	pop	r0
    27d6:	0f 90       	pop	r0
    27d8:	0f 90       	pop	r0
    27da:	0f 90       	pop	r0
    27dc:	cf 91       	pop	r28
    27de:	df 91       	pop	r29
    27e0:	08 95       	ret

000027e2 <MDIO_voidWriteLowNibbles>:
void MDIO_voidWriteLowNibbles  ( u8 A_u8PORT , u8 A_u8value )
{
    27e2:	df 93       	push	r29
    27e4:	cf 93       	push	r28
    27e6:	00 d0       	rcall	.+0      	; 0x27e8 <MDIO_voidWriteLowNibbles+0x6>
    27e8:	00 d0       	rcall	.+0      	; 0x27ea <MDIO_voidWriteLowNibbles+0x8>
    27ea:	cd b7       	in	r28, 0x3d	; 61
    27ec:	de b7       	in	r29, 0x3e	; 62
    27ee:	89 83       	std	Y+1, r24	; 0x01
    27f0:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8PORT)
    27f2:	89 81       	ldd	r24, Y+1	; 0x01
    27f4:	28 2f       	mov	r18, r24
    27f6:	30 e0       	ldi	r19, 0x00	; 0
    27f8:	3c 83       	std	Y+4, r19	; 0x04
    27fa:	2b 83       	std	Y+3, r18	; 0x03
    27fc:	8b 81       	ldd	r24, Y+3	; 0x03
    27fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2800:	81 30       	cpi	r24, 0x01	; 1
    2802:	91 05       	cpc	r25, r1
    2804:	29 f1       	breq	.+74     	; 0x2850 <MDIO_voidWriteLowNibbles+0x6e>
    2806:	2b 81       	ldd	r18, Y+3	; 0x03
    2808:	3c 81       	ldd	r19, Y+4	; 0x04
    280a:	22 30       	cpi	r18, 0x02	; 2
    280c:	31 05       	cpc	r19, r1
    280e:	2c f4       	brge	.+10     	; 0x281a <MDIO_voidWriteLowNibbles+0x38>
    2810:	8b 81       	ldd	r24, Y+3	; 0x03
    2812:	9c 81       	ldd	r25, Y+4	; 0x04
    2814:	00 97       	sbiw	r24, 0x00	; 0
    2816:	61 f0       	breq	.+24     	; 0x2830 <MDIO_voidWriteLowNibbles+0x4e>
    2818:	4a c0       	rjmp	.+148    	; 0x28ae <MDIO_voidWriteLowNibbles+0xcc>
    281a:	2b 81       	ldd	r18, Y+3	; 0x03
    281c:	3c 81       	ldd	r19, Y+4	; 0x04
    281e:	22 30       	cpi	r18, 0x02	; 2
    2820:	31 05       	cpc	r19, r1
    2822:	31 f1       	breq	.+76     	; 0x2870 <MDIO_voidWriteLowNibbles+0x8e>
    2824:	8b 81       	ldd	r24, Y+3	; 0x03
    2826:	9c 81       	ldd	r25, Y+4	; 0x04
    2828:	83 30       	cpi	r24, 0x03	; 3
    282a:	91 05       	cpc	r25, r1
    282c:	89 f1       	breq	.+98     	; 0x2890 <MDIO_voidWriteLowNibbles+0xae>
    282e:	3f c0       	rjmp	.+126    	; 0x28ae <MDIO_voidWriteLowNibbles+0xcc>
		{
		case DIO_PORTA :
			PORTA&=0xf0;                   // make sure the low bits = 0000
    2830:	ab e3       	ldi	r26, 0x3B	; 59
    2832:	b0 e0       	ldi	r27, 0x00	; 0
    2834:	eb e3       	ldi	r30, 0x3B	; 59
    2836:	f0 e0       	ldi	r31, 0x00	; 0
    2838:	80 81       	ld	r24, Z
    283a:	80 7f       	andi	r24, 0xF0	; 240
    283c:	8c 93       	st	X, r24
			PORTA|=A_u8value;			//Set only the low nibble of the port A by the given value
    283e:	ab e3       	ldi	r26, 0x3B	; 59
    2840:	b0 e0       	ldi	r27, 0x00	; 0
    2842:	eb e3       	ldi	r30, 0x3B	; 59
    2844:	f0 e0       	ldi	r31, 0x00	; 0
    2846:	90 81       	ld	r25, Z
    2848:	8a 81       	ldd	r24, Y+2	; 0x02
    284a:	89 2b       	or	r24, r25
    284c:	8c 93       	st	X, r24
    284e:	2f c0       	rjmp	.+94     	; 0x28ae <MDIO_voidWriteLowNibbles+0xcc>
			break ;
		case DIO_PORTB:
			PORTB&=0xf0;                 //Set only the low nibble of the port B by the given value
    2850:	a8 e3       	ldi	r26, 0x38	; 56
    2852:	b0 e0       	ldi	r27, 0x00	; 0
    2854:	e8 e3       	ldi	r30, 0x38	; 56
    2856:	f0 e0       	ldi	r31, 0x00	; 0
    2858:	80 81       	ld	r24, Z
    285a:	80 7f       	andi	r24, 0xF0	; 240
    285c:	8c 93       	st	X, r24
			PORTB|=A_u8value;
    285e:	a8 e3       	ldi	r26, 0x38	; 56
    2860:	b0 e0       	ldi	r27, 0x00	; 0
    2862:	e8 e3       	ldi	r30, 0x38	; 56
    2864:	f0 e0       	ldi	r31, 0x00	; 0
    2866:	90 81       	ld	r25, Z
    2868:	8a 81       	ldd	r24, Y+2	; 0x02
    286a:	89 2b       	or	r24, r25
    286c:	8c 93       	st	X, r24
    286e:	1f c0       	rjmp	.+62     	; 0x28ae <MDIO_voidWriteLowNibbles+0xcc>
			break ;
		case DIO_PORTC :
			PORTC&=0xf0;                 //Set only the low nibble of the port C by the given value
    2870:	a5 e3       	ldi	r26, 0x35	; 53
    2872:	b0 e0       	ldi	r27, 0x00	; 0
    2874:	e5 e3       	ldi	r30, 0x35	; 53
    2876:	f0 e0       	ldi	r31, 0x00	; 0
    2878:	80 81       	ld	r24, Z
    287a:	80 7f       	andi	r24, 0xF0	; 240
    287c:	8c 93       	st	X, r24
			PORTC|=A_u8value;
    287e:	a5 e3       	ldi	r26, 0x35	; 53
    2880:	b0 e0       	ldi	r27, 0x00	; 0
    2882:	e5 e3       	ldi	r30, 0x35	; 53
    2884:	f0 e0       	ldi	r31, 0x00	; 0
    2886:	90 81       	ld	r25, Z
    2888:	8a 81       	ldd	r24, Y+2	; 0x02
    288a:	89 2b       	or	r24, r25
    288c:	8c 93       	st	X, r24
    288e:	0f c0       	rjmp	.+30     	; 0x28ae <MDIO_voidWriteLowNibbles+0xcc>
			break ;
		case DIO_PORTD:
			PORTD&=0xf0;                 //Set only the low nibble of the port D by the given value
    2890:	a2 e3       	ldi	r26, 0x32	; 50
    2892:	b0 e0       	ldi	r27, 0x00	; 0
    2894:	e2 e3       	ldi	r30, 0x32	; 50
    2896:	f0 e0       	ldi	r31, 0x00	; 0
    2898:	80 81       	ld	r24, Z
    289a:	80 7f       	andi	r24, 0xF0	; 240
    289c:	8c 93       	st	X, r24
			PORTD|=A_u8value;
    289e:	a2 e3       	ldi	r26, 0x32	; 50
    28a0:	b0 e0       	ldi	r27, 0x00	; 0
    28a2:	e2 e3       	ldi	r30, 0x32	; 50
    28a4:	f0 e0       	ldi	r31, 0x00	; 0
    28a6:	90 81       	ld	r25, Z
    28a8:	8a 81       	ldd	r24, Y+2	; 0x02
    28aa:	89 2b       	or	r24, r25
    28ac:	8c 93       	st	X, r24
			break ;
		}
}
    28ae:	0f 90       	pop	r0
    28b0:	0f 90       	pop	r0
    28b2:	0f 90       	pop	r0
    28b4:	0f 90       	pop	r0
    28b6:	cf 91       	pop	r28
    28b8:	df 91       	pop	r29
    28ba:	08 95       	ret

000028bc <HKPD_voidInitialization>:
#include "KPD_interface.h"
#include "KPD_config.h"

#include <avr/delay.h>
void HKPD_voidInitialization(void)
{
    28bc:	df 93       	push	r29
    28be:	cf 93       	push	r28
    28c0:	cd b7       	in	r28, 0x3d	; 61
    28c2:	de b7       	in	r29, 0x3e	; 62
	/*******************1- Connect pullup of the first four pins "ROW"*************************************/
	MDIO_voidSetPinDirection( KPD_PORT, KPD_ROW_PIN0, DIO_PIN_INPUT);
    28c4:	83 e0       	ldi	r24, 0x03	; 3
    28c6:	60 e0       	ldi	r22, 0x00	; 0
    28c8:	40 e0       	ldi	r20, 0x00	; 0
    28ca:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection( KPD_PORT, KPD_ROW_PIN1, DIO_PIN_INPUT);
    28ce:	83 e0       	ldi	r24, 0x03	; 3
    28d0:	61 e0       	ldi	r22, 0x01	; 1
    28d2:	40 e0       	ldi	r20, 0x00	; 0
    28d4:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection( KPD_PORT, KPD_ROW_PIN2, DIO_PIN_INPUT);
    28d8:	83 e0       	ldi	r24, 0x03	; 3
    28da:	62 e0       	ldi	r22, 0x02	; 2
    28dc:	40 e0       	ldi	r20, 0x00	; 0
    28de:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection( KPD_PORT, KPD_ROW_PIN3, DIO_PIN_INPUT);
    28e2:	83 e0       	ldi	r24, 0x03	; 3
    28e4:	63 e0       	ldi	r22, 0x03	; 3
    28e6:	40 e0       	ldi	r20, 0x00	; 0
    28e8:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <MDIO_voidSetPinDirection>

	MDIO_voidSetPinValue( KPD_PORT, KPD_ROW_PIN0, DIO_PIN_HIGH);
    28ec:	83 e0       	ldi	r24, 0x03	; 3
    28ee:	60 e0       	ldi	r22, 0x00	; 0
    28f0:	41 e0       	ldi	r20, 0x01	; 1
    28f2:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue( KPD_PORT, KPD_ROW_PIN1, DIO_PIN_HIGH);
    28f6:	83 e0       	ldi	r24, 0x03	; 3
    28f8:	61 e0       	ldi	r22, 0x01	; 1
    28fa:	41 e0       	ldi	r20, 0x01	; 1
    28fc:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue( KPD_PORT, KPD_ROW_PIN2, DIO_PIN_HIGH);
    2900:	83 e0       	ldi	r24, 0x03	; 3
    2902:	62 e0       	ldi	r22, 0x02	; 2
    2904:	41 e0       	ldi	r20, 0x01	; 1
    2906:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue( KPD_PORT, KPD_ROW_PIN3, DIO_PIN_HIGH);
    290a:	83 e0       	ldi	r24, 0x03	; 3
    290c:	63 e0       	ldi	r22, 0x03	; 3
    290e:	41 e0       	ldi	r20, 0x01	; 1
    2910:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <MDIO_voidSetPinValue>

	/*********************2- Make the columns pins as an output pin****************************************/ 
	MDIO_voidSetPinDirection( KPD_PORT, KPD_COL_PIN4, DIO_PIN_OUTPUT);
    2914:	83 e0       	ldi	r24, 0x03	; 3
    2916:	64 e0       	ldi	r22, 0x04	; 4
    2918:	41 e0       	ldi	r20, 0x01	; 1
    291a:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection( KPD_PORT, KPD_COL_PIN5, DIO_PIN_OUTPUT);
    291e:	83 e0       	ldi	r24, 0x03	; 3
    2920:	65 e0       	ldi	r22, 0x05	; 5
    2922:	41 e0       	ldi	r20, 0x01	; 1
    2924:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection( KPD_PORT, KPD_COL_PIN6, DIO_PIN_OUTPUT);
    2928:	83 e0       	ldi	r24, 0x03	; 3
    292a:	66 e0       	ldi	r22, 0x06	; 6
    292c:	41 e0       	ldi	r20, 0x01	; 1
    292e:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection( KPD_PORT, KPD_COL_PIN7, DIO_PIN_OUTPUT);
    2932:	83 e0       	ldi	r24, 0x03	; 3
    2934:	67 e0       	ldi	r22, 0x07	; 7
    2936:	41 e0       	ldi	r20, 0x01	; 1
    2938:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <MDIO_voidSetPinDirection>

	MDIO_voidSetPinValue( KPD_PORT, KPD_COL_PIN4, DIO_PIN_HIGH);
    293c:	83 e0       	ldi	r24, 0x03	; 3
    293e:	64 e0       	ldi	r22, 0x04	; 4
    2940:	41 e0       	ldi	r20, 0x01	; 1
    2942:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue( KPD_PORT, KPD_COL_PIN5, DIO_PIN_HIGH);
    2946:	83 e0       	ldi	r24, 0x03	; 3
    2948:	65 e0       	ldi	r22, 0x05	; 5
    294a:	41 e0       	ldi	r20, 0x01	; 1
    294c:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue( KPD_PORT, KPD_COL_PIN6, DIO_PIN_HIGH);
    2950:	83 e0       	ldi	r24, 0x03	; 3
    2952:	66 e0       	ldi	r22, 0x06	; 6
    2954:	41 e0       	ldi	r20, 0x01	; 1
    2956:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue( KPD_PORT, KPD_COL_PIN7, DIO_PIN_HIGH);
    295a:	83 e0       	ldi	r24, 0x03	; 3
    295c:	67 e0       	ldi	r22, 0x07	; 7
    295e:	41 e0       	ldi	r20, 0x01	; 1
    2960:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <MDIO_voidSetPinValue>

}
    2964:	cf 91       	pop	r28
    2966:	df 91       	pop	r29
    2968:	08 95       	ret

0000296a <HKPD_u8GetPressedKey>:

u8 HKPD_u8GetPressedKey(void)
{
    296a:	df 93       	push	r29
    296c:	cf 93       	push	r28
    296e:	cd b7       	in	r28, 0x3d	; 61
    2970:	de b7       	in	r29, 0x3e	; 62
    2972:	62 97       	sbiw	r28, 0x12	; 18
    2974:	0f b6       	in	r0, 0x3f	; 63
    2976:	f8 94       	cli
    2978:	de bf       	out	0x3e, r29	; 62
    297a:	0f be       	out	0x3f, r0	; 63
    297c:	cd bf       	out	0x3d, r28	; 61
	u8 LOC_u8ReturnDatat= NOT_PRESSED;
    297e:	8f ef       	ldi	r24, 0xFF	; 255
    2980:	89 8b       	std	Y+17, r24	; 0x11
	u8 LOC_u8GetPressed;
	u8 LOC_u8Col;
	u8 LOC_u8Row;

	for(LOC_u8Col=0+ KPD_COL_PIN4; LOC_u8Col<1+ KPD_COL_PIN7; LOC_u8Col++)
    2982:	84 e0       	ldi	r24, 0x04	; 4
    2984:	88 8b       	std	Y+16, r24	; 0x10
    2986:	c9 c0       	rjmp	.+402    	; 0x2b1a <HKPD_u8GetPressedKey+0x1b0>
	{
		MDIO_voidSetPinValue(KPD_PORT, LOC_u8Col, DIO_PIN_LOW);
    2988:	83 e0       	ldi	r24, 0x03	; 3
    298a:	68 89       	ldd	r22, Y+16	; 0x10
    298c:	40 e0       	ldi	r20, 0x00	; 0
    298e:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <MDIO_voidSetPinValue>
		for(LOC_u8Row=0+ KPD_ROW_PIN0; LOC_u8Row<1+KPD_ROW_PIN3; LOC_u8Row++)
    2992:	1f 86       	std	Y+15, r1	; 0x0f
    2994:	b6 c0       	rjmp	.+364    	; 0x2b02 <HKPD_u8GetPressedKey+0x198>
		{
			MDIO_voidGetPinValue(KPD_PORT, LOC_u8Row, &LOC_u8GetPressed);
    2996:	9e 01       	movw	r18, r28
    2998:	2e 5e       	subi	r18, 0xEE	; 238
    299a:	3f 4f       	sbci	r19, 0xFF	; 255
    299c:	83 e0       	ldi	r24, 0x03	; 3
    299e:	6f 85       	ldd	r22, Y+15	; 0x0f
    29a0:	a9 01       	movw	r20, r18
    29a2:	0e 94 fe 10 	call	0x21fc	; 0x21fc <MDIO_voidGetPinValue>
			if(LOC_u8GetPressed==0)
    29a6:	8a 89       	ldd	r24, Y+18	; 0x12
    29a8:	88 23       	and	r24, r24
    29aa:	09 f0       	breq	.+2      	; 0x29ae <HKPD_u8GetPressedKey+0x44>
    29ac:	a7 c0       	rjmp	.+334    	; 0x2afc <HKPD_u8GetPressedKey+0x192>
    29ae:	80 e0       	ldi	r24, 0x00	; 0
    29b0:	90 e0       	ldi	r25, 0x00	; 0
    29b2:	a8 ec       	ldi	r26, 0xC8	; 200
    29b4:	b2 e4       	ldi	r27, 0x42	; 66
    29b6:	8b 87       	std	Y+11, r24	; 0x0b
    29b8:	9c 87       	std	Y+12, r25	; 0x0c
    29ba:	ad 87       	std	Y+13, r26	; 0x0d
    29bc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29be:	6b 85       	ldd	r22, Y+11	; 0x0b
    29c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    29c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    29c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    29c6:	20 e0       	ldi	r18, 0x00	; 0
    29c8:	30 e0       	ldi	r19, 0x00	; 0
    29ca:	4a ef       	ldi	r20, 0xFA	; 250
    29cc:	54 e4       	ldi	r21, 0x44	; 68
    29ce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29d2:	dc 01       	movw	r26, r24
    29d4:	cb 01       	movw	r24, r22
    29d6:	8f 83       	std	Y+7, r24	; 0x07
    29d8:	98 87       	std	Y+8, r25	; 0x08
    29da:	a9 87       	std	Y+9, r26	; 0x09
    29dc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29de:	6f 81       	ldd	r22, Y+7	; 0x07
    29e0:	78 85       	ldd	r23, Y+8	; 0x08
    29e2:	89 85       	ldd	r24, Y+9	; 0x09
    29e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    29e6:	20 e0       	ldi	r18, 0x00	; 0
    29e8:	30 e0       	ldi	r19, 0x00	; 0
    29ea:	40 e8       	ldi	r20, 0x80	; 128
    29ec:	5f e3       	ldi	r21, 0x3F	; 63
    29ee:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    29f2:	88 23       	and	r24, r24
    29f4:	2c f4       	brge	.+10     	; 0x2a00 <HKPD_u8GetPressedKey+0x96>
		__ticks = 1;
    29f6:	81 e0       	ldi	r24, 0x01	; 1
    29f8:	90 e0       	ldi	r25, 0x00	; 0
    29fa:	9e 83       	std	Y+6, r25	; 0x06
    29fc:	8d 83       	std	Y+5, r24	; 0x05
    29fe:	3f c0       	rjmp	.+126    	; 0x2a7e <HKPD_u8GetPressedKey+0x114>
	else if (__tmp > 65535)
    2a00:	6f 81       	ldd	r22, Y+7	; 0x07
    2a02:	78 85       	ldd	r23, Y+8	; 0x08
    2a04:	89 85       	ldd	r24, Y+9	; 0x09
    2a06:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a08:	20 e0       	ldi	r18, 0x00	; 0
    2a0a:	3f ef       	ldi	r19, 0xFF	; 255
    2a0c:	4f e7       	ldi	r20, 0x7F	; 127
    2a0e:	57 e4       	ldi	r21, 0x47	; 71
    2a10:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    2a14:	18 16       	cp	r1, r24
    2a16:	4c f5       	brge	.+82     	; 0x2a6a <HKPD_u8GetPressedKey+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a18:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a20:	20 e0       	ldi	r18, 0x00	; 0
    2a22:	30 e0       	ldi	r19, 0x00	; 0
    2a24:	40 e2       	ldi	r20, 0x20	; 32
    2a26:	51 e4       	ldi	r21, 0x41	; 65
    2a28:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a2c:	dc 01       	movw	r26, r24
    2a2e:	cb 01       	movw	r24, r22
    2a30:	bc 01       	movw	r22, r24
    2a32:	cd 01       	movw	r24, r26
    2a34:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a38:	dc 01       	movw	r26, r24
    2a3a:	cb 01       	movw	r24, r22
    2a3c:	9e 83       	std	Y+6, r25	; 0x06
    2a3e:	8d 83       	std	Y+5, r24	; 0x05
    2a40:	0f c0       	rjmp	.+30     	; 0x2a60 <HKPD_u8GetPressedKey+0xf6>
    2a42:	88 ec       	ldi	r24, 0xC8	; 200
    2a44:	90 e0       	ldi	r25, 0x00	; 0
    2a46:	9c 83       	std	Y+4, r25	; 0x04
    2a48:	8b 83       	std	Y+3, r24	; 0x03
    2a4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a4c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a4e:	01 97       	sbiw	r24, 0x01	; 1
    2a50:	f1 f7       	brne	.-4      	; 0x2a4e <HKPD_u8GetPressedKey+0xe4>
    2a52:	9c 83       	std	Y+4, r25	; 0x04
    2a54:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a56:	8d 81       	ldd	r24, Y+5	; 0x05
    2a58:	9e 81       	ldd	r25, Y+6	; 0x06
    2a5a:	01 97       	sbiw	r24, 0x01	; 1
    2a5c:	9e 83       	std	Y+6, r25	; 0x06
    2a5e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a60:	8d 81       	ldd	r24, Y+5	; 0x05
    2a62:	9e 81       	ldd	r25, Y+6	; 0x06
    2a64:	00 97       	sbiw	r24, 0x00	; 0
    2a66:	69 f7       	brne	.-38     	; 0x2a42 <HKPD_u8GetPressedKey+0xd8>
    2a68:	14 c0       	rjmp	.+40     	; 0x2a92 <HKPD_u8GetPressedKey+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a6a:	6f 81       	ldd	r22, Y+7	; 0x07
    2a6c:	78 85       	ldd	r23, Y+8	; 0x08
    2a6e:	89 85       	ldd	r24, Y+9	; 0x09
    2a70:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a72:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a76:	dc 01       	movw	r26, r24
    2a78:	cb 01       	movw	r24, r22
    2a7a:	9e 83       	std	Y+6, r25	; 0x06
    2a7c:	8d 83       	std	Y+5, r24	; 0x05
    2a7e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a80:	9e 81       	ldd	r25, Y+6	; 0x06
    2a82:	9a 83       	std	Y+2, r25	; 0x02
    2a84:	89 83       	std	Y+1, r24	; 0x01
    2a86:	89 81       	ldd	r24, Y+1	; 0x01
    2a88:	9a 81       	ldd	r25, Y+2	; 0x02
    2a8a:	01 97       	sbiw	r24, 0x01	; 1
    2a8c:	f1 f7       	brne	.-4      	; 0x2a8a <HKPD_u8GetPressedKey+0x120>
    2a8e:	9a 83       	std	Y+2, r25	; 0x02
    2a90:	89 83       	std	Y+1, r24	; 0x01
			{
				_delay_ms(100);
				MDIO_voidGetPinValue(KPD_PORT, LOC_u8Row, &LOC_u8GetPressed);
    2a92:	9e 01       	movw	r18, r28
    2a94:	2e 5e       	subi	r18, 0xEE	; 238
    2a96:	3f 4f       	sbci	r19, 0xFF	; 255
    2a98:	83 e0       	ldi	r24, 0x03	; 3
    2a9a:	6f 85       	ldd	r22, Y+15	; 0x0f
    2a9c:	a9 01       	movw	r20, r18
    2a9e:	0e 94 fe 10 	call	0x21fc	; 0x21fc <MDIO_voidGetPinValue>
				if( LOC_u8GetPressed==DIO_PIN_LOW)
    2aa2:	8a 89       	ldd	r24, Y+18	; 0x12
    2aa4:	88 23       	and	r24, r24
    2aa6:	a9 f4       	brne	.+42     	; 0x2ad2 <HKPD_u8GetPressedKey+0x168>
				{
					LOC_u8ReturnDatat= KPD_u8Button[LOC_u8Row - KPD_ROW_PIN0][LOC_u8Col - KPD_COL_PIN4];
    2aa8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2aaa:	48 2f       	mov	r20, r24
    2aac:	50 e0       	ldi	r21, 0x00	; 0
    2aae:	88 89       	ldd	r24, Y+16	; 0x10
    2ab0:	88 2f       	mov	r24, r24
    2ab2:	90 e0       	ldi	r25, 0x00	; 0
    2ab4:	9c 01       	movw	r18, r24
    2ab6:	24 50       	subi	r18, 0x04	; 4
    2ab8:	30 40       	sbci	r19, 0x00	; 0
    2aba:	ca 01       	movw	r24, r20
    2abc:	88 0f       	add	r24, r24
    2abe:	99 1f       	adc	r25, r25
    2ac0:	88 0f       	add	r24, r24
    2ac2:	99 1f       	adc	r25, r25
    2ac4:	82 0f       	add	r24, r18
    2ac6:	93 1f       	adc	r25, r19
    2ac8:	fc 01       	movw	r30, r24
    2aca:	e8 59       	subi	r30, 0x98	; 152
    2acc:	fe 4f       	sbci	r31, 0xFE	; 254
    2ace:	80 81       	ld	r24, Z
    2ad0:	89 8b       	std	Y+17, r24	; 0x11
				}
				MDIO_voidGetPinValue(KPD_PORT, LOC_u8Row, &LOC_u8GetPressed);
    2ad2:	9e 01       	movw	r18, r28
    2ad4:	2e 5e       	subi	r18, 0xEE	; 238
    2ad6:	3f 4f       	sbci	r19, 0xFF	; 255
    2ad8:	83 e0       	ldi	r24, 0x03	; 3
    2ada:	6f 85       	ldd	r22, Y+15	; 0x0f
    2adc:	a9 01       	movw	r20, r18
    2ade:	0e 94 fe 10 	call	0x21fc	; 0x21fc <MDIO_voidGetPinValue>
    2ae2:	08 c0       	rjmp	.+16     	; 0x2af4 <HKPD_u8GetPressedKey+0x18a>
				while( DIO_PIN_LOW == LOC_u8GetPressed )
				{

					MDIO_voidGetPinValue( KPD_PORT , LOC_u8Row , &LOC_u8GetPressed );
    2ae4:	9e 01       	movw	r18, r28
    2ae6:	2e 5e       	subi	r18, 0xEE	; 238
    2ae8:	3f 4f       	sbci	r19, 0xFF	; 255
    2aea:	83 e0       	ldi	r24, 0x03	; 3
    2aec:	6f 85       	ldd	r22, Y+15	; 0x0f
    2aee:	a9 01       	movw	r20, r18
    2af0:	0e 94 fe 10 	call	0x21fc	; 0x21fc <MDIO_voidGetPinValue>
				if( LOC_u8GetPressed==DIO_PIN_LOW)
				{
					LOC_u8ReturnDatat= KPD_u8Button[LOC_u8Row - KPD_ROW_PIN0][LOC_u8Col - KPD_COL_PIN4];
				}
				MDIO_voidGetPinValue(KPD_PORT, LOC_u8Row, &LOC_u8GetPressed);
				while( DIO_PIN_LOW == LOC_u8GetPressed )
    2af4:	8a 89       	ldd	r24, Y+18	; 0x12
    2af6:	88 23       	and	r24, r24
    2af8:	a9 f3       	breq	.-22     	; 0x2ae4 <HKPD_u8GetPressedKey+0x17a>
    2afa:	07 c0       	rjmp	.+14     	; 0x2b0a <HKPD_u8GetPressedKey+0x1a0>
	u8 LOC_u8Row;

	for(LOC_u8Col=0+ KPD_COL_PIN4; LOC_u8Col<1+ KPD_COL_PIN7; LOC_u8Col++)
	{
		MDIO_voidSetPinValue(KPD_PORT, LOC_u8Col, DIO_PIN_LOW);
		for(LOC_u8Row=0+ KPD_ROW_PIN0; LOC_u8Row<1+KPD_ROW_PIN3; LOC_u8Row++)
    2afc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2afe:	8f 5f       	subi	r24, 0xFF	; 255
    2b00:	8f 87       	std	Y+15, r24	; 0x0f
    2b02:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b04:	84 30       	cpi	r24, 0x04	; 4
    2b06:	08 f4       	brcc	.+2      	; 0x2b0a <HKPD_u8GetPressedKey+0x1a0>
    2b08:	46 cf       	rjmp	.-372    	; 0x2996 <HKPD_u8GetPressedKey+0x2c>
				}

				break ;
			}
		}
		MDIO_voidSetPinValue(KPD_PORT, LOC_u8Col, DIO_PIN_HIGH);
    2b0a:	83 e0       	ldi	r24, 0x03	; 3
    2b0c:	68 89       	ldd	r22, Y+16	; 0x10
    2b0e:	41 e0       	ldi	r20, 0x01	; 1
    2b10:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <MDIO_voidSetPinValue>
	u8 LOC_u8ReturnDatat= NOT_PRESSED;
	u8 LOC_u8GetPressed;
	u8 LOC_u8Col;
	u8 LOC_u8Row;

	for(LOC_u8Col=0+ KPD_COL_PIN4; LOC_u8Col<1+ KPD_COL_PIN7; LOC_u8Col++)
    2b14:	88 89       	ldd	r24, Y+16	; 0x10
    2b16:	8f 5f       	subi	r24, 0xFF	; 255
    2b18:	88 8b       	std	Y+16, r24	; 0x10
    2b1a:	88 89       	ldd	r24, Y+16	; 0x10
    2b1c:	88 30       	cpi	r24, 0x08	; 8
    2b1e:	08 f4       	brcc	.+2      	; 0x2b22 <HKPD_u8GetPressedKey+0x1b8>
    2b20:	33 cf       	rjmp	.-410    	; 0x2988 <HKPD_u8GetPressedKey+0x1e>
				break ;
			}
		}
		MDIO_voidSetPinValue(KPD_PORT, LOC_u8Col, DIO_PIN_HIGH);
	}
	return LOC_u8ReturnDatat;
    2b22:	89 89       	ldd	r24, Y+17	; 0x11

}
    2b24:	62 96       	adiw	r28, 0x12	; 18
    2b26:	0f b6       	in	r0, 0x3f	; 63
    2b28:	f8 94       	cli
    2b2a:	de bf       	out	0x3e, r29	; 62
    2b2c:	0f be       	out	0x3f, r0	; 63
    2b2e:	cd bf       	out	0x3d, r28	; 61
    2b30:	cf 91       	pop	r28
    2b32:	df 91       	pop	r29
    2b34:	08 95       	ret

00002b36 <main>:

#include <avr/delay.h>


int main(void)
{
    2b36:	ef 92       	push	r14
    2b38:	ff 92       	push	r15
    2b3a:	0f 93       	push	r16
    2b3c:	1f 93       	push	r17
    2b3e:	df 93       	push	r29
    2b40:	cf 93       	push	r28
    2b42:	cd b7       	in	r28, 0x3d	; 61
    2b44:	de b7       	in	r29, 0x3e	; 62
    2b46:	2d 97       	sbiw	r28, 0x0d	; 13
    2b48:	0f b6       	in	r0, 0x3f	; 63
    2b4a:	f8 94       	cli
    2b4c:	de bf       	out	0x3e, r29	; 62
    2b4e:	0f be       	out	0x3f, r0	; 63
    2b50:	cd bf       	out	0x3d, r28	; 61
	u8 key,i=1,key1;
    2b52:	81 e0       	ldi	r24, 0x01	; 1
    2b54:	8a 87       	std	Y+10, r24	; 0x0a
	s32 num1=0,num2=0;
    2b56:	1d 82       	std	Y+5, r1	; 0x05
    2b58:	1e 82       	std	Y+6, r1	; 0x06
    2b5a:	1f 82       	std	Y+7, r1	; 0x07
    2b5c:	18 86       	std	Y+8, r1	; 0x08
    2b5e:	19 82       	std	Y+1, r1	; 0x01
    2b60:	1a 82       	std	Y+2, r1	; 0x02
    2b62:	1b 82       	std	Y+3, r1	; 0x03
    2b64:	1c 82       	std	Y+4, r1	; 0x04

	CLCD_voidInitialization();
    2b66:	0e 94 24 07 	call	0xe48	; 0xe48 <CLCD_voidInitialization>
	HKPD_voidInitialization();
    2b6a:	0e 94 5e 14 	call	0x28bc	; 0x28bc <HKPD_voidInitialization>

	while(1)    //125+5=130
	{
		key= HKPD_u8GetPressedKey();
    2b6e:	0e 94 b5 14 	call	0x296a	; 0x296a <HKPD_u8GetPressedKey>
    2b72:	8b 87       	std	Y+11, r24	; 0x0b
		if(key!= NOT_PRESSED)
    2b74:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b76:	8f 3f       	cpi	r24, 0xFF	; 255
    2b78:	d1 f3       	breq	.-12     	; 0x2b6e <main+0x38>
		{
			if(key>='0'&&key<='9') //125
    2b7a:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b7c:	80 33       	cpi	r24, 0x30	; 48
    2b7e:	40 f1       	brcs	.+80     	; 0x2bd0 <main+0x9a>
    2b80:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b82:	8a 33       	cpi	r24, 0x3A	; 58
    2b84:	28 f5       	brcc	.+74     	; 0x2bd0 <main+0x9a>
			{ CLCD_voidSetPosition(CLCD_ROW_1,i);
    2b86:	81 e0       	ldi	r24, 0x01	; 1
    2b88:	6a 85       	ldd	r22, Y+10	; 0x0a
    2b8a:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <CLCD_voidSetPosition>
			CLCD_voidSendData(key);//'1' '2' '5'
    2b8e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b90:	0e 94 22 09 	call	0x1244	; 0x1244 <CLCD_voidSendData>

			num1=num1*10+(key-'0'); //'1'-'0'=1    12    125     num1=5
    2b94:	8d 81       	ldd	r24, Y+5	; 0x05
    2b96:	9e 81       	ldd	r25, Y+6	; 0x06
    2b98:	af 81       	ldd	r26, Y+7	; 0x07
    2b9a:	b8 85       	ldd	r27, Y+8	; 0x08
    2b9c:	2a e0       	ldi	r18, 0x0A	; 10
    2b9e:	30 e0       	ldi	r19, 0x00	; 0
    2ba0:	40 e0       	ldi	r20, 0x00	; 0
    2ba2:	50 e0       	ldi	r21, 0x00	; 0
    2ba4:	bc 01       	movw	r22, r24
    2ba6:	cd 01       	movw	r24, r26
    2ba8:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <__mulsi3>
    2bac:	9b 01       	movw	r18, r22
    2bae:	ac 01       	movw	r20, r24
    2bb0:	8b 85       	ldd	r24, Y+11	; 0x0b
    2bb2:	88 2f       	mov	r24, r24
    2bb4:	90 e0       	ldi	r25, 0x00	; 0
    2bb6:	c0 97       	sbiw	r24, 0x30	; 48
    2bb8:	aa 27       	eor	r26, r26
    2bba:	97 fd       	sbrc	r25, 7
    2bbc:	a0 95       	com	r26
    2bbe:	ba 2f       	mov	r27, r26
    2bc0:	82 0f       	add	r24, r18
    2bc2:	93 1f       	adc	r25, r19
    2bc4:	a4 1f       	adc	r26, r20
    2bc6:	b5 1f       	adc	r27, r21
    2bc8:	8d 83       	std	Y+5, r24	; 0x05
    2bca:	9e 83       	std	Y+6, r25	; 0x06
    2bcc:	af 83       	std	Y+7, r26	; 0x07
    2bce:	b8 87       	std	Y+8, r27	; 0x08

			}

			if((key=='+')||(key=='-')||(key=='/')|| (key=='*') ) //125+
    2bd0:	8b 85       	ldd	r24, Y+11	; 0x0b
    2bd2:	8b 32       	cpi	r24, 0x2B	; 43
    2bd4:	49 f0       	breq	.+18     	; 0x2be8 <main+0xb2>
    2bd6:	8b 85       	ldd	r24, Y+11	; 0x0b
    2bd8:	8d 32       	cpi	r24, 0x2D	; 45
    2bda:	31 f0       	breq	.+12     	; 0x2be8 <main+0xb2>
    2bdc:	8b 85       	ldd	r24, Y+11	; 0x0b
    2bde:	8f 32       	cpi	r24, 0x2F	; 47
    2be0:	19 f0       	breq	.+6      	; 0x2be8 <main+0xb2>
    2be2:	8b 85       	ldd	r24, Y+11	; 0x0b
    2be4:	8a 32       	cpi	r24, 0x2A	; 42
    2be6:	a9 f4       	brne	.+42     	; 0x2c12 <main+0xdc>
						{
							num2=num1;//125       num2=125
    2be8:	8d 81       	ldd	r24, Y+5	; 0x05
    2bea:	9e 81       	ldd	r25, Y+6	; 0x06
    2bec:	af 81       	ldd	r26, Y+7	; 0x07
    2bee:	b8 85       	ldd	r27, Y+8	; 0x08
    2bf0:	89 83       	std	Y+1, r24	; 0x01
    2bf2:	9a 83       	std	Y+2, r25	; 0x02
    2bf4:	ab 83       	std	Y+3, r26	; 0x03
    2bf6:	bc 83       	std	Y+4, r27	; 0x04
							num1=0;
    2bf8:	1d 82       	std	Y+5, r1	; 0x05
    2bfa:	1e 82       	std	Y+6, r1	; 0x06
    2bfc:	1f 82       	std	Y+7, r1	; 0x07
    2bfe:	18 86       	std	Y+8, r1	; 0x08
							CLCD_voidSetPosition(CLCD_ROW_1,i);
    2c00:	81 e0       	ldi	r24, 0x01	; 1
    2c02:	6a 85       	ldd	r22, Y+10	; 0x0a
    2c04:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <CLCD_voidSetPosition>
							CLCD_voidSendData(key);
    2c08:	8b 85       	ldd	r24, Y+11	; 0x0b
    2c0a:	0e 94 22 09 	call	0x1244	; 0x1244 <CLCD_voidSendData>
							key1=key;
    2c0e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2c10:	89 87       	std	Y+9, r24	; 0x09
						}

			if(key=='=')
    2c12:	8b 85       	ldd	r24, Y+11	; 0x0b
    2c14:	8d 33       	cpi	r24, 0x3D	; 61
    2c16:	09 f0       	breq	.+2      	; 0x2c1a <main+0xe4>
    2c18:	8a c0       	rjmp	.+276    	; 0x2d2e <main+0x1f8>
			{
				CLCD_voidSetPosition(CLCD_ROW_1,i);
    2c1a:	81 e0       	ldi	r24, 0x01	; 1
    2c1c:	6a 85       	ldd	r22, Y+10	; 0x0a
    2c1e:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <CLCD_voidSetPosition>
				CLCD_voidSendData(key);
    2c22:	8b 85       	ldd	r24, Y+11	; 0x0b
    2c24:	0e 94 22 09 	call	0x1244	; 0x1244 <CLCD_voidSendData>
				i++;
    2c28:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c2a:	8f 5f       	subi	r24, 0xFF	; 255
    2c2c:	8a 87       	std	Y+10, r24	; 0x0a
				switch(key1)
    2c2e:	89 85       	ldd	r24, Y+9	; 0x09
    2c30:	28 2f       	mov	r18, r24
    2c32:	30 e0       	ldi	r19, 0x00	; 0
    2c34:	3d 87       	std	Y+13, r19	; 0x0d
    2c36:	2c 87       	std	Y+12, r18	; 0x0c
    2c38:	8c 85       	ldd	r24, Y+12	; 0x0c
    2c3a:	9d 85       	ldd	r25, Y+13	; 0x0d
    2c3c:	8b 32       	cpi	r24, 0x2B	; 43
    2c3e:	91 05       	cpc	r25, r1
    2c40:	b9 f0       	breq	.+46     	; 0x2c70 <main+0x13a>
    2c42:	2c 85       	ldd	r18, Y+12	; 0x0c
    2c44:	3d 85       	ldd	r19, Y+13	; 0x0d
    2c46:	2c 32       	cpi	r18, 0x2C	; 44
    2c48:	31 05       	cpc	r19, r1
    2c4a:	34 f4       	brge	.+12     	; 0x2c58 <main+0x122>
    2c4c:	8c 85       	ldd	r24, Y+12	; 0x0c
    2c4e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2c50:	8a 32       	cpi	r24, 0x2A	; 42
    2c52:	91 05       	cpc	r25, r1
    2c54:	b9 f1       	breq	.+110    	; 0x2cc4 <main+0x18e>
    2c56:	6b c0       	rjmp	.+214    	; 0x2d2e <main+0x1f8>
    2c58:	2c 85       	ldd	r18, Y+12	; 0x0c
    2c5a:	3d 85       	ldd	r19, Y+13	; 0x0d
    2c5c:	2d 32       	cpi	r18, 0x2D	; 45
    2c5e:	31 05       	cpc	r19, r1
    2c60:	e1 f0       	breq	.+56     	; 0x2c9a <main+0x164>
    2c62:	8c 85       	ldd	r24, Y+12	; 0x0c
    2c64:	9d 85       	ldd	r25, Y+13	; 0x0d
    2c66:	8f 32       	cpi	r24, 0x2F	; 47
    2c68:	91 05       	cpc	r25, r1
    2c6a:	09 f4       	brne	.+2      	; 0x2c6e <main+0x138>
    2c6c:	42 c0       	rjmp	.+132    	; 0x2cf2 <main+0x1bc>
    2c6e:	5f c0       	rjmp	.+190    	; 0x2d2e <main+0x1f8>
				{
				case '+':CLCD_voidSetPosition(CLCD_ROW_1,i); CLCD_voidSendNumber(num1+num2); break;
    2c70:	81 e0       	ldi	r24, 0x01	; 1
    2c72:	6a 85       	ldd	r22, Y+10	; 0x0a
    2c74:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <CLCD_voidSetPosition>
    2c78:	8d 81       	ldd	r24, Y+5	; 0x05
    2c7a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c7c:	af 81       	ldd	r26, Y+7	; 0x07
    2c7e:	b8 85       	ldd	r27, Y+8	; 0x08
    2c80:	29 81       	ldd	r18, Y+1	; 0x01
    2c82:	3a 81       	ldd	r19, Y+2	; 0x02
    2c84:	4b 81       	ldd	r20, Y+3	; 0x03
    2c86:	5c 81       	ldd	r21, Y+4	; 0x04
    2c88:	82 0f       	add	r24, r18
    2c8a:	93 1f       	adc	r25, r19
    2c8c:	a4 1f       	adc	r26, r20
    2c8e:	b5 1f       	adc	r27, r21
    2c90:	bc 01       	movw	r22, r24
    2c92:	cd 01       	movw	r24, r26
    2c94:	0e 94 95 0c 	call	0x192a	; 0x192a <CLCD_voidSendNumber>
    2c98:	4a c0       	rjmp	.+148    	; 0x2d2e <main+0x1f8>
				case '-':CLCD_voidSetPosition(CLCD_ROW_1,i); CLCD_voidSendNumber(num2-num1); break;
    2c9a:	81 e0       	ldi	r24, 0x01	; 1
    2c9c:	6a 85       	ldd	r22, Y+10	; 0x0a
    2c9e:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <CLCD_voidSetPosition>
    2ca2:	89 81       	ldd	r24, Y+1	; 0x01
    2ca4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ca6:	ab 81       	ldd	r26, Y+3	; 0x03
    2ca8:	bc 81       	ldd	r27, Y+4	; 0x04
    2caa:	2d 81       	ldd	r18, Y+5	; 0x05
    2cac:	3e 81       	ldd	r19, Y+6	; 0x06
    2cae:	4f 81       	ldd	r20, Y+7	; 0x07
    2cb0:	58 85       	ldd	r21, Y+8	; 0x08
    2cb2:	82 1b       	sub	r24, r18
    2cb4:	93 0b       	sbc	r25, r19
    2cb6:	a4 0b       	sbc	r26, r20
    2cb8:	b5 0b       	sbc	r27, r21
    2cba:	bc 01       	movw	r22, r24
    2cbc:	cd 01       	movw	r24, r26
    2cbe:	0e 94 95 0c 	call	0x192a	; 0x192a <CLCD_voidSendNumber>
    2cc2:	35 c0       	rjmp	.+106    	; 0x2d2e <main+0x1f8>
				case '*':CLCD_voidSetPosition(CLCD_ROW_1,i); CLCD_voidSendNumber(num1*num2); break;
    2cc4:	81 e0       	ldi	r24, 0x01	; 1
    2cc6:	6a 85       	ldd	r22, Y+10	; 0x0a
    2cc8:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <CLCD_voidSetPosition>
    2ccc:	8d 81       	ldd	r24, Y+5	; 0x05
    2cce:	9e 81       	ldd	r25, Y+6	; 0x06
    2cd0:	af 81       	ldd	r26, Y+7	; 0x07
    2cd2:	b8 85       	ldd	r27, Y+8	; 0x08
    2cd4:	29 81       	ldd	r18, Y+1	; 0x01
    2cd6:	3a 81       	ldd	r19, Y+2	; 0x02
    2cd8:	4b 81       	ldd	r20, Y+3	; 0x03
    2cda:	5c 81       	ldd	r21, Y+4	; 0x04
    2cdc:	bc 01       	movw	r22, r24
    2cde:	cd 01       	movw	r24, r26
    2ce0:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <__mulsi3>
    2ce4:	dc 01       	movw	r26, r24
    2ce6:	cb 01       	movw	r24, r22
    2ce8:	bc 01       	movw	r22, r24
    2cea:	cd 01       	movw	r24, r26
    2cec:	0e 94 95 0c 	call	0x192a	; 0x192a <CLCD_voidSendNumber>
    2cf0:	1e c0       	rjmp	.+60     	; 0x2d2e <main+0x1f8>
				case '/':CLCD_voidSetPosition(CLCD_ROW_1,i); CLCD_voidSendFloat((1.0*num2)/num1); break;
    2cf2:	81 e0       	ldi	r24, 0x01	; 1
    2cf4:	6a 85       	ldd	r22, Y+10	; 0x0a
    2cf6:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <CLCD_voidSetPosition>
    2cfa:	69 81       	ldd	r22, Y+1	; 0x01
    2cfc:	7a 81       	ldd	r23, Y+2	; 0x02
    2cfe:	8b 81       	ldd	r24, Y+3	; 0x03
    2d00:	9c 81       	ldd	r25, Y+4	; 0x04
    2d02:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__floatsisf>
    2d06:	7b 01       	movw	r14, r22
    2d08:	8c 01       	movw	r16, r24
    2d0a:	6d 81       	ldd	r22, Y+5	; 0x05
    2d0c:	7e 81       	ldd	r23, Y+6	; 0x06
    2d0e:	8f 81       	ldd	r24, Y+7	; 0x07
    2d10:	98 85       	ldd	r25, Y+8	; 0x08
    2d12:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__floatsisf>
    2d16:	9b 01       	movw	r18, r22
    2d18:	ac 01       	movw	r20, r24
    2d1a:	c8 01       	movw	r24, r16
    2d1c:	b7 01       	movw	r22, r14
    2d1e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2d22:	dc 01       	movw	r26, r24
    2d24:	cb 01       	movw	r24, r22
    2d26:	bc 01       	movw	r22, r24
    2d28:	cd 01       	movw	r24, r26
    2d2a:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <CLCD_voidSendFloat>
				}
			}
			i++;
    2d2e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d30:	8f 5f       	subi	r24, 0xFF	; 255
    2d32:	8a 87       	std	Y+10, r24	; 0x0a
			if(key=='c')
    2d34:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d36:	83 36       	cpi	r24, 0x63	; 99
    2d38:	09 f0       	breq	.+2      	; 0x2d3c <main+0x206>
    2d3a:	19 cf       	rjmp	.-462    	; 0x2b6e <main+0x38>
			{
				CLCD_voidClearScreen();
    2d3c:	0e 94 4e 0a 	call	0x149c	; 0x149c <CLCD_voidClearScreen>
				CLCD_voidSetPosition(CLCD_ROW_1,i);
    2d40:	81 e0       	ldi	r24, 0x01	; 1
    2d42:	6a 85       	ldd	r22, Y+10	; 0x0a
    2d44:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <CLCD_voidSetPosition>
				num1=0;
    2d48:	1d 82       	std	Y+5, r1	; 0x05
    2d4a:	1e 82       	std	Y+6, r1	; 0x06
    2d4c:	1f 82       	std	Y+7, r1	; 0x07
    2d4e:	18 86       	std	Y+8, r1	; 0x08
				num2=0;
    2d50:	19 82       	std	Y+1, r1	; 0x01
    2d52:	1a 82       	std	Y+2, r1	; 0x02
    2d54:	1b 82       	std	Y+3, r1	; 0x03
    2d56:	1c 82       	std	Y+4, r1	; 0x04
				i=1;
    2d58:	81 e0       	ldi	r24, 0x01	; 1
    2d5a:	8a 87       	std	Y+10, r24	; 0x0a
    2d5c:	08 cf       	rjmp	.-496    	; 0x2b6e <main+0x38>

00002d5e <__mulsi3>:
    2d5e:	62 9f       	mul	r22, r18
    2d60:	d0 01       	movw	r26, r0
    2d62:	73 9f       	mul	r23, r19
    2d64:	f0 01       	movw	r30, r0
    2d66:	82 9f       	mul	r24, r18
    2d68:	e0 0d       	add	r30, r0
    2d6a:	f1 1d       	adc	r31, r1
    2d6c:	64 9f       	mul	r22, r20
    2d6e:	e0 0d       	add	r30, r0
    2d70:	f1 1d       	adc	r31, r1
    2d72:	92 9f       	mul	r25, r18
    2d74:	f0 0d       	add	r31, r0
    2d76:	83 9f       	mul	r24, r19
    2d78:	f0 0d       	add	r31, r0
    2d7a:	74 9f       	mul	r23, r20
    2d7c:	f0 0d       	add	r31, r0
    2d7e:	65 9f       	mul	r22, r21
    2d80:	f0 0d       	add	r31, r0
    2d82:	99 27       	eor	r25, r25
    2d84:	72 9f       	mul	r23, r18
    2d86:	b0 0d       	add	r27, r0
    2d88:	e1 1d       	adc	r30, r1
    2d8a:	f9 1f       	adc	r31, r25
    2d8c:	63 9f       	mul	r22, r19
    2d8e:	b0 0d       	add	r27, r0
    2d90:	e1 1d       	adc	r30, r1
    2d92:	f9 1f       	adc	r31, r25
    2d94:	bd 01       	movw	r22, r26
    2d96:	cf 01       	movw	r24, r30
    2d98:	11 24       	eor	r1, r1
    2d9a:	08 95       	ret

00002d9c <__udivmodsi4>:
    2d9c:	a1 e2       	ldi	r26, 0x21	; 33
    2d9e:	1a 2e       	mov	r1, r26
    2da0:	aa 1b       	sub	r26, r26
    2da2:	bb 1b       	sub	r27, r27
    2da4:	fd 01       	movw	r30, r26
    2da6:	0d c0       	rjmp	.+26     	; 0x2dc2 <__udivmodsi4_ep>

00002da8 <__udivmodsi4_loop>:
    2da8:	aa 1f       	adc	r26, r26
    2daa:	bb 1f       	adc	r27, r27
    2dac:	ee 1f       	adc	r30, r30
    2dae:	ff 1f       	adc	r31, r31
    2db0:	a2 17       	cp	r26, r18
    2db2:	b3 07       	cpc	r27, r19
    2db4:	e4 07       	cpc	r30, r20
    2db6:	f5 07       	cpc	r31, r21
    2db8:	20 f0       	brcs	.+8      	; 0x2dc2 <__udivmodsi4_ep>
    2dba:	a2 1b       	sub	r26, r18
    2dbc:	b3 0b       	sbc	r27, r19
    2dbe:	e4 0b       	sbc	r30, r20
    2dc0:	f5 0b       	sbc	r31, r21

00002dc2 <__udivmodsi4_ep>:
    2dc2:	66 1f       	adc	r22, r22
    2dc4:	77 1f       	adc	r23, r23
    2dc6:	88 1f       	adc	r24, r24
    2dc8:	99 1f       	adc	r25, r25
    2dca:	1a 94       	dec	r1
    2dcc:	69 f7       	brne	.-38     	; 0x2da8 <__udivmodsi4_loop>
    2dce:	60 95       	com	r22
    2dd0:	70 95       	com	r23
    2dd2:	80 95       	com	r24
    2dd4:	90 95       	com	r25
    2dd6:	9b 01       	movw	r18, r22
    2dd8:	ac 01       	movw	r20, r24
    2dda:	bd 01       	movw	r22, r26
    2ddc:	cf 01       	movw	r24, r30
    2dde:	08 95       	ret

00002de0 <__divmodsi4>:
    2de0:	97 fb       	bst	r25, 7
    2de2:	09 2e       	mov	r0, r25
    2de4:	05 26       	eor	r0, r21
    2de6:	0e d0       	rcall	.+28     	; 0x2e04 <__divmodsi4_neg1>
    2de8:	57 fd       	sbrc	r21, 7
    2dea:	04 d0       	rcall	.+8      	; 0x2df4 <__divmodsi4_neg2>
    2dec:	d7 df       	rcall	.-82     	; 0x2d9c <__udivmodsi4>
    2dee:	0a d0       	rcall	.+20     	; 0x2e04 <__divmodsi4_neg1>
    2df0:	00 1c       	adc	r0, r0
    2df2:	38 f4       	brcc	.+14     	; 0x2e02 <__divmodsi4_exit>

00002df4 <__divmodsi4_neg2>:
    2df4:	50 95       	com	r21
    2df6:	40 95       	com	r20
    2df8:	30 95       	com	r19
    2dfa:	21 95       	neg	r18
    2dfc:	3f 4f       	sbci	r19, 0xFF	; 255
    2dfe:	4f 4f       	sbci	r20, 0xFF	; 255
    2e00:	5f 4f       	sbci	r21, 0xFF	; 255

00002e02 <__divmodsi4_exit>:
    2e02:	08 95       	ret

00002e04 <__divmodsi4_neg1>:
    2e04:	f6 f7       	brtc	.-4      	; 0x2e02 <__divmodsi4_exit>
    2e06:	90 95       	com	r25
    2e08:	80 95       	com	r24
    2e0a:	70 95       	com	r23
    2e0c:	61 95       	neg	r22
    2e0e:	7f 4f       	sbci	r23, 0xFF	; 255
    2e10:	8f 4f       	sbci	r24, 0xFF	; 255
    2e12:	9f 4f       	sbci	r25, 0xFF	; 255
    2e14:	08 95       	ret

00002e16 <__prologue_saves__>:
    2e16:	2f 92       	push	r2
    2e18:	3f 92       	push	r3
    2e1a:	4f 92       	push	r4
    2e1c:	5f 92       	push	r5
    2e1e:	6f 92       	push	r6
    2e20:	7f 92       	push	r7
    2e22:	8f 92       	push	r8
    2e24:	9f 92       	push	r9
    2e26:	af 92       	push	r10
    2e28:	bf 92       	push	r11
    2e2a:	cf 92       	push	r12
    2e2c:	df 92       	push	r13
    2e2e:	ef 92       	push	r14
    2e30:	ff 92       	push	r15
    2e32:	0f 93       	push	r16
    2e34:	1f 93       	push	r17
    2e36:	cf 93       	push	r28
    2e38:	df 93       	push	r29
    2e3a:	cd b7       	in	r28, 0x3d	; 61
    2e3c:	de b7       	in	r29, 0x3e	; 62
    2e3e:	ca 1b       	sub	r28, r26
    2e40:	db 0b       	sbc	r29, r27
    2e42:	0f b6       	in	r0, 0x3f	; 63
    2e44:	f8 94       	cli
    2e46:	de bf       	out	0x3e, r29	; 62
    2e48:	0f be       	out	0x3f, r0	; 63
    2e4a:	cd bf       	out	0x3d, r28	; 61
    2e4c:	09 94       	ijmp

00002e4e <__epilogue_restores__>:
    2e4e:	2a 88       	ldd	r2, Y+18	; 0x12
    2e50:	39 88       	ldd	r3, Y+17	; 0x11
    2e52:	48 88       	ldd	r4, Y+16	; 0x10
    2e54:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e56:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e58:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e5a:	8c 84       	ldd	r8, Y+12	; 0x0c
    2e5c:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e5e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e60:	b9 84       	ldd	r11, Y+9	; 0x09
    2e62:	c8 84       	ldd	r12, Y+8	; 0x08
    2e64:	df 80       	ldd	r13, Y+7	; 0x07
    2e66:	ee 80       	ldd	r14, Y+6	; 0x06
    2e68:	fd 80       	ldd	r15, Y+5	; 0x05
    2e6a:	0c 81       	ldd	r16, Y+4	; 0x04
    2e6c:	1b 81       	ldd	r17, Y+3	; 0x03
    2e6e:	aa 81       	ldd	r26, Y+2	; 0x02
    2e70:	b9 81       	ldd	r27, Y+1	; 0x01
    2e72:	ce 0f       	add	r28, r30
    2e74:	d1 1d       	adc	r29, r1
    2e76:	0f b6       	in	r0, 0x3f	; 63
    2e78:	f8 94       	cli
    2e7a:	de bf       	out	0x3e, r29	; 62
    2e7c:	0f be       	out	0x3f, r0	; 63
    2e7e:	cd bf       	out	0x3d, r28	; 61
    2e80:	ed 01       	movw	r28, r26
    2e82:	08 95       	ret

00002e84 <_exit>:
    2e84:	f8 94       	cli

00002e86 <__stop_program>:
    2e86:	ff cf       	rjmp	.-2      	; 0x2e86 <__stop_program>
